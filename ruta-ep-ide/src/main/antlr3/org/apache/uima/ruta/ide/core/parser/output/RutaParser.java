// $ANTLR 3.4 D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g 2013-07-19 14:10:09

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

package org.apache.uima.ruta.ide.core.parser;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;

import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BitSet;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.DFA;
import org.antlr.runtime.EarlyExitException;
import org.antlr.runtime.FailedPredicateException;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.MismatchedSetException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.Parser;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenStream;
import org.eclipse.dltk.ast.ASTNode;
import org.eclipse.dltk.ast.DLTKToken;
import org.eclipse.dltk.ast.declarations.Declaration;
import org.eclipse.dltk.ast.declarations.ModuleDeclaration;
import org.eclipse.dltk.ast.expressions.BooleanLiteral;
import org.eclipse.dltk.ast.expressions.Expression;
import org.eclipse.dltk.ast.references.VariableReference;
import org.eclipse.dltk.ast.statements.Statement;

import org.apache.uima.ruta.ide.core.extensions.RutaExternalFactory;
import org.apache.uima.ruta.ide.core.builder.DescriptorManager;
import org.apache.uima.ruta.ide.parser.ast.ActionFactory;
import org.apache.uima.ruta.ide.parser.ast.ComponentDeclaration;
import org.apache.uima.ruta.ide.parser.ast.ComponentReference;
import org.apache.uima.ruta.ide.parser.ast.ComposedRuleElement;
import org.apache.uima.ruta.ide.parser.ast.ConditionFactory;
import org.apache.uima.ruta.ide.parser.ast.ExpressionFactory;
import org.apache.uima.ruta.ide.parser.ast.ScriptFactory;
import org.apache.uima.ruta.ide.parser.ast.StatementFactory;
import org.apache.uima.ruta.ide.parser.ast.RutaTypeConstants;
import org.apache.uima.ruta.ide.parser.ast.RutaBlock;
import org.apache.uima.ruta.ide.parser.ast.RutaExpression;
import org.apache.uima.ruta.ide.parser.ast.RutaRule;
import org.apache.uima.ruta.ide.parser.ast.RutaRuleElement;
import org.apache.uima.ruta.ide.parser.ast.RutaScriptBlock;
import org.apache.uima.ruta.ide.parser.ast.RutaAction;
import org.apache.uima.ruta.ide.parser.ast.RutaCondition;
import org.apache.uima.ruta.ide.parser.ast.RutaFeatureDeclaration;
import org.apache.uima.ruta.ide.parser.ast.RutaPackageDeclaration;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

@SuppressWarnings({"all", "warnings", "unchecked"})
public class RutaParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "DocComment", "Annotation", "ListIdentifier", "TRIE", "CONTAINS", "DECLARE", "WORDLIST", "WORDTABLE", "AND", "CONTEXTCOUNT", "COUNT", "TOTALCOUNT", "CURRENTCOUNT", "INLIST", "LAST", "MOFN", "NEAR", "OR", "PARTOF", "PARTOFNEQ", "POSITION", "REGEXP", "SCORE", "VOTE", "IF", "FEATURE", "PARSE", "CREATE", "GATHER", "FILL", "ATTRIBUTE", "COLOR", "DEL", "LOG", "MARK", "MARKSCORE", "MARKONCE", "MARKFAST", "MARKTABLE", "MARKLAST", "REPLACE", "RETAINTYPE", "FILTERTYPE", "CALL", "EXEC", "CONFIGURE", "ASSIGN", "SETFEATURE", "GETFEATURE", "UNMARK", "UNMARKALL", "TRANSFER", "SHIFT", "DYNAMICANCHORING", "TRIM", "BEFORE", "AFTER", "IS", "STARTSWITH", "ENDSWITH", "ADDRETAINTYPE", "REMOVERETAINTYPE", "ADDFILTERTYPE", "REMOVEFILTERTYPE", "NOT", "ADD", "REMOVE", "REMOVEDUPLICATE", "MERGE", "GET", "GETLIST", "SIZE", "MATCHEDTEXT", "REMOVESTRING", "CLEAR", "THEN", "LogLevel", "OldColor", "PackageString", "ScriptString", "EngineString", "UimafitString", "BlockString", "AutomataBlockString", "TypeString", "IntString", "DoubleString", "FloatString", "StringString", "BooleanString", "TypeSystemString", "SymbolString", "CONDITION", "ACTION", "BOOLEANLIST", "INTLIST", "DOUBLELIST", "FLOATLIST", "STRINGLIST", "TYPELIST", "EXP", "LOGN", "SIN", "COS", "TAN", "XOR", "TRUE", "FALSE", "STARTANCHOR", "HexDigit", "IntegerTypeSuffix", "HexLiteral", "DecimalLiteral", "OctalLiteral", "Exponent", "FloatTypeSuffix", "FloatingPointLiteral", "EscapeSequence", "CharacterLiteral", "StringLiteral", "RessourceLiteral", "UnicodeEscape", "OctalEscape", "Letter", "JavaIDDigit", "Identifier", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "LCURLY", "RCURLY", "CIRCUMFLEX", "DOT", "COLON", "COMMA", "SEMI", "PLUS", "MINUS", "STAR", "SLASH", "VBAR", "AMPER", "LESS", "GREATER", "ASSIGN_EQUAL", "PERCENT", "QUESTION", "EQUAL", "NOTEQUAL", "ALT_NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", "WILDCARD", "WS", "COMMENT", "LINE_COMMENT"
    };

    public static final int EOF=-1;
    public static final int STAR=143;
    public static final int FloatTypeSuffix=119;
    public static final int OctalLiteral=117;
    public static final int LOG=37;
    public static final int CONTAINS=8;
    public static final int REMOVE=70;
    public static final int GREATEREQUAL=156;
    public static final int MARKFAST=41;
    public static final int CONDITION=96;
    public static final int MATCHEDTEXT=76;
    public static final int COUNT=14;
    public static final int LOGN=105;
    public static final int DYNAMICANCHORING=57;
    public static final int NOT=68;
    public static final int Identifier=129;
    public static final int ACTION=97;
    public static final int NOTEQUAL=153;
    public static final int CLEAR=78;
    public static final int VBAR=145;
    public static final int DOUBLELIST=100;
    public static final int ENDSWITH=63;
    public static final int RPAREN=131;
    public static final int CREATE=31;
    public static final int GREATER=148;
    public static final int SIN=106;
    public static final int EXP=104;
    public static final int CURRENTCOUNT=16;
    public static final int COS=107;
    public static final int TAN=108;
    public static final int TYPELIST=103;
    public static final int FloatString=91;
    public static final int LESS=147;
    public static final int REGEXP=25;
    public static final int GET=73;
    public static final int PARTOF=22;
    public static final int UNMARK=53;
    public static final int LAST=18;
    public static final int COMMENT=159;
    public static final int REMOVEDUPLICATE=71;
    public static final int UNMARKALL=54;
    public static final int RBRACK=133;
    public static final int NEAR=20;
    public static final int LINE_COMMENT=160;
    public static final int IntegerTypeSuffix=114;
    public static final int MARKSCORE=39;
    public static final int REMOVESTRING=77;
    public static final int TRANSFER=55;
    public static final int LCURLY=134;
    public static final int TRIE=7;
    public static final int FILTERTYPE=46;
    public static final int STRINGLIST=102;
    public static final int MARKONCE=40;
    public static final int ScriptString=83;
    public static final int EngineString=84;
    public static final int WS=158;
    public static final int WORDTABLE=11;
    public static final int WORDLIST=10;
    public static final int AutomataBlockString=87;
    public static final int FloatingPointLiteral=120;
    public static final int STARTANCHOR=112;
    public static final int INTLIST=99;
    public static final int OR=21;
    public static final int TRIM=58;
    public static final int JavaIDDigit=128;
    public static final int FLOATLIST=101;
    public static final int CALL=47;
    public static final int Annotation=5;
    public static final int FALSE=111;
    public static final int LESSEQUAL=155;
    public static final int RessourceLiteral=124;
    public static final int VOTE=27;
    public static final int Letter=127;
    public static final int EscapeSequence=121;
    public static final int SIZE=75;
    public static final int REMOVEFILTERTYPE=67;
    public static final int LBRACK=132;
    public static final int CharacterLiteral=122;
    public static final int DEL=36;
    public static final int ATTRIBUTE=34;
    public static final int TypeString=88;
    public static final int SHIFT=56;
    public static final int Exponent=118;
    public static final int ASSIGN_EQUAL=149;
    public static final int RETAINTYPE=45;
    public static final int TypeSystemString=94;
    public static final int AND=12;
    public static final int ADDFILTERTYPE=66;
    public static final int BlockString=86;
    public static final int IntString=89;
    public static final int HexDigit=113;
    public static final int COLOR=35;
    public static final int LPAREN=130;
    public static final int POSITION=24;
    public static final int IF=28;
    public static final int LogLevel=80;
    public static final int CONFIGURE=49;
    public static final int SLASH=144;
    public static final int THEN=79;
    public static final int FILL=33;
    public static final int COMMA=139;
    public static final int IS=61;
    public static final int AMPER=146;
    public static final int REPLACE=44;
    public static final int GETLIST=74;
    public static final int WILDCARD=157;
    public static final int EQUAL=152;
    public static final int GATHER=32;
    public static final int INLIST=17;
    public static final int PLUS=141;
    public static final int BooleanString=93;
    public static final int GETFEATURE=52;
    public static final int DOT=137;
    public static final int ListIdentifier=6;
    public static final int PARTOFNEQ=23;
    public static final int BOOLEANLIST=98;
    public static final int ADD=69;
    public static final int MARKTABLE=42;
    public static final int HexLiteral=115;
    public static final int XOR=109;
    public static final int PERCENT=150;
    public static final int MARK=38;
    public static final int PARSE=30;
    public static final int PackageString=82;
    public static final int OldColor=81;
    public static final int MARKLAST=43;
    public static final int MERGE=72;
    public static final int CONTEXTCOUNT=13;
    public static final int BEFORE=59;
    public static final int EXEC=48;
    public static final int MINUS=142;
    public static final int AFTER=60;
    public static final int DecimalLiteral=116;
    public static final int SEMI=140;
    public static final int TRUE=110;
    public static final int FEATURE=29;
    public static final int SymbolString=95;
    public static final int COLON=138;
    public static final int StringLiteral=123;
    public static final int StringString=92;
    public static final int SCORE=26;
    public static final int QUESTION=151;
    public static final int ADDRETAINTYPE=64;
    public static final int UnicodeEscape=125;
    public static final int RCURLY=135;
    public static final int STARTSWITH=62;
    public static final int ASSIGN=50;
    public static final int REMOVERETAINTYPE=65;
    public static final int TOTALCOUNT=15;
    public static final int DECLARE=9;
    public static final int UimafitString=85;
    public static final int DocComment=4;
    public static final int MOFN=19;
    public static final int OctalEscape=126;
    public static final int SETFEATURE=51;
    public static final int DoubleString=90;
    public static final int CIRCUMFLEX=136;
    public static final int ALT_NOTEQUAL=154;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public RutaParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public RutaParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

    public String[] getTokenNames() { return RutaParser.tokenNames; }
    public String getGrammarFileName() { return "D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g"; }


    	public DLTKRutaErrorReporter reporter;
    	public ModuleDeclaration md;
    	private List<String> vars = new ArrayList<String>();	
    	private Map<String, String> varTypeMap = new HashMap<String, String>();
    	private Map<String, String> lists = new HashMap<String, String>();
    	private Map<String, String> tables = new HashMap<String, String>();
    	public int length;
    	public DLTKTokenConverter converter;
    	public DescriptorManager descriptor;
    	private int level = 0;
    	private RutaExternalFactory external = new RutaExternalFactory();
    	
    	private String module;
    	private String packageString;
    	
    	private ScriptFactory scriptFactory = new ScriptFactory();
    	
    	public List<String> getVariables() {
    		return vars;
    	}
    	
    	public Map<String, String> getVariableTypes() {
    		return varTypeMap;
    	}
    	
    	DLTKToken toDLTK(Token token) {
    		return converter.convert(token);
    	}
    	public void emitErrorMessage(String msg) {
    		reporter.reportMessage(msg);
    	}
    	public void reportError(RecognitionException e) {
    		if( reporter != null ) {
    			reporter.reportError(e);
    		}
    	}
    	
    	public void addType(RutaBlock parent, String type, String parentType) {
    		vars.add(type);
    		descriptor.addType(parent.getNamespace()+"."+type.trim(), "Type defined in "+packageString+"."+module, parentType);
    	}
    	
    	public void addPredefinedType(String type) {
    		vars.add(type);
    		varTypeMap.put(type, "TYPE");
    		
    	}
    	
    	public void addType(RutaBlock parent, String name, String parentType, List featuresTypes,
              List<Token> featuresNames) {
    	   	 name = parent.getNamespace() + "." + name.trim();
    	   	 descriptor.addType(name, "Type defined in " + packageString + "." + module, parentType);
    	    	for (int i = 0; i < featuresTypes.size(); i++) {
    	    	  Object object = featuresTypes.get(i);
    	    	  String ftype = "";
    	    	  if (object instanceof ASTNode) {
    	    		    ftype = ((ASTNode) object).toString();
    		      } else if (object instanceof Token) {
    	     	   ftype = ((Token) object).getText();
    	     	 }
    		      String fname = featuresNames.get(i).getText();
    	     	 descriptor.addFeature(name, fname, fname, ftype);
    	   	 }
     	 }
    	
    	public void addWordList(RutaBlock parent, String name, String list) {
    		lists.put(name, list);
    	}
    	
    	public void addCSVTable(RutaBlock parent, String name, String table) {
    		tables.put(name, table);
    	}
    	
    	public boolean isType(RutaBlock parent, String type) {
    		return vars.contains(type);
    	}
    		
    	public void addVariable(String var, String type, IntStream input) throws NoViableAltException {
    		if(!vars.contains(var)) {
    			vars.add(var);
    			varTypeMap.put(var, type);
    		} 
    	}
    	
    	public void addVariable(String var, String type) {
    		if(!vars.contains(var)) {
    			vars.add(var);
    			varTypeMap.put(var, type);
    		}
    	}
    	
    	public boolean isVariable(String var) {
    		return vars.contains(var);
    	}
    	
    	public boolean isVariableOfType(String var, String type) {
    		return vars.contains(var) && type.equals(varTypeMap.get(var));
    	}
    	
    	public void checkVariable(String var, IntStream input) throws NoViableAltException {
    		if(!vars.contains(var)) {
    			throw new NoViableAltException("not declared \"" + var + "\"", 3, 0, input);
    		}
    	}
    	
    	  public void addImportTypeSystem(ComponentDeclaration module) {
    	    descriptor.addTypeSystem(module.getName());
    	  }
    	
    	  public void addImportScript(ComponentDeclaration module) {
    		    descriptor.addScript(module.getName());
    		  }
    	
    	  public void addImportEngine(ComponentDeclaration module) {
    		    descriptor.addEngine(module.getName());
    		  }
    	   public void addImportUimafitEngine(ComponentDeclaration module) {
    	    descriptor.addUimafitEngine(module.getName());
    	  }
    	
    	protected static final int[] getBounds(Token t) {
    		if (t instanceof CommonToken) {
    			CommonToken ct = (CommonToken) t;
    			int[] bounds = {ct.getStartIndex(), ct.getStopIndex()}; 
    			return bounds;
    		}
    		return null;
    	}
    	
    //	public String getTypeOf(String varName) {
    //		String vn = varTypeMap.get(varName);
    //		return vn != null? vn : "";
    //	}
    	



    // $ANTLR start "file_input"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:233:1: file_input[String module] : (p= packageDeclaration )? gs= globalStatements s= statements EOF ;
    public final void file_input(String module) throws RecognitionException {
        RutaPackageDeclaration p =null;

        List<Statement> gs =null;

        List<Statement> s =null;



        RutaScriptBlock rootBlock = null;
        List<Statement> stmts = new ArrayList<Statement>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:238:2: ( (p= packageDeclaration )? gs= globalStatements s= statements EOF )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:239:2: (p= packageDeclaration )? gs= globalStatements s= statements EOF
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:239:4: (p= packageDeclaration )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==PackageString) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:239:4: p= packageDeclaration
                    {
                    pushFollow(FOLLOW_packageDeclaration_in_file_input73);
                    p=packageDeclaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            	String packageName = "";
            	if(p != null) {packageName = p.getName();}
            	rootBlock = scriptFactory.createScriptBlock(0,0,0,0,module, null, null, packageName);
            	stmts.add(p);
            	this.module = module;
            	if(p != null) {
            		this.packageString = p.getName();
            	}
            	}

            if ( state.backtracking==0 ) {blockDeclaration_stack.push(new blockDeclaration_scope());((blockDeclaration_scope)blockDeclaration_stack.peek()).env = rootBlock;}

            pushFollow(FOLLOW_globalStatements_in_file_input88);
            gs=globalStatements();

            state._fsp--;
            if (state.failed) return ;

            pushFollow(FOLLOW_statements_in_file_input95);
            s=statements();

            state._fsp--;
            if (state.failed) return ;

            if ( state.backtracking==0 ) {
            	  stmts.addAll(gs);
            	  stmts.addAll(s);
              	  for (Statement stmt : stmts){
            		  if (stmt != null) {
            		    md.addStatement(stmt);
            		  }
            	  };
            	}

            match(input,EOF,FOLLOW_EOF_in_file_input101); if (state.failed) return ;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "file_input"



    // $ANTLR start "packageDeclaration"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:267:1: packageDeclaration returns [RutaPackageDeclaration pack] : pString= PackageString p= dottedId SEMI ;
    public final RutaPackageDeclaration packageDeclaration() throws RecognitionException {
        RutaPackageDeclaration pack = null;


        Token pString=null;
        Token p =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:268:2: (pString= PackageString p= dottedId SEMI )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:268:4: pString= PackageString p= dottedId SEMI
            {
            pString=(Token)match(input,PackageString,FOLLOW_PackageString_in_packageDeclaration122); if (state.failed) return pack;

            if ( state.backtracking==0 ) {
            	pack = StatementFactory.createPkgDeclaration(p, pString);
            	}

            pushFollow(FOLLOW_dottedId_in_packageDeclaration133);
            p=dottedId();

            state._fsp--;
            if (state.failed) return pack;

            if ( state.backtracking==0 ) {
            	pack = StatementFactory.createPkgDeclaration(p, pString);
            	}

            match(input,SEMI,FOLLOW_SEMI_in_packageDeclaration140); if (state.failed) return pack;

            if ( state.backtracking==0 ) {
            	pack = StatementFactory.createPkgDeclaration(p, pString);
            	}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return pack;
    }
    // $ANTLR end "packageDeclaration"



    // $ANTLR start "statements"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:282:1: statements returns [List<Statement> stmts = new ArrayList<Statement>()] : (morestmts= statement )* ;
    public final List<Statement> statements() throws RecognitionException {
        List<Statement> stmts =  new ArrayList<Statement>();


        List<Statement> morestmts =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:283:2: ( (morestmts= statement )* )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:284:2: (morestmts= statement )*
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:284:2: (morestmts= statement )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( ((LA2_0 >= DECLARE && LA2_0 <= WORDTABLE)||LA2_0==REMOVESTRING||(LA2_0 >= BlockString && LA2_0 <= BooleanString)||(LA2_0 >= BOOLEANLIST && LA2_0 <= TYPELIST)||LA2_0==STARTANCHOR||LA2_0==StringLiteral||(LA2_0 >= Identifier && LA2_0 <= LPAREN)||LA2_0==WILDCARD) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:284:3: morestmts= statement
            	    {
            	    pushFollow(FOLLOW_statement_in_statements164);
            	    morestmts=statement();

            	    state._fsp--;
            	    if (state.failed) return stmts;

            	    if ( state.backtracking==0 ) {if(morestmts != null) {stmts.addAll(morestmts);}}

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return stmts;
    }
    // $ANTLR end "statements"



    // $ANTLR start "globalStatements"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:287:1: globalStatements returns [List<Statement> stmts = new ArrayList<Statement>()] : (morestmts= globalStatement )* ;
    public final List<Statement> globalStatements() throws RecognitionException {
        List<Statement> stmts =  new ArrayList<Statement>();


        List<Statement> morestmts =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:288:2: ( (morestmts= globalStatement )* )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:289:2: (morestmts= globalStatement )*
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:289:2: (morestmts= globalStatement )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( ((LA3_0 >= ScriptString && LA3_0 <= UimafitString)||LA3_0==TypeSystemString) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:289:3: morestmts= globalStatement
            	    {
            	    pushFollow(FOLLOW_globalStatement_in_globalStatements190);
            	    morestmts=globalStatement();

            	    state._fsp--;
            	    if (state.failed) return stmts;

            	    if ( state.backtracking==0 ) {if(morestmts != null) {stmts.addAll(morestmts);}}

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return stmts;
    }
    // $ANTLR end "globalStatements"



    // $ANTLR start "globalStatement"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:292:1: globalStatement returns [List<Statement> stmts = new ArrayList<Statement>()] : stmtImport= importStatement ;
    public final List<Statement> globalStatement() throws RecognitionException {
        List<Statement> stmts =  new ArrayList<Statement>();


        Statement stmtImport =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:293:2: (stmtImport= importStatement )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:294:2: stmtImport= importStatement
            {
            pushFollow(FOLLOW_importStatement_in_globalStatement214);
            stmtImport=importStatement();

            state._fsp--;
            if (state.failed) return stmts;

            if ( state.backtracking==0 ) {stmts.add(stmtImport);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return stmts;
    }
    // $ANTLR end "globalStatement"



    // $ANTLR start "statement"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:297:1: statement returns [List<Statement> stmts = new ArrayList<Statement>()] : (stmts1= declaration |stmtVariable= variableDeclaration |stmt3= blockDeclaration |stmt2= simpleStatement ) ;
    public final List<Statement> statement() throws RecognitionException {
        List<Statement> stmts =  new ArrayList<Statement>();


        List<Statement> stmts1 =null;

        List<Statement> stmtVariable =null;

        RutaBlock stmt3 =null;

        RutaRule stmt2 =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:298:2: ( (stmts1= declaration |stmtVariable= variableDeclaration |stmt3= blockDeclaration |stmt2= simpleStatement ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:299:2: (stmts1= declaration |stmtVariable= variableDeclaration |stmt3= blockDeclaration |stmt2= simpleStatement )
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:299:2: (stmts1= declaration |stmtVariable= variableDeclaration |stmt3= blockDeclaration |stmt2= simpleStatement )
            int alt4=4;
            switch ( input.LA(1) ) {
            case DECLARE:
                {
                alt4=1;
                }
                break;
            case WORDLIST:
            case WORDTABLE:
            case TypeString:
            case IntString:
            case DoubleString:
            case FloatString:
            case StringString:
            case BooleanString:
            case BOOLEANLIST:
            case INTLIST:
            case DOUBLELIST:
            case FLOATLIST:
            case STRINGLIST:
            case TYPELIST:
                {
                alt4=2;
                }
                break;
            case BlockString:
            case AutomataBlockString:
                {
                alt4=3;
                }
                break;
            case REMOVESTRING:
            case STARTANCHOR:
            case StringLiteral:
            case Identifier:
            case LPAREN:
            case WILDCARD:
                {
                alt4=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return stmts;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;

            }

            switch (alt4) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:299:4: stmts1= declaration
                    {
                    pushFollow(FOLLOW_declaration_in_statement240);
                    stmts1=declaration();

                    state._fsp--;
                    if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {stmts.addAll(stmts1);}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:300:4: stmtVariable= variableDeclaration
                    {
                    pushFollow(FOLLOW_variableDeclaration_in_statement251);
                    stmtVariable=variableDeclaration();

                    state._fsp--;
                    if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {stmts.addAll(stmtVariable);}

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:301:4: stmt3= blockDeclaration
                    {
                    pushFollow(FOLLOW_blockDeclaration_in_statement262);
                    stmt3=blockDeclaration();

                    state._fsp--;
                    if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {stmts.add(stmt3);}

                    }
                    break;
                case 4 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:303:4: stmt2= simpleStatement
                    {
                    pushFollow(FOLLOW_simpleStatement_in_statement275);
                    stmt2=simpleStatement();

                    state._fsp--;
                    if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {stmts.add(stmt2);}

                    }
                    break;

            }


            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return stmts;
    }
    // $ANTLR end "statement"



    // $ANTLR start "importStatement"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:309:1: importStatement returns [Statement stmt = null] : (im= TypeSystemString name= dottedComponentDeclaration SEMI |im= ScriptString name= dottedComponentDeclaration SEMI |im= EngineString name= dottedComponentDeclaration SEMI |im= UimafitString name= dottedComponentDeclaration SEMI );
    public final Statement importStatement() throws RecognitionException {
        Statement stmt =  null;


        Token im=null;
        ComponentDeclaration name =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:310:2: (im= TypeSystemString name= dottedComponentDeclaration SEMI |im= ScriptString name= dottedComponentDeclaration SEMI |im= EngineString name= dottedComponentDeclaration SEMI |im= UimafitString name= dottedComponentDeclaration SEMI )
            int alt5=4;
            switch ( input.LA(1) ) {
            case TypeSystemString:
                {
                alt5=1;
                }
                break;
            case ScriptString:
                {
                alt5=2;
                }
                break;
            case EngineString:
                {
                alt5=3;
                }
                break;
            case UimafitString:
                {
                alt5=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return stmt;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;

            }

            switch (alt5) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:311:2: im= TypeSystemString name= dottedComponentDeclaration SEMI
                    {
                    im=(Token)match(input,TypeSystemString,FOLLOW_TypeSystemString_in_importStatement304); if (state.failed) return stmt;

                    if ( state.backtracking==0 ) {stmt = StatementFactory.createImportTypeSystem(StatementFactory.createEmptyComponentDeclaration(im),im);}

                    pushFollow(FOLLOW_dottedComponentDeclaration_in_importStatement316);
                    name=dottedComponentDeclaration();

                    state._fsp--;
                    if (state.failed) return stmt;

                    if ( state.backtracking==0 ) {if(name != null) {stmt = StatementFactory.createImportTypeSystem(name,im);addImportTypeSystem(name);}}

                    match(input,SEMI,FOLLOW_SEMI_in_importStatement324); if (state.failed) return stmt;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:316:4: im= ScriptString name= dottedComponentDeclaration SEMI
                    {
                    im=(Token)match(input,ScriptString,FOLLOW_ScriptString_in_importStatement334); if (state.failed) return stmt;

                    if ( state.backtracking==0 ) {stmt = StatementFactory.createImportScript(StatementFactory.createEmptyComponentDeclaration(im),im);}

                    pushFollow(FOLLOW_dottedComponentDeclaration_in_importStatement346);
                    name=dottedComponentDeclaration();

                    state._fsp--;
                    if (state.failed) return stmt;

                    if ( state.backtracking==0 ) {if(name != null) {stmt = StatementFactory.createImportScript(name,im);addImportScript(name);}}

                    match(input,SEMI,FOLLOW_SEMI_in_importStatement354); if (state.failed) return stmt;

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:321:4: im= EngineString name= dottedComponentDeclaration SEMI
                    {
                    im=(Token)match(input,EngineString,FOLLOW_EngineString_in_importStatement364); if (state.failed) return stmt;

                    if ( state.backtracking==0 ) {stmt = StatementFactory.createImportEngine(StatementFactory.createEmptyComponentDeclaration(im),im);}

                    pushFollow(FOLLOW_dottedComponentDeclaration_in_importStatement376);
                    name=dottedComponentDeclaration();

                    state._fsp--;
                    if (state.failed) return stmt;

                    if ( state.backtracking==0 ) {if(name != null) {stmt = StatementFactory.createImportEngine(name,im);addImportEngine(name);}}

                    match(input,SEMI,FOLLOW_SEMI_in_importStatement384); if (state.failed) return stmt;

                    }
                    break;
                case 4 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:326:5: im= UimafitString name= dottedComponentDeclaration SEMI
                    {
                    im=(Token)match(input,UimafitString,FOLLOW_UimafitString_in_importStatement395); if (state.failed) return stmt;

                    if ( state.backtracking==0 ) {stmt = StatementFactory.createImportEngine(StatementFactory.createEmptyComponentDeclaration(im),im);}

                    pushFollow(FOLLOW_dottedComponentDeclaration_in_importStatement407);
                    name=dottedComponentDeclaration();

                    state._fsp--;
                    if (state.failed) return stmt;

                    if ( state.backtracking==0 ) {if(name != null) {stmt = StatementFactory.createImportEngine(name,im);addImportUimafitEngine(name);}}

                    match(input,SEMI,FOLLOW_SEMI_in_importStatement415); if (state.failed) return stmt;

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return stmt;
    }
    // $ANTLR end "importStatement"



    // $ANTLR start "variableDeclaration"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:333:1: variableDeclaration returns [List<Statement> stmts = new ArrayList<Statement>()] : (type= IntString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= numberExpression )? SEMI |type= DoubleString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= numberExpression )? SEMI |type= FloatString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= numberExpression )? SEMI |type= StringString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= stringExpression )? SEMI |type= BooleanString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= booleanExpression )? SEMI |type= TypeString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= typeExpression )? SEMI |type= WORDLIST id= Identifier ( ASSIGN_EQUAL list= wordListExpression )? SEMI |type= WORDTABLE id= Identifier ( ASSIGN_EQUAL table= wordTableExpression )? SEMI |type= BOOLEANLIST id= Identifier ( ASSIGN_EQUAL list= booleanListExpression )? SEMI |type= INTLIST id= Identifier ( ASSIGN_EQUAL list= numberListExpression )? SEMI |type= DOUBLELIST id= Identifier ( ASSIGN_EQUAL list= numberListExpression )? SEMI |type= FLOATLIST id= Identifier ( ASSIGN_EQUAL list= numberListExpression )? SEMI |type= STRINGLIST id= Identifier ( ASSIGN_EQUAL list= stringListExpression )? SEMI |type= TYPELIST id= Identifier ( ASSIGN_EQUAL list= typeListExpression )? SEMI );
    public final List<Statement> variableDeclaration() throws RecognitionException {
        List<Statement> stmts =  new ArrayList<Statement>();


        Token type=null;
        Token id=null;
        Expression init =null;

        Expression list =null;

        Expression table =null;



        	List decls = new ArrayList();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:337:2: (type= IntString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= numberExpression )? SEMI |type= DoubleString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= numberExpression )? SEMI |type= FloatString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= numberExpression )? SEMI |type= StringString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= stringExpression )? SEMI |type= BooleanString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= booleanExpression )? SEMI |type= TypeString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= typeExpression )? SEMI |type= WORDLIST id= Identifier ( ASSIGN_EQUAL list= wordListExpression )? SEMI |type= WORDTABLE id= Identifier ( ASSIGN_EQUAL table= wordTableExpression )? SEMI |type= BOOLEANLIST id= Identifier ( ASSIGN_EQUAL list= booleanListExpression )? SEMI |type= INTLIST id= Identifier ( ASSIGN_EQUAL list= numberListExpression )? SEMI |type= DOUBLELIST id= Identifier ( ASSIGN_EQUAL list= numberListExpression )? SEMI |type= FLOATLIST id= Identifier ( ASSIGN_EQUAL list= numberListExpression )? SEMI |type= STRINGLIST id= Identifier ( ASSIGN_EQUAL list= stringListExpression )? SEMI |type= TYPELIST id= Identifier ( ASSIGN_EQUAL list= typeListExpression )? SEMI )
            int alt26=14;
            switch ( input.LA(1) ) {
            case IntString:
                {
                alt26=1;
                }
                break;
            case DoubleString:
                {
                alt26=2;
                }
                break;
            case FloatString:
                {
                alt26=3;
                }
                break;
            case StringString:
                {
                alt26=4;
                }
                break;
            case BooleanString:
                {
                alt26=5;
                }
                break;
            case TypeString:
                {
                alt26=6;
                }
                break;
            case WORDLIST:
                {
                alt26=7;
                }
                break;
            case WORDTABLE:
                {
                alt26=8;
                }
                break;
            case BOOLEANLIST:
                {
                alt26=9;
                }
                break;
            case INTLIST:
                {
                alt26=10;
                }
                break;
            case DOUBLELIST:
                {
                alt26=11;
                }
                break;
            case FLOATLIST:
                {
                alt26=12;
                }
                break;
            case STRINGLIST:
                {
                alt26=13;
                }
                break;
            case TYPELIST:
                {
                alt26=14;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return stmts;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;

            }

            switch (alt26) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:338:2: type= IntString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= numberExpression )? SEMI
                    {
                    type=(Token)match(input,IntString,FOLLOW_IntString_in_variableDeclaration442); if (state.failed) return stmts;

                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration448); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {addVariable(id.getText(), type.getText()); decls.add(StatementFactory.createIntVariable(id, type));}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:339:3: ( COMMA id= Identifier )*
                    loop6:
                    do {
                        int alt6=2;
                        int LA6_0 = input.LA(1);

                        if ( (LA6_0==COMMA) ) {
                            alt6=1;
                        }


                        switch (alt6) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:339:4: COMMA id= Identifier
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_variableDeclaration455); if (state.failed) return stmts;

                    	    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration460); if (state.failed) return stmts;

                    	    if ( state.backtracking==0 ) {addVariable(id.getText(), type.getText()); decls.add(StatementFactory.createIntVariable(id, type));}

                    	    }
                    	    break;

                    	default :
                    	    break loop6;
                        }
                    } while (true);


                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:340:6: ( ASSIGN_EQUAL init= numberExpression )?
                    int alt7=2;
                    int LA7_0 = input.LA(1);

                    if ( (LA7_0==ASSIGN_EQUAL) ) {
                        alt7=1;
                    }
                    switch (alt7) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:340:7: ASSIGN_EQUAL init= numberExpression
                            {
                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_variableDeclaration470); if (state.failed) return stmts;

                            pushFollow(FOLLOW_numberExpression_in_variableDeclaration476);
                            init=numberExpression();

                            state._fsp--;
                            if (state.failed) return stmts;

                            }
                            break;

                    }


                    match(input,SEMI,FOLLOW_SEMI_in_variableDeclaration481); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {
                    		 stmts.add(StatementFactory.createDeclarationsStatement(type, decls, init));
                    		 }

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:345:2: type= DoubleString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= numberExpression )? SEMI
                    {
                    type=(Token)match(input,DoubleString,FOLLOW_DoubleString_in_variableDeclaration495); if (state.failed) return stmts;

                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration501); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {addVariable(id.getText(), type.getText());decls.add(StatementFactory.createDoubleVariable(id, type));}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:346:4: ( COMMA id= Identifier )*
                    loop8:
                    do {
                        int alt8=2;
                        int LA8_0 = input.LA(1);

                        if ( (LA8_0==COMMA) ) {
                            alt8=1;
                        }


                        switch (alt8) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:346:5: COMMA id= Identifier
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_variableDeclaration509); if (state.failed) return stmts;

                    	    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration515); if (state.failed) return stmts;

                    	    if ( state.backtracking==0 ) {addVariable(id.getText(), type.getText());decls.add(StatementFactory.createDoubleVariable(id, type));}

                    	    }
                    	    break;

                    	default :
                    	    break loop8;
                        }
                    } while (true);


                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:347:7: ( ASSIGN_EQUAL init= numberExpression )?
                    int alt9=2;
                    int LA9_0 = input.LA(1);

                    if ( (LA9_0==ASSIGN_EQUAL) ) {
                        alt9=1;
                    }
                    switch (alt9) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:347:8: ASSIGN_EQUAL init= numberExpression
                            {
                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_variableDeclaration526); if (state.failed) return stmts;

                            pushFollow(FOLLOW_numberExpression_in_variableDeclaration532);
                            init=numberExpression();

                            state._fsp--;
                            if (state.failed) return stmts;

                            }
                            break;

                    }


                    match(input,SEMI,FOLLOW_SEMI_in_variableDeclaration537); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {
                    		 stmts.add(StatementFactory.createDeclarationsStatement(type, decls, init));
                    		 }

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:352:2: type= FloatString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= numberExpression )? SEMI
                    {
                    type=(Token)match(input,FloatString,FOLLOW_FloatString_in_variableDeclaration551); if (state.failed) return stmts;

                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration557); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {addVariable(id.getText(), type.getText());decls.add(StatementFactory.createFloatVariable(id, type));}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:353:4: ( COMMA id= Identifier )*
                    loop10:
                    do {
                        int alt10=2;
                        int LA10_0 = input.LA(1);

                        if ( (LA10_0==COMMA) ) {
                            alt10=1;
                        }


                        switch (alt10) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:353:5: COMMA id= Identifier
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_variableDeclaration565); if (state.failed) return stmts;

                    	    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration571); if (state.failed) return stmts;

                    	    if ( state.backtracking==0 ) {addVariable(id.getText(), type.getText());decls.add(StatementFactory.createFloatVariable(id, type));}

                    	    }
                    	    break;

                    	default :
                    	    break loop10;
                        }
                    } while (true);


                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:354:7: ( ASSIGN_EQUAL init= numberExpression )?
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==ASSIGN_EQUAL) ) {
                        alt11=1;
                    }
                    switch (alt11) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:354:8: ASSIGN_EQUAL init= numberExpression
                            {
                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_variableDeclaration582); if (state.failed) return stmts;

                            pushFollow(FOLLOW_numberExpression_in_variableDeclaration588);
                            init=numberExpression();

                            state._fsp--;
                            if (state.failed) return stmts;

                            }
                            break;

                    }


                    match(input,SEMI,FOLLOW_SEMI_in_variableDeclaration593); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {
                    		 stmts.add(StatementFactory.createDeclarationsStatement(type, decls, init));
                    		 }

                    }
                    break;
                case 4 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:359:2: type= StringString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= stringExpression )? SEMI
                    {
                    type=(Token)match(input,StringString,FOLLOW_StringString_in_variableDeclaration607); if (state.failed) return stmts;

                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration613); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {addVariable(id.getText(), type.getText());decls.add(StatementFactory.createStringVariable(id, type));}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:360:4: ( COMMA id= Identifier )*
                    loop12:
                    do {
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==COMMA) ) {
                            alt12=1;
                        }


                        switch (alt12) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:360:5: COMMA id= Identifier
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_variableDeclaration621); if (state.failed) return stmts;

                    	    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration627); if (state.failed) return stmts;

                    	    if ( state.backtracking==0 ) {addVariable(id.getText(), type.getText());decls.add(StatementFactory.createStringVariable(id, type));}

                    	    }
                    	    break;

                    	default :
                    	    break loop12;
                        }
                    } while (true);


                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:361:7: ( ASSIGN_EQUAL init= stringExpression )?
                    int alt13=2;
                    int LA13_0 = input.LA(1);

                    if ( (LA13_0==ASSIGN_EQUAL) ) {
                        alt13=1;
                    }
                    switch (alt13) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:361:8: ASSIGN_EQUAL init= stringExpression
                            {
                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_variableDeclaration638); if (state.failed) return stmts;

                            pushFollow(FOLLOW_stringExpression_in_variableDeclaration644);
                            init=stringExpression();

                            state._fsp--;
                            if (state.failed) return stmts;

                            }
                            break;

                    }


                    match(input,SEMI,FOLLOW_SEMI_in_variableDeclaration649); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {
                    		 stmts.add(StatementFactory.createDeclarationsStatement(type, decls, init));
                    		 }

                    }
                    break;
                case 5 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:366:2: type= BooleanString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= booleanExpression )? SEMI
                    {
                    type=(Token)match(input,BooleanString,FOLLOW_BooleanString_in_variableDeclaration663); if (state.failed) return stmts;

                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration669); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {addVariable(id.getText(), type.getText());decls.add(StatementFactory.createBooleanVariable(id, type));}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:367:4: ( COMMA id= Identifier )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==COMMA) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:367:5: COMMA id= Identifier
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_variableDeclaration677); if (state.failed) return stmts;

                    	    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration683); if (state.failed) return stmts;

                    	    if ( state.backtracking==0 ) {addVariable(id.getText(), type.getText());decls.add(StatementFactory.createBooleanVariable(id, type));}

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);


                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:368:7: ( ASSIGN_EQUAL init= booleanExpression )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( (LA15_0==ASSIGN_EQUAL) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:368:8: ASSIGN_EQUAL init= booleanExpression
                            {
                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_variableDeclaration694); if (state.failed) return stmts;

                            pushFollow(FOLLOW_booleanExpression_in_variableDeclaration700);
                            init=booleanExpression();

                            state._fsp--;
                            if (state.failed) return stmts;

                            }
                            break;

                    }


                    match(input,SEMI,FOLLOW_SEMI_in_variableDeclaration705); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {
                    		 stmts.add(StatementFactory.createDeclarationsStatement(type, decls, init));
                    		 }

                    }
                    break;
                case 6 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:373:2: type= TypeString id= Identifier ( COMMA id= Identifier )* ( ASSIGN_EQUAL init= typeExpression )? SEMI
                    {
                    type=(Token)match(input,TypeString,FOLLOW_TypeString_in_variableDeclaration719); if (state.failed) return stmts;

                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration725); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {addVariable(id.getText(), type.getText());decls.add(StatementFactory.createTypeVariable(id,type));}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:374:4: ( COMMA id= Identifier )*
                    loop16:
                    do {
                        int alt16=2;
                        int LA16_0 = input.LA(1);

                        if ( (LA16_0==COMMA) ) {
                            alt16=1;
                        }


                        switch (alt16) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:374:5: COMMA id= Identifier
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_variableDeclaration733); if (state.failed) return stmts;

                    	    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration739); if (state.failed) return stmts;

                    	    if ( state.backtracking==0 ) {addVariable(id.getText(), type.getText());decls.add(StatementFactory.createTypeVariable(id,type));}

                    	    }
                    	    break;

                    	default :
                    	    break loop16;
                        }
                    } while (true);


                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:375:7: ( ASSIGN_EQUAL init= typeExpression )?
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==ASSIGN_EQUAL) ) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:375:8: ASSIGN_EQUAL init= typeExpression
                            {
                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_variableDeclaration750); if (state.failed) return stmts;

                            pushFollow(FOLLOW_typeExpression_in_variableDeclaration756);
                            init=typeExpression();

                            state._fsp--;
                            if (state.failed) return stmts;

                            }
                            break;

                    }


                    match(input,SEMI,FOLLOW_SEMI_in_variableDeclaration761); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {
                    		 stmts.add(StatementFactory.createDeclarationsStatement(type, decls, init));
                    		 }

                    }
                    break;
                case 7 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:380:9: type= WORDLIST id= Identifier ( ASSIGN_EQUAL list= wordListExpression )? SEMI
                    {
                    type=(Token)match(input,WORDLIST,FOLLOW_WORDLIST_in_variableDeclaration789); if (state.failed) return stmts;

                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration795); if (state.failed) return stmts;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:380:41: ( ASSIGN_EQUAL list= wordListExpression )?
                    int alt18=2;
                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==ASSIGN_EQUAL) ) {
                        alt18=1;
                    }
                    switch (alt18) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:380:42: ASSIGN_EQUAL list= wordListExpression
                            {
                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_variableDeclaration798); if (state.failed) return stmts;

                            pushFollow(FOLLOW_wordListExpression_in_variableDeclaration804);
                            list=wordListExpression();

                            state._fsp--;
                            if (state.failed) return stmts;

                            }
                            break;

                    }


                    match(input,SEMI,FOLLOW_SEMI_in_variableDeclaration808); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {
                            addVariable(id.getText(), type.getText());
                            decls.add(StatementFactory.createListVariable(id,type,list));
                            stmts.add(StatementFactory.createDeclarationsStatement(type, decls, list));
                            }

                    }
                    break;
                case 8 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:387:9: type= WORDTABLE id= Identifier ( ASSIGN_EQUAL table= wordTableExpression )? SEMI
                    {
                    type=(Token)match(input,WORDTABLE,FOLLOW_WORDTABLE_in_variableDeclaration842); if (state.failed) return stmts;

                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration848); if (state.failed) return stmts;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:387:42: ( ASSIGN_EQUAL table= wordTableExpression )?
                    int alt19=2;
                    int LA19_0 = input.LA(1);

                    if ( (LA19_0==ASSIGN_EQUAL) ) {
                        alt19=1;
                    }
                    switch (alt19) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:387:43: ASSIGN_EQUAL table= wordTableExpression
                            {
                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_variableDeclaration851); if (state.failed) return stmts;

                            pushFollow(FOLLOW_wordTableExpression_in_variableDeclaration857);
                            table=wordTableExpression();

                            state._fsp--;
                            if (state.failed) return stmts;

                            }
                            break;

                    }


                    match(input,SEMI,FOLLOW_SEMI_in_variableDeclaration862); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {
                            addVariable(id.getText(), type.getText());
                            decls.add(StatementFactory.createTableVariable(id,type,table));
                            stmts.add(StatementFactory.createDeclarationsStatement(type, decls, table));
                            }

                    }
                    break;
                case 9 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:394:9: type= BOOLEANLIST id= Identifier ( ASSIGN_EQUAL list= booleanListExpression )? SEMI
                    {
                    type=(Token)match(input,BOOLEANLIST,FOLLOW_BOOLEANLIST_in_variableDeclaration896); if (state.failed) return stmts;

                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration902); if (state.failed) return stmts;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:394:44: ( ASSIGN_EQUAL list= booleanListExpression )?
                    int alt20=2;
                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==ASSIGN_EQUAL) ) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:394:45: ASSIGN_EQUAL list= booleanListExpression
                            {
                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_variableDeclaration905); if (state.failed) return stmts;

                            pushFollow(FOLLOW_booleanListExpression_in_variableDeclaration911);
                            list=booleanListExpression();

                            state._fsp--;
                            if (state.failed) return stmts;

                            }
                            break;

                    }


                    match(input,SEMI,FOLLOW_SEMI_in_variableDeclaration916); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {
                            addVariable(id.getText(), type.getText());
                            decls.add(StatementFactory.createVarListVariable(id,type,list, RutaTypeConstants.RUTA_TYPE_BL));
                            stmts.add(StatementFactory.createDeclarationsStatement(type, decls, list));
                            }

                    }
                    break;
                case 10 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:401:9: type= INTLIST id= Identifier ( ASSIGN_EQUAL list= numberListExpression )? SEMI
                    {
                    type=(Token)match(input,INTLIST,FOLLOW_INTLIST_in_variableDeclaration950); if (state.failed) return stmts;

                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration956); if (state.failed) return stmts;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:401:40: ( ASSIGN_EQUAL list= numberListExpression )?
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==ASSIGN_EQUAL) ) {
                        alt21=1;
                    }
                    switch (alt21) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:401:41: ASSIGN_EQUAL list= numberListExpression
                            {
                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_variableDeclaration959); if (state.failed) return stmts;

                            pushFollow(FOLLOW_numberListExpression_in_variableDeclaration965);
                            list=numberListExpression();

                            state._fsp--;
                            if (state.failed) return stmts;

                            }
                            break;

                    }


                    match(input,SEMI,FOLLOW_SEMI_in_variableDeclaration970); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {
                            addVariable(id.getText(), type.getText());
                            decls.add(StatementFactory.createVarListVariable(id,type,list, RutaTypeConstants.RUTA_TYPE_NL));
                            stmts.add(StatementFactory.createDeclarationsStatement(type, decls, list));
                            }

                    }
                    break;
                case 11 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:408:9: type= DOUBLELIST id= Identifier ( ASSIGN_EQUAL list= numberListExpression )? SEMI
                    {
                    type=(Token)match(input,DOUBLELIST,FOLLOW_DOUBLELIST_in_variableDeclaration1005); if (state.failed) return stmts;

                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration1011); if (state.failed) return stmts;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:408:43: ( ASSIGN_EQUAL list= numberListExpression )?
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==ASSIGN_EQUAL) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:408:44: ASSIGN_EQUAL list= numberListExpression
                            {
                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_variableDeclaration1014); if (state.failed) return stmts;

                            pushFollow(FOLLOW_numberListExpression_in_variableDeclaration1020);
                            list=numberListExpression();

                            state._fsp--;
                            if (state.failed) return stmts;

                            }
                            break;

                    }


                    match(input,SEMI,FOLLOW_SEMI_in_variableDeclaration1025); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {
                            addVariable(id.getText(), type.getText());
                            decls.add(StatementFactory.createVarListVariable(id,type,list, RutaTypeConstants.RUTA_TYPE_NL));
                            stmts.add(StatementFactory.createDeclarationsStatement(type, decls, list));
                            }

                    }
                    break;
                case 12 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:415:9: type= FLOATLIST id= Identifier ( ASSIGN_EQUAL list= numberListExpression )? SEMI
                    {
                    type=(Token)match(input,FLOATLIST,FOLLOW_FLOATLIST_in_variableDeclaration1061); if (state.failed) return stmts;

                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration1067); if (state.failed) return stmts;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:415:42: ( ASSIGN_EQUAL list= numberListExpression )?
                    int alt23=2;
                    int LA23_0 = input.LA(1);

                    if ( (LA23_0==ASSIGN_EQUAL) ) {
                        alt23=1;
                    }
                    switch (alt23) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:415:43: ASSIGN_EQUAL list= numberListExpression
                            {
                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_variableDeclaration1070); if (state.failed) return stmts;

                            pushFollow(FOLLOW_numberListExpression_in_variableDeclaration1076);
                            list=numberListExpression();

                            state._fsp--;
                            if (state.failed) return stmts;

                            }
                            break;

                    }


                    match(input,SEMI,FOLLOW_SEMI_in_variableDeclaration1081); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {
                            addVariable(id.getText(), type.getText());
                            decls.add(StatementFactory.createVarListVariable(id,type,list, RutaTypeConstants.RUTA_TYPE_NL));
                            stmts.add(StatementFactory.createDeclarationsStatement(type, decls, list));
                            }

                    }
                    break;
                case 13 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:422:9: type= STRINGLIST id= Identifier ( ASSIGN_EQUAL list= stringListExpression )? SEMI
                    {
                    type=(Token)match(input,STRINGLIST,FOLLOW_STRINGLIST_in_variableDeclaration1123); if (state.failed) return stmts;

                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration1129); if (state.failed) return stmts;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:422:43: ( ASSIGN_EQUAL list= stringListExpression )?
                    int alt24=2;
                    int LA24_0 = input.LA(1);

                    if ( (LA24_0==ASSIGN_EQUAL) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:422:44: ASSIGN_EQUAL list= stringListExpression
                            {
                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_variableDeclaration1132); if (state.failed) return stmts;

                            pushFollow(FOLLOW_stringListExpression_in_variableDeclaration1138);
                            list=stringListExpression();

                            state._fsp--;
                            if (state.failed) return stmts;

                            }
                            break;

                    }


                    match(input,SEMI,FOLLOW_SEMI_in_variableDeclaration1143); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {
                            addVariable(id.getText(), type.getText());
                            decls.add(StatementFactory.createVarListVariable(id,type,list, RutaTypeConstants.RUTA_TYPE_SL));
                            stmts.add(StatementFactory.createDeclarationsStatement(type, decls, list));
                            }

                    }
                    break;
                case 14 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:429:9: type= TYPELIST id= Identifier ( ASSIGN_EQUAL list= typeListExpression )? SEMI
                    {
                    type=(Token)match(input,TYPELIST,FOLLOW_TYPELIST_in_variableDeclaration1185); if (state.failed) return stmts;

                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaration1191); if (state.failed) return stmts;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:429:41: ( ASSIGN_EQUAL list= typeListExpression )?
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==ASSIGN_EQUAL) ) {
                        alt25=1;
                    }
                    switch (alt25) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:429:42: ASSIGN_EQUAL list= typeListExpression
                            {
                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_variableDeclaration1194); if (state.failed) return stmts;

                            pushFollow(FOLLOW_typeListExpression_in_variableDeclaration1200);
                            list=typeListExpression();

                            state._fsp--;
                            if (state.failed) return stmts;

                            }
                            break;

                    }


                    match(input,SEMI,FOLLOW_SEMI_in_variableDeclaration1205); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {
                            addVariable(id.getText(), type.getText());
                            decls.add(StatementFactory.createVarListVariable(id,type,list, RutaTypeConstants.RUTA_TYPE_TL));
                            stmts.add(StatementFactory.createDeclarationsStatement(type, decls, list));
                            }

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return stmts;
    }
    // $ANTLR end "variableDeclaration"



    // $ANTLR start "declaration"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:458:1: declaration returns [List<Statement> stmts = new ArrayList<Statement>()] : (declareToken= DECLARE (lazyParent= annotationType )? id= Identifier ( COMMA id= Identifier )* end= SEMI |declareToken= DECLARE type= annotationType id= Identifier ( LPAREN (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier ( COMMA (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier )* RPAREN ) SEMI ) ;
    public final List<Statement> declaration() throws RecognitionException {
        List<Statement> stmts =  new ArrayList<Statement>();


        Token declareToken=null;
        Token id=null;
        Token end=null;
        Token obj2=null;
        Token obj3=null;
        Token obj6=null;
        Token obj4=null;
        Token obj5=null;
        Token fname=null;
        Expression lazyParent =null;

        Expression type =null;

        Expression obj1 =null;



        	Statement stmt = null;
        	List<Object> featureTypes = new ArrayList<Object>();
        	List<Token> featureNames = new ArrayList<Token>();
        	List<Declaration> declarations = new ArrayList<Declaration>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:465:2: ( (declareToken= DECLARE (lazyParent= annotationType )? id= Identifier ( COMMA id= Identifier )* end= SEMI |declareToken= DECLARE type= annotationType id= Identifier ( LPAREN (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier ( COMMA (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier )* RPAREN ) SEMI ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:467:2: (declareToken= DECLARE (lazyParent= annotationType )? id= Identifier ( COMMA id= Identifier )* end= SEMI |declareToken= DECLARE type= annotationType id= Identifier ( LPAREN (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier ( COMMA (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier )* RPAREN ) SEMI )
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:467:2: (declareToken= DECLARE (lazyParent= annotationType )? id= Identifier ( COMMA id= Identifier )* end= SEMI |declareToken= DECLARE type= annotationType id= Identifier ( LPAREN (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier ( COMMA (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier )* RPAREN ) SEMI )
            int alt32=2;
            alt32 = dfa32.predict(input);
            switch (alt32) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:467:3: declareToken= DECLARE (lazyParent= annotationType )? id= Identifier ( COMMA id= Identifier )* end= SEMI
                    {
                    declareToken=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_declaration1273); if (state.failed) return stmts;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:467:35: (lazyParent= annotationType )?
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==Identifier) ) {
                        int LA27_1 = input.LA(2);

                        if ( (LA27_1==Identifier||LA27_1==DOT) ) {
                            alt27=1;
                        }
                    }
                    switch (alt27) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:467:35: lazyParent= annotationType
                            {
                            pushFollow(FOLLOW_annotationType_in_declaration1279);
                            lazyParent=annotationType();

                            state._fsp--;
                            if (state.failed) return stmts;

                            }
                            break;

                    }


                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_declaration1289); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {addVariable(id.getText(), declareToken.getText());}

                    if ( state.backtracking==0 ) {addType(((blockDeclaration_scope)blockDeclaration_stack.peek()).env, id.getText(), lazyParent == null ? null : lazyParent.toString());
                    			declarations.add(StatementFactory.createAnnotationType(id,declareToken));}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:471:3: ( COMMA id= Identifier )*
                    loop28:
                    do {
                        int alt28=2;
                        int LA28_0 = input.LA(1);

                        if ( (LA28_0==COMMA) ) {
                            alt28=1;
                        }


                        switch (alt28) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:471:4: COMMA id= Identifier
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_declaration1301); if (state.failed) return stmts;

                    	    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_declaration1311); if (state.failed) return stmts;

                    	    if ( state.backtracking==0 ) {addVariable(id.getText(), declareToken.getText());}

                    	    if ( state.backtracking==0 ) {addType(((blockDeclaration_scope)blockDeclaration_stack.peek()).env, id.getText(),  lazyParent == null ? null : lazyParent.toString()); 
                    	    			declarations.add(StatementFactory.createAnnotationType(id,declareToken));}

                    	    }
                    	    break;

                    	default :
                    	    break loop28;
                        }
                    } while (true);


                    end=(Token)match(input,SEMI,FOLLOW_SEMI_in_declaration1330); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {
                    		 stmt = StatementFactory.createDeclareDeclarationsStatement(declareToken, declarations, lazyParent);
                    		 stmts.add(stmt);
                    		 }

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:481:2: declareToken= DECLARE type= annotationType id= Identifier ( LPAREN (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier ( COMMA (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier )* RPAREN ) SEMI
                    {
                    declareToken=(Token)match(input,DECLARE,FOLLOW_DECLARE_in_declaration1343); if (state.failed) return stmts;

                    pushFollow(FOLLOW_annotationType_in_declaration1347);
                    type=annotationType();

                    state._fsp--;
                    if (state.failed) return stmts;

                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_declaration1354); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {addVariable(id.getText(), declareToken.getText());}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:483:3: ( LPAREN (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier ( COMMA (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier )* RPAREN )
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:483:4: LPAREN (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier ( COMMA (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier )* RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_declaration1361); if (state.failed) return stmts;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:484:4: (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString )
                    int alt29=6;
                    switch ( input.LA(1) ) {
                    case Identifier:
                        {
                        alt29=1;
                        }
                        break;
                    case StringString:
                        {
                        alt29=2;
                        }
                        break;
                    case DoubleString:
                        {
                        alt29=3;
                        }
                        break;
                    case FloatString:
                        {
                        alt29=4;
                        }
                        break;
                    case IntString:
                        {
                        alt29=5;
                        }
                        break;
                    case BooleanString:
                        {
                        alt29=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return stmts;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 29, 0, input);

                        throw nvae;

                    }

                    switch (alt29) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:485:4: obj1= annotationType
                            {
                            pushFollow(FOLLOW_annotationType_in_declaration1376);
                            obj1=annotationType();

                            state._fsp--;
                            if (state.failed) return stmts;

                            if ( state.backtracking==0 ) {featureTypes.add(obj1);}

                            }
                            break;
                        case 2 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:486:6: obj2= StringString
                            {
                            obj2=(Token)match(input,StringString,FOLLOW_StringString_in_declaration1389); if (state.failed) return stmts;

                            if ( state.backtracking==0 ) {featureTypes.add(obj2);}

                            }
                            break;
                        case 3 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:487:6: obj3= DoubleString
                            {
                            obj3=(Token)match(input,DoubleString,FOLLOW_DoubleString_in_declaration1402); if (state.failed) return stmts;

                            if ( state.backtracking==0 ) {featureTypes.add(obj3);}

                            }
                            break;
                        case 4 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:488:6: obj6= FloatString
                            {
                            obj6=(Token)match(input,FloatString,FOLLOW_FloatString_in_declaration1414); if (state.failed) return stmts;

                            if ( state.backtracking==0 ) {featureTypes.add(obj6);}

                            }
                            break;
                        case 5 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:489:6: obj4= IntString
                            {
                            obj4=(Token)match(input,IntString,FOLLOW_IntString_in_declaration1428); if (state.failed) return stmts;

                            if ( state.backtracking==0 ) {featureTypes.add(obj4);}

                            }
                            break;
                        case 6 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:490:6: obj5= BooleanString
                            {
                            obj5=(Token)match(input,BooleanString,FOLLOW_BooleanString_in_declaration1440); if (state.failed) return stmts;

                            if ( state.backtracking==0 ) {featureTypes.add(obj5);}

                            }
                            break;

                    }


                    fname=(Token)match(input,Identifier,FOLLOW_Identifier_in_declaration1460); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {featureNames.add(fname);}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:494:4: ( COMMA (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier )*
                    loop31:
                    do {
                        int alt31=2;
                        int LA31_0 = input.LA(1);

                        if ( (LA31_0==COMMA) ) {
                            alt31=1;
                        }


                        switch (alt31) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:495:4: COMMA (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_declaration1472); if (state.failed) return stmts;

                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:496:4: (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString )
                    	    int alt30=6;
                    	    switch ( input.LA(1) ) {
                    	    case Identifier:
                    	        {
                    	        alt30=1;
                    	        }
                    	        break;
                    	    case StringString:
                    	        {
                    	        alt30=2;
                    	        }
                    	        break;
                    	    case DoubleString:
                    	        {
                    	        alt30=3;
                    	        }
                    	        break;
                    	    case FloatString:
                    	        {
                    	        alt30=4;
                    	        }
                    	        break;
                    	    case IntString:
                    	        {
                    	        alt30=5;
                    	        }
                    	        break;
                    	    case BooleanString:
                    	        {
                    	        alt30=6;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return stmts;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 30, 0, input);

                    	        throw nvae;

                    	    }

                    	    switch (alt30) {
                    	        case 1 :
                    	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:497:4: obj1= annotationType
                    	            {
                    	            pushFollow(FOLLOW_annotationType_in_declaration1487);
                    	            obj1=annotationType();

                    	            state._fsp--;
                    	            if (state.failed) return stmts;

                    	            if ( state.backtracking==0 ) {featureTypes.add(obj1);}

                    	            }
                    	            break;
                    	        case 2 :
                    	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:498:6: obj2= StringString
                    	            {
                    	            obj2=(Token)match(input,StringString,FOLLOW_StringString_in_declaration1500); if (state.failed) return stmts;

                    	            if ( state.backtracking==0 ) {featureTypes.add(obj2);}

                    	            }
                    	            break;
                    	        case 3 :
                    	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:499:6: obj3= DoubleString
                    	            {
                    	            obj3=(Token)match(input,DoubleString,FOLLOW_DoubleString_in_declaration1513); if (state.failed) return stmts;

                    	            if ( state.backtracking==0 ) {featureTypes.add(obj3);}

                    	            }
                    	            break;
                    	        case 4 :
                    	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:500:6: obj6= FloatString
                    	            {
                    	            obj6=(Token)match(input,FloatString,FOLLOW_FloatString_in_declaration1525); if (state.failed) return stmts;

                    	            if ( state.backtracking==0 ) {featureTypes.add(obj6);}

                    	            }
                    	            break;
                    	        case 5 :
                    	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:501:6: obj4= IntString
                    	            {
                    	            obj4=(Token)match(input,IntString,FOLLOW_IntString_in_declaration1539); if (state.failed) return stmts;

                    	            if ( state.backtracking==0 ) {featureTypes.add(obj4);}

                    	            }
                    	            break;
                    	        case 6 :
                    	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:502:6: obj5= BooleanString
                    	            {
                    	            obj5=(Token)match(input,BooleanString,FOLLOW_BooleanString_in_declaration1551); if (state.failed) return stmts;

                    	            if ( state.backtracking==0 ) {featureTypes.add(obj5);}

                    	            }
                    	            break;

                    	    }


                    	    fname=(Token)match(input,Identifier,FOLLOW_Identifier_in_declaration1570); if (state.failed) return stmts;

                    	    if ( state.backtracking==0 ) {featureNames.add(fname);}

                    	    }
                    	    break;

                    	default :
                    	    break loop31;
                        }
                    } while (true);


                    match(input,RPAREN,FOLLOW_RPAREN_in_declaration1578); if (state.failed) return stmts;

                    }


                    match(input,SEMI,FOLLOW_SEMI_in_declaration1581); if (state.failed) return stmts;

                    if ( state.backtracking==0 ) {
                    		List<RutaFeatureDeclaration> features = new ArrayList<RutaFeatureDeclaration>();
                    		int i = 0;
                    		for (Object eachTO : featureTypes) {
                    		   Token eachName = featureNames.get(i); 
                    		   features.add(StatementFactory.createFeatureDeclaration(eachTO, eachName));  
                    		   i++;
                    		}
                    		addType(((blockDeclaration_scope)blockDeclaration_stack.peek()).env, id.getText(), type.toString(), featureTypes, featureNames);
                    		declarations.add( StatementFactory.createAnnotationType(id,declareToken, type, features));
                    		stmt = StatementFactory.createDeclareDeclarationsStatement(declareToken, declarations, type);
                    		stmts.add(stmt);
                    		}

                    }
                    break;

            }


            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return stmts;
    }
    // $ANTLR end "declaration"


    protected static class blockDeclaration_scope {
        RutaBlock env;
    }
    protected Stack blockDeclaration_stack = new Stack();



    // $ANTLR start "blockDeclaration"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:527:1: blockDeclaration returns [RutaBlock block = null] options {backtrack=true; } : (declareToken= BlockString |declareToken= AutomataBlockString ) LPAREN id= Identifier RPAREN re1= ruleElementWithCA LCURLY body= statements rc= RCURLY ;
    public final RutaBlock blockDeclaration() throws RecognitionException {
        blockDeclaration_stack.push(new blockDeclaration_scope());
        RutaBlock block =  null;


        Token declareToken=null;
        Token id=null;
        Token rc=null;
        RutaRuleElement re1 =null;

        List<Statement> body =null;



        RutaRule rule = null;
        level++;

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:541:2: ( (declareToken= BlockString |declareToken= AutomataBlockString ) LPAREN id= Identifier RPAREN re1= ruleElementWithCA LCURLY body= statements rc= RCURLY )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:543:2: (declareToken= BlockString |declareToken= AutomataBlockString ) LPAREN id= Identifier RPAREN re1= ruleElementWithCA LCURLY body= statements rc= RCURLY
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:543:2: (declareToken= BlockString |declareToken= AutomataBlockString )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==BlockString) ) {
                alt33=1;
            }
            else if ( (LA33_0==AutomataBlockString) ) {
                alt33=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return block;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;

            }
            switch (alt33) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:543:3: declareToken= BlockString
                    {
                    declareToken=(Token)match(input,BlockString,FOLLOW_BlockString_in_blockDeclaration1642); if (state.failed) return block;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:543:32: declareToken= AutomataBlockString
                    {
                    declareToken=(Token)match(input,AutomataBlockString,FOLLOW_AutomataBlockString_in_blockDeclaration1650); if (state.failed) return block;

                    }
                    break;

            }


            match(input,LPAREN,FOLLOW_LPAREN_in_blockDeclaration1654); if (state.failed) return block;

            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_blockDeclaration1661); if (state.failed) return block;

            if ( state.backtracking==0 ) {addVariable(id.getText(), declareToken.getText());}

            if ( state.backtracking==0 ) {
            		block = scriptFactory.createScriptBlock(id, declareToken, ((blockDeclaration_scope)blockDeclaration_stack.elementAt(level - 1)).env);
            		((blockDeclaration_scope)blockDeclaration_stack.peek()).env = block;
            	}

            match(input,RPAREN,FOLLOW_RPAREN_in_blockDeclaration1669); if (state.failed) return block;

            pushFollow(FOLLOW_ruleElementWithCA_in_blockDeclaration1676);
            re1=ruleElementWithCA();

            state._fsp--;
            if (state.failed) return block;

            if ( state.backtracking==0 ) {
            	rule = scriptFactory.createRule(re1);
            	scriptFactory.finalizeScriptBlock(block, rc, rule, body);}

            match(input,LCURLY,FOLLOW_LCURLY_in_blockDeclaration1682); if (state.failed) return block;

            pushFollow(FOLLOW_statements_in_blockDeclaration1688);
            body=statements();

            state._fsp--;
            if (state.failed) return block;

            rc=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_blockDeclaration1694); if (state.failed) return block;

            if ( state.backtracking==0 ) {scriptFactory.finalizeScriptBlock(block, rc, rule, body);}

            }

            if ( state.backtracking==0 ) {
            level--;
            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
            blockDeclaration_stack.pop();
        }
        return block;
    }
    // $ANTLR end "blockDeclaration"



    // $ANTLR start "ruleElementWithCA"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:560:1: ruleElementWithCA returns [RutaRuleElement re = null] : idRef= typeMatchExpression (quantifier= quantifierPart )? LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY ;
    public final RutaRuleElement ruleElementWithCA() throws RecognitionException {
        RutaRuleElement re =  null;


        Token end=null;
        Expression idRef =null;

        List<Expression> quantifier =null;

        List<RutaCondition> c =null;

        List<RutaAction> a =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:561:5: (idRef= typeMatchExpression (quantifier= quantifierPart )? LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:562:5: idRef= typeMatchExpression (quantifier= quantifierPart )? LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY
            {
            pushFollow(FOLLOW_typeMatchExpression_in_ruleElementWithCA1724);
            idRef=typeMatchExpression();

            state._fsp--;
            if (state.failed) return re;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:562:42: (quantifier= quantifierPart )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==LBRACK||LA34_0==PLUS||LA34_0==STAR||LA34_0==QUESTION) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:562:42: quantifier= quantifierPart
                    {
                    pushFollow(FOLLOW_quantifierPart_in_ruleElementWithCA1730);
                    quantifier=quantifierPart();

                    state._fsp--;
                    if (state.failed) return re;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {re = scriptFactory.createRuleElement(idRef,quantifier,c,a, end);}

            match(input,LCURLY,FOLLOW_LCURLY_in_ruleElementWithCA1743); if (state.failed) return re;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:563:18: (c= conditions )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==CONTAINS||(LA35_0 >= AND && LA35_0 <= PARSE)||(LA35_0 >= BEFORE && LA35_0 <= ENDSWITH)||LA35_0==NOT||LA35_0==SIZE||(LA35_0 >= XOR && LA35_0 <= FALSE)||(LA35_0 >= Identifier && LA35_0 <= LPAREN)||LA35_0==MINUS) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:563:18: c= conditions
                    {
                    pushFollow(FOLLOW_conditions_in_ruleElementWithCA1749);
                    c=conditions();

                    state._fsp--;
                    if (state.failed) return re;

                    }
                    break;

            }


            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:563:32: ( THEN a= actions )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==THEN) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:563:33: THEN a= actions
                    {
                    match(input,THEN,FOLLOW_THEN_in_ruleElementWithCA1753); if (state.failed) return re;

                    pushFollow(FOLLOW_actions_in_ruleElementWithCA1759);
                    a=actions();

                    state._fsp--;
                    if (state.failed) return re;

                    }
                    break;

            }


            end=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_ruleElementWithCA1767); if (state.failed) return re;

            if ( state.backtracking==0 ) {re = scriptFactory.createRuleElement(idRef,quantifier,c,a, end);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return re;
    }
    // $ANTLR end "ruleElementWithCA"



    // $ANTLR start "ruleElementWithoutCA"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:568:1: ruleElementWithoutCA returns [RutaRuleElement re = null] : idRef= typeMatchExpression (quantifier= quantifierPart )? ;
    public final RutaRuleElement ruleElementWithoutCA() throws RecognitionException {
        RutaRuleElement re =  null;


        Expression idRef =null;

        List<Expression> quantifier =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:569:5: (idRef= typeMatchExpression (quantifier= quantifierPart )? )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:570:5: idRef= typeMatchExpression (quantifier= quantifierPart )?
            {
            pushFollow(FOLLOW_typeMatchExpression_in_ruleElementWithoutCA1807);
            idRef=typeMatchExpression();

            state._fsp--;
            if (state.failed) return re;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:570:42: (quantifier= quantifierPart )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==LBRACK||LA37_0==PLUS||LA37_0==STAR||LA37_0==QUESTION) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:570:42: quantifier= quantifierPart
                    {
                    pushFollow(FOLLOW_quantifierPart_in_ruleElementWithoutCA1813);
                    quantifier=quantifierPart();

                    state._fsp--;
                    if (state.failed) return re;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {re = scriptFactory.createRuleElement(idRef,quantifier,null,null, null);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return re;
    }
    // $ANTLR end "ruleElementWithoutCA"



    // $ANTLR start "simpleStatement"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:575:1: simpleStatement returns [RutaRule stmt = null] : ( ( regexpRule )=>rer= regexpRule |elements= ruleElementsRoot s= SEMI );
    public final RutaRule simpleStatement() throws RecognitionException {
        RutaRule stmt =  null;


        Token s=null;
        RutaRule rer =null;

        List<Expression> elements =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:576:2: ( ( regexpRule )=>rer= regexpRule |elements= ruleElementsRoot s= SEMI )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==Identifier) ) {
                int LA38_1 = input.LA(2);

                if ( (synpred1_RutaParser()) ) {
                    alt38=1;
                }
                else if ( (true) ) {
                    alt38=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return stmt;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA38_0==REMOVESTRING) && (synpred1_RutaParser())) {
                alt38=1;
            }
            else if ( (LA38_0==StringLiteral) ) {
                int LA38_3 = input.LA(2);

                if ( (synpred1_RutaParser()) ) {
                    alt38=1;
                }
                else if ( (true) ) {
                    alt38=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return stmt;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 38, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA38_0==STARTANCHOR||LA38_0==LPAREN||LA38_0==WILDCARD) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return stmt;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;

            }
            switch (alt38) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:577:2: ( regexpRule )=>rer= regexpRule
                    {
                    pushFollow(FOLLOW_regexpRule_in_simpleStatement1862);
                    rer=regexpRule();

                    state._fsp--;
                    if (state.failed) return stmt;

                    if ( state.backtracking==0 ) {stmt = rer;}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:579:2: elements= ruleElementsRoot s= SEMI
                    {
                    pushFollow(FOLLOW_ruleElementsRoot_in_simpleStatement1872);
                    elements=ruleElementsRoot();

                    state._fsp--;
                    if (state.failed) return stmt;

                    s=(Token)match(input,SEMI,FOLLOW_SEMI_in_simpleStatement1880); if (state.failed) return stmt;

                    if ( state.backtracking==0 ) {stmt = scriptFactory.createRule(elements, s);}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return stmt;
    }
    // $ANTLR end "simpleStatement"



    // $ANTLR start "regexpRule"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:585:1: regexpRule returns [RutaRule stmt = null] : regexp= stringExpression THEN ( ( numberExpression ASSIGN_EQUAL )=>indexCG= numberExpression ASSIGN_EQUAL indexTE= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? |te= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? ) ( COMMA ( ( numberExpression ASSIGN_EQUAL )=>indexCG= numberExpression ASSIGN_EQUAL indexTE= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? |te= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? ) )* s= SEMI ;
    public final RutaRule regexpRule() throws RecognitionException {
        RutaRule stmt =  null;


        Token s=null;
        Expression regexp =null;

        Expression indexCG =null;

        Expression indexTE =null;

        Expression fk =null;

        Expression arg =null;

        Expression te =null;



        	List<Expression> exprs = new ArrayList<Expression>();
        	Map<Expression, Map<Expression, Expression>> fa = new HashMap<Expression, Map<Expression, Expression>>();
        	Map<Expression, Expression> fmap = null;

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:591:2: (regexp= stringExpression THEN ( ( numberExpression ASSIGN_EQUAL )=>indexCG= numberExpression ASSIGN_EQUAL indexTE= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? |te= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? ) ( COMMA ( ( numberExpression ASSIGN_EQUAL )=>indexCG= numberExpression ASSIGN_EQUAL indexTE= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? |te= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? ) )* s= SEMI )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:592:2: regexp= stringExpression THEN ( ( numberExpression ASSIGN_EQUAL )=>indexCG= numberExpression ASSIGN_EQUAL indexTE= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? |te= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? ) ( COMMA ( ( numberExpression ASSIGN_EQUAL )=>indexCG= numberExpression ASSIGN_EQUAL indexTE= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? |te= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? ) )* s= SEMI
            {
            pushFollow(FOLLOW_stringExpression_in_regexpRule1912);
            regexp=stringExpression();

            state._fsp--;
            if (state.failed) return stmt;

            if ( state.backtracking==0 ) {exprs.add(regexp);}

            if ( state.backtracking==0 ) {stmt = scriptFactory.createRegExpRule(exprs, fa, s);}

            match(input,THEN,FOLLOW_THEN_in_regexpRule1918); if (state.failed) return stmt;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:593:2: ( ( numberExpression ASSIGN_EQUAL )=>indexCG= numberExpression ASSIGN_EQUAL indexTE= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? |te= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==Identifier) ) {
                int LA43_1 = input.LA(2);

                if ( (synpred2_RutaParser()) ) {
                    alt43=1;
                }
                else if ( (true) ) {
                    alt43=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return stmt;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA43_0==MINUS) && (synpred2_RutaParser())) {
                alt43=1;
            }
            else if ( (LA43_0==DecimalLiteral) && (synpred2_RutaParser())) {
                alt43=1;
            }
            else if ( (LA43_0==FloatingPointLiteral) && (synpred2_RutaParser())) {
                alt43=1;
            }
            else if ( (LA43_0==LPAREN) && (synpred2_RutaParser())) {
                alt43=1;
            }
            else if ( ((LA43_0 >= EXP && LA43_0 <= TAN)) && (synpred2_RutaParser())) {
                alt43=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return stmt;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }
            switch (alt43) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:594:2: ( numberExpression ASSIGN_EQUAL )=>indexCG= numberExpression ASSIGN_EQUAL indexTE= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )?
                    {
                    pushFollow(FOLLOW_numberExpression_in_regexpRule1936);
                    indexCG=numberExpression();

                    state._fsp--;
                    if (state.failed) return stmt;

                    if ( state.backtracking==0 ) {exprs.add(indexCG);}

                    if ( state.backtracking==0 ) {stmt = scriptFactory.createRegExpRule(exprs, fa, s);}

                    match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_regexpRule1941); if (state.failed) return stmt;

                    pushFollow(FOLLOW_typeExpression_in_regexpRule1947);
                    indexTE=typeExpression();

                    state._fsp--;
                    if (state.failed) return stmt;

                    if ( state.backtracking==0 ) {exprs.add(indexTE);}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:596:2: ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )?
                    int alt40=2;
                    int LA40_0 = input.LA(1);

                    if ( (LA40_0==LPAREN) ) {
                        alt40=1;
                    }
                    switch (alt40) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:596:3: LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN
                            {
                            match(input,LPAREN,FOLLOW_LPAREN_in_regexpRule1953); if (state.failed) return stmt;

                            if ( state.backtracking==0 ) {fmap = new HashMap<Expression, Expression>();}

                            pushFollow(FOLLOW_stringExpression_in_regexpRule1961);
                            fk=stringExpression();

                            state._fsp--;
                            if (state.failed) return stmt;

                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_regexpRule1963); if (state.failed) return stmt;

                            pushFollow(FOLLOW_argument_in_regexpRule1969);
                            arg=argument();

                            state._fsp--;
                            if (state.failed) return stmt;

                            if ( state.backtracking==0 ) {fmap.put(fk, arg);}

                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:597:2: ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )*
                            loop39:
                            do {
                                int alt39=2;
                                int LA39_0 = input.LA(1);

                                if ( (LA39_0==COMMA) ) {
                                    alt39=1;
                                }


                                switch (alt39) {
                            	case 1 :
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:597:3: COMMA fk= stringExpression ASSIGN_EQUAL arg= argument
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_regexpRule1976); if (state.failed) return stmt;

                            	    pushFollow(FOLLOW_stringExpression_in_regexpRule1982);
                            	    fk=stringExpression();

                            	    state._fsp--;
                            	    if (state.failed) return stmt;

                            	    match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_regexpRule1984); if (state.failed) return stmt;

                            	    pushFollow(FOLLOW_argument_in_regexpRule1990);
                            	    arg=argument();

                            	    state._fsp--;
                            	    if (state.failed) return stmt;

                            	    if ( state.backtracking==0 ) {fmap.put(fk, arg);}

                            	    }
                            	    break;

                            	default :
                            	    break loop39;
                                }
                            } while (true);


                            match(input,RPAREN,FOLLOW_RPAREN_in_regexpRule1997); if (state.failed) return stmt;

                            if ( state.backtracking==0 ) {fa.put(indexTE, fmap);}

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:599:2: te= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )?
                    {
                    pushFollow(FOLLOW_typeExpression_in_regexpRule2011);
                    te=typeExpression();

                    state._fsp--;
                    if (state.failed) return stmt;

                    if ( state.backtracking==0 ) {exprs.add(te);}

                    if ( state.backtracking==0 ) {stmt = scriptFactory.createRegExpRule(exprs, fa, s);}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:600:2: ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==LPAREN) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:600:3: LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN
                            {
                            match(input,LPAREN,FOLLOW_LPAREN_in_regexpRule2019); if (state.failed) return stmt;

                            if ( state.backtracking==0 ) {fmap = new HashMap<Expression, Expression>();}

                            pushFollow(FOLLOW_stringExpression_in_regexpRule2027);
                            fk=stringExpression();

                            state._fsp--;
                            if (state.failed) return stmt;

                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_regexpRule2029); if (state.failed) return stmt;

                            pushFollow(FOLLOW_argument_in_regexpRule2035);
                            arg=argument();

                            state._fsp--;
                            if (state.failed) return stmt;

                            if ( state.backtracking==0 ) {fmap.put(fk, arg);}

                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:601:2: ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )*
                            loop41:
                            do {
                                int alt41=2;
                                int LA41_0 = input.LA(1);

                                if ( (LA41_0==COMMA) ) {
                                    alt41=1;
                                }


                                switch (alt41) {
                            	case 1 :
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:601:3: COMMA fk= stringExpression ASSIGN_EQUAL arg= argument
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_regexpRule2042); if (state.failed) return stmt;

                            	    pushFollow(FOLLOW_stringExpression_in_regexpRule2048);
                            	    fk=stringExpression();

                            	    state._fsp--;
                            	    if (state.failed) return stmt;

                            	    match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_regexpRule2050); if (state.failed) return stmt;

                            	    pushFollow(FOLLOW_argument_in_regexpRule2056);
                            	    arg=argument();

                            	    state._fsp--;
                            	    if (state.failed) return stmt;

                            	    if ( state.backtracking==0 ) {fmap.put(fk, arg);}

                            	    }
                            	    break;

                            	default :
                            	    break loop41;
                                }
                            } while (true);


                            match(input,RPAREN,FOLLOW_RPAREN_in_regexpRule2063); if (state.failed) return stmt;

                            if ( state.backtracking==0 ) {fa.put(te, fmap);}

                            }
                            break;

                    }


                    }
                    break;

            }


            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:605:2: ( COMMA ( ( numberExpression ASSIGN_EQUAL )=>indexCG= numberExpression ASSIGN_EQUAL indexTE= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? |te= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? ) )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==COMMA) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:606:2: COMMA ( ( numberExpression ASSIGN_EQUAL )=>indexCG= numberExpression ASSIGN_EQUAL indexTE= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? |te= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? )
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_regexpRule2080); if (state.failed) return stmt;

            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:607:2: ( ( numberExpression ASSIGN_EQUAL )=>indexCG= numberExpression ASSIGN_EQUAL indexTE= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? |te= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )? )
            	    int alt48=2;
            	    int LA48_0 = input.LA(1);

            	    if ( (LA48_0==Identifier) ) {
            	        int LA48_1 = input.LA(2);

            	        if ( (synpred3_RutaParser()) ) {
            	            alt48=1;
            	        }
            	        else if ( (true) ) {
            	            alt48=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return stmt;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 48, 1, input);

            	            throw nvae;

            	        }
            	    }
            	    else if ( (LA48_0==MINUS) && (synpred3_RutaParser())) {
            	        alt48=1;
            	    }
            	    else if ( (LA48_0==DecimalLiteral) && (synpred3_RutaParser())) {
            	        alt48=1;
            	    }
            	    else if ( (LA48_0==FloatingPointLiteral) && (synpred3_RutaParser())) {
            	        alt48=1;
            	    }
            	    else if ( (LA48_0==LPAREN) && (synpred3_RutaParser())) {
            	        alt48=1;
            	    }
            	    else if ( ((LA48_0 >= EXP && LA48_0 <= TAN)) && (synpred3_RutaParser())) {
            	        alt48=1;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return stmt;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 48, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt48) {
            	        case 1 :
            	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:608:2: ( numberExpression ASSIGN_EQUAL )=>indexCG= numberExpression ASSIGN_EQUAL indexTE= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )?
            	            {
            	            pushFollow(FOLLOW_numberExpression_in_regexpRule2098);
            	            indexCG=numberExpression();

            	            state._fsp--;
            	            if (state.failed) return stmt;

            	            if ( state.backtracking==0 ) {exprs.add(indexCG);}

            	            if ( state.backtracking==0 ) {stmt = scriptFactory.createRegExpRule(exprs, fa, s);}

            	            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_regexpRule2103); if (state.failed) return stmt;

            	            pushFollow(FOLLOW_typeExpression_in_regexpRule2109);
            	            indexTE=typeExpression();

            	            state._fsp--;
            	            if (state.failed) return stmt;

            	            if ( state.backtracking==0 ) {exprs.add(indexTE);}

            	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:610:2: ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )?
            	            int alt45=2;
            	            int LA45_0 = input.LA(1);

            	            if ( (LA45_0==LPAREN) ) {
            	                alt45=1;
            	            }
            	            switch (alt45) {
            	                case 1 :
            	                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:610:3: LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN
            	                    {
            	                    match(input,LPAREN,FOLLOW_LPAREN_in_regexpRule2115); if (state.failed) return stmt;

            	                    if ( state.backtracking==0 ) {fmap = new HashMap<Expression, Expression>();}

            	                    pushFollow(FOLLOW_stringExpression_in_regexpRule2123);
            	                    fk=stringExpression();

            	                    state._fsp--;
            	                    if (state.failed) return stmt;

            	                    match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_regexpRule2125); if (state.failed) return stmt;

            	                    pushFollow(FOLLOW_argument_in_regexpRule2131);
            	                    arg=argument();

            	                    state._fsp--;
            	                    if (state.failed) return stmt;

            	                    if ( state.backtracking==0 ) {fmap.put(fk, arg);}

            	                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:611:2: ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )*
            	                    loop44:
            	                    do {
            	                        int alt44=2;
            	                        int LA44_0 = input.LA(1);

            	                        if ( (LA44_0==COMMA) ) {
            	                            alt44=1;
            	                        }


            	                        switch (alt44) {
            	                    	case 1 :
            	                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:611:3: COMMA fk= stringExpression ASSIGN_EQUAL arg= argument
            	                    	    {
            	                    	    match(input,COMMA,FOLLOW_COMMA_in_regexpRule2138); if (state.failed) return stmt;

            	                    	    pushFollow(FOLLOW_stringExpression_in_regexpRule2144);
            	                    	    fk=stringExpression();

            	                    	    state._fsp--;
            	                    	    if (state.failed) return stmt;

            	                    	    match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_regexpRule2146); if (state.failed) return stmt;

            	                    	    pushFollow(FOLLOW_argument_in_regexpRule2152);
            	                    	    arg=argument();

            	                    	    state._fsp--;
            	                    	    if (state.failed) return stmt;

            	                    	    if ( state.backtracking==0 ) {fmap.put(fk, arg);}

            	                    	    }
            	                    	    break;

            	                    	default :
            	                    	    break loop44;
            	                        }
            	                    } while (true);


            	                    match(input,RPAREN,FOLLOW_RPAREN_in_regexpRule2159); if (state.failed) return stmt;

            	                    if ( state.backtracking==0 ) {fa.put(indexTE, fmap);}

            	                    }
            	                    break;

            	            }


            	            }
            	            break;
            	        case 2 :
            	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:613:2: te= typeExpression ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )?
            	            {
            	            pushFollow(FOLLOW_typeExpression_in_regexpRule2173);
            	            te=typeExpression();

            	            state._fsp--;
            	            if (state.failed) return stmt;

            	            if ( state.backtracking==0 ) {exprs.add(te);}

            	            if ( state.backtracking==0 ) {stmt = scriptFactory.createRegExpRule(exprs, fa, s);}

            	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:614:2: ( LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN )?
            	            int alt47=2;
            	            int LA47_0 = input.LA(1);

            	            if ( (LA47_0==LPAREN) ) {
            	                alt47=1;
            	            }
            	            switch (alt47) {
            	                case 1 :
            	                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:614:3: LPAREN fk= stringExpression ASSIGN_EQUAL arg= argument ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )* RPAREN
            	                    {
            	                    match(input,LPAREN,FOLLOW_LPAREN_in_regexpRule2180); if (state.failed) return stmt;

            	                    if ( state.backtracking==0 ) {fmap = new HashMap<Expression, Expression>();}

            	                    pushFollow(FOLLOW_stringExpression_in_regexpRule2188);
            	                    fk=stringExpression();

            	                    state._fsp--;
            	                    if (state.failed) return stmt;

            	                    match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_regexpRule2190); if (state.failed) return stmt;

            	                    pushFollow(FOLLOW_argument_in_regexpRule2196);
            	                    arg=argument();

            	                    state._fsp--;
            	                    if (state.failed) return stmt;

            	                    if ( state.backtracking==0 ) {fmap.put(fk, arg);}

            	                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:615:2: ( COMMA fk= stringExpression ASSIGN_EQUAL arg= argument )*
            	                    loop46:
            	                    do {
            	                        int alt46=2;
            	                        int LA46_0 = input.LA(1);

            	                        if ( (LA46_0==COMMA) ) {
            	                            alt46=1;
            	                        }


            	                        switch (alt46) {
            	                    	case 1 :
            	                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:615:3: COMMA fk= stringExpression ASSIGN_EQUAL arg= argument
            	                    	    {
            	                    	    match(input,COMMA,FOLLOW_COMMA_in_regexpRule2203); if (state.failed) return stmt;

            	                    	    pushFollow(FOLLOW_stringExpression_in_regexpRule2209);
            	                    	    fk=stringExpression();

            	                    	    state._fsp--;
            	                    	    if (state.failed) return stmt;

            	                    	    match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_regexpRule2211); if (state.failed) return stmt;

            	                    	    pushFollow(FOLLOW_argument_in_regexpRule2217);
            	                    	    arg=argument();

            	                    	    state._fsp--;
            	                    	    if (state.failed) return stmt;

            	                    	    if ( state.backtracking==0 ) {fmap.put(fk, arg);}

            	                    	    }
            	                    	    break;

            	                    	default :
            	                    	    break loop46;
            	                        }
            	                    } while (true);


            	                    match(input,RPAREN,FOLLOW_RPAREN_in_regexpRule2224); if (state.failed) return stmt;

            	                    if ( state.backtracking==0 ) {fa.put(te, fmap);}

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            s=(Token)match(input,SEMI,FOLLOW_SEMI_in_regexpRule2243); if (state.failed) return stmt;

            if ( state.backtracking==0 ) {stmt = scriptFactory.createRegExpRule(exprs, fa, s);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return stmt;
    }
    // $ANTLR end "regexpRule"



    // $ANTLR start "ruleElementsRoot"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:626:1: ruleElementsRoot returns [List<Expression> elements = new ArrayList<Expression>()] : re= ruleElement ( AND )? (re= ruleElement )* ;
    public final List<Expression> ruleElementsRoot() throws RecognitionException {
        List<Expression> elements =  new ArrayList<Expression>();


        Expression re =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:627:2: (re= ruleElement ( AND )? (re= ruleElement )* )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:628:2: re= ruleElement ( AND )? (re= ruleElement )*
            {
            pushFollow(FOLLOW_ruleElement_in_ruleElementsRoot2270);
            re=ruleElement();

            state._fsp--;
            if (state.failed) return elements;

            if ( state.backtracking==0 ) {if(re!=null) elements.add(re);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:628:52: ( AND )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==AND) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:628:52: AND
                    {
                    match(input,AND,FOLLOW_AND_in_ruleElementsRoot2274); if (state.failed) return elements;

                    }
                    break;

            }


            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:628:57: (re= ruleElement )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==STARTANCHOR||LA51_0==StringLiteral||(LA51_0 >= Identifier && LA51_0 <= LPAREN)||LA51_0==WILDCARD) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:628:58: re= ruleElement
            	    {
            	    pushFollow(FOLLOW_ruleElement_in_ruleElementsRoot2282);
            	    re=ruleElement();

            	    state._fsp--;
            	    if (state.failed) return elements;

            	    if ( state.backtracking==0 ) {if(re!=null) elements.add(re);}

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return elements;
    }
    // $ANTLR end "ruleElementsRoot"



    // $ANTLR start "ruleElements"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:631:1: ruleElements returns [List<Expression> elements = new ArrayList<Expression>()] : re= ruleElement (re= ruleElement )* ;
    public final List<Expression> ruleElements() throws RecognitionException {
        List<Expression> elements =  new ArrayList<Expression>();


        Expression re =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:632:2: (re= ruleElement (re= ruleElement )* )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:633:2: re= ruleElement (re= ruleElement )*
            {
            pushFollow(FOLLOW_ruleElement_in_ruleElements2307);
            re=ruleElement();

            state._fsp--;
            if (state.failed) return elements;

            if ( state.backtracking==0 ) {if(re!=null) elements.add(re);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:633:52: (re= ruleElement )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==STARTANCHOR||LA52_0==StringLiteral||(LA52_0 >= Identifier && LA52_0 <= LPAREN)||LA52_0==WILDCARD) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:633:53: re= ruleElement
            	    {
            	    pushFollow(FOLLOW_ruleElement_in_ruleElements2316);
            	    re=ruleElement();

            	    state._fsp--;
            	    if (state.failed) return elements;

            	    if ( state.backtracking==0 ) {if(re!=null) elements.add(re);}

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);


            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return elements;
    }
    // $ANTLR end "ruleElements"



    // $ANTLR start "blockRuleElement"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:636:1: blockRuleElement returns [RutaRuleElement rElement = null] : re= ruleElementType ;
    public final RutaRuleElement blockRuleElement() throws RecognitionException {
        RutaRuleElement rElement =  null;


        RutaRuleElement re =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:637:2: (re= ruleElementType )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:638:2: re= ruleElementType
            {
            pushFollow(FOLLOW_ruleElementType_in_blockRuleElement2342);
            re=ruleElementType();

            state._fsp--;
            if (state.failed) return rElement;

            if ( state.backtracking==0 ) {rElement = re;}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return rElement;
    }
    // $ANTLR end "blockRuleElement"



    // $ANTLR start "ruleElement"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:641:1: ruleElement returns [Expression re = null] : ( STARTANCHOR )? (re1= ruleElementType |re2= ruleElementLiteral |re3= ruleElementComposed |re4= ruleElementWildCard ) ;
    public final Expression ruleElement() throws RecognitionException {
        Expression re =  null;


        RutaRuleElement re1 =null;

        RutaRuleElement re2 =null;

        ComposedRuleElement re3 =null;

        RutaRuleElement re4 =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:642:2: ( ( STARTANCHOR )? (re1= ruleElementType |re2= ruleElementLiteral |re3= ruleElementComposed |re4= ruleElementWildCard ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:643:2: ( STARTANCHOR )? (re1= ruleElementType |re2= ruleElementLiteral |re3= ruleElementComposed |re4= ruleElementWildCard )
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:643:2: ( STARTANCHOR )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==STARTANCHOR) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:643:2: STARTANCHOR
                    {
                    match(input,STARTANCHOR,FOLLOW_STARTANCHOR_in_ruleElement2362); if (state.failed) return re;

                    }
                    break;

            }


            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:644:2: (re1= ruleElementType |re2= ruleElementLiteral |re3= ruleElementComposed |re4= ruleElementWildCard )
            int alt54=4;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                int LA54_1 = input.LA(2);

                if ( (!(((isVariableOfType(input.LT(1).getText(), "STRING"))))) ) {
                    alt54=1;
                }
                else if ( ((isVariableOfType(input.LT(1).getText(), "STRING"))) ) {
                    alt54=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return re;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 54, 1, input);

                    throw nvae;

                }
                }
                break;
            case StringLiteral:
                {
                alt54=2;
                }
                break;
            case LPAREN:
                {
                alt54=3;
                }
                break;
            case WILDCARD:
                {
                alt54=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return re;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }

            switch (alt54) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:645:2: re1= ruleElementType
                    {
                    pushFollow(FOLLOW_ruleElementType_in_ruleElement2373);
                    re1=ruleElementType();

                    state._fsp--;
                    if (state.failed) return re;

                    if ( state.backtracking==0 ) {re = re1;}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:646:4: re2= ruleElementLiteral
                    {
                    pushFollow(FOLLOW_ruleElementLiteral_in_ruleElement2384);
                    re2=ruleElementLiteral();

                    state._fsp--;
                    if (state.failed) return re;

                    if ( state.backtracking==0 ) {re = re2;}

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:647:4: re3= ruleElementComposed
                    {
                    pushFollow(FOLLOW_ruleElementComposed_in_ruleElement2395);
                    re3=ruleElementComposed();

                    state._fsp--;
                    if (state.failed) return re;

                    if ( state.backtracking==0 ) {re = re3;}

                    }
                    break;
                case 4 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:648:4: re4= ruleElementWildCard
                    {
                    pushFollow(FOLLOW_ruleElementWildCard_in_ruleElement2406);
                    re4=ruleElementWildCard();

                    state._fsp--;
                    if (state.failed) return re;

                    if ( state.backtracking==0 ) {re = re4;}

                    }
                    break;

            }


            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return re;
    }
    // $ANTLR end "ruleElement"



    // $ANTLR start "ruleElementWildCard"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:652:1: ruleElementWildCard returns [RutaRuleElement re = null] : w= WILDCARD ( LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY )? ;
    public final RutaRuleElement ruleElementWildCard() throws RecognitionException {
        RutaRuleElement re =  null;


        Token w=null;
        Token end=null;
        List<RutaCondition> c =null;

        List<RutaAction> a =null;



        List<RutaCondition> dummyConds = new ArrayList<RutaCondition>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:656:3: (w= WILDCARD ( LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY )? )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:657:6: w= WILDCARD ( LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY )?
            {
            w=(Token)match(input,WILDCARD,FOLLOW_WILDCARD_in_ruleElementWildCard2441); if (state.failed) return re;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:658:9: ( LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==LCURLY) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:658:10: LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY
                    {
                    match(input,LCURLY,FOLLOW_LCURLY_in_ruleElementWildCard2452); if (state.failed) return re;

                    if ( state.backtracking==0 ) {
                            
                            dummyConds.add(ConditionFactory.createEmptyCondition(input.LT(1)));
                            }

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:663:11: (c= conditions )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==CONTAINS||(LA55_0 >= AND && LA55_0 <= PARSE)||(LA55_0 >= BEFORE && LA55_0 <= ENDSWITH)||LA55_0==NOT||LA55_0==SIZE||(LA55_0 >= XOR && LA55_0 <= FALSE)||(LA55_0 >= Identifier && LA55_0 <= LPAREN)||LA55_0==MINUS) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:663:11: c= conditions
                            {
                            pushFollow(FOLLOW_conditions_in_ruleElementWildCard2478);
                            c=conditions();

                            state._fsp--;
                            if (state.failed) return re;

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                            if(c==null) {
                            	c = dummyConds;
                            }
                            }

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:669:9: ( THEN a= actions )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==THEN) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:669:10: THEN a= actions
                            {
                            match(input,THEN,FOLLOW_THEN_in_ruleElementWildCard2501); if (state.failed) return re;

                            pushFollow(FOLLOW_actions_in_ruleElementWildCard2507);
                            a=actions();

                            state._fsp--;
                            if (state.failed) return re;

                            }
                            break;

                    }


                    end=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_ruleElementWildCard2515); if (state.failed) return re;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {

                    re = scriptFactory.createRuleElement(w,c,a,end);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return re;
    }
    // $ANTLR end "ruleElementWildCard"



    // $ANTLR start "ruleElementComposed"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:677:1: ruleElementComposed returns [ComposedRuleElement re = null] : ft= LPAREN ( ( ruleElement VBAR )=>re1= ruleElement ( VBAR re1= ruleElement )+ | ( ruleElement AMPER )=>re2= ruleElement ( AMPER re2= ruleElement )+ |res2= ruleElements ) lt1= RPAREN (q= quantifierPart )? ( LCURLY (c= conditions )? ( THEN a= actions )? lt2= RCURLY )? ;
    public final ComposedRuleElement ruleElementComposed() throws RecognitionException {
        ComposedRuleElement re =  null;


        Token ft=null;
        Token lt1=null;
        Token lt2=null;
        Expression re1 =null;

        Expression re2 =null;

        List<Expression> res2 =null;

        List<Expression> q =null;

        List<RutaCondition> c =null;

        List<RutaAction> a =null;



        	Boolean disjunctive = null;
        	List<Expression> res = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:682:2: (ft= LPAREN ( ( ruleElement VBAR )=>re1= ruleElement ( VBAR re1= ruleElement )+ | ( ruleElement AMPER )=>re2= ruleElement ( AMPER re2= ruleElement )+ |res2= ruleElements ) lt1= RPAREN (q= quantifierPart )? ( LCURLY (c= conditions )? ( THEN a= actions )? lt2= RCURLY )? )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:683:2: ft= LPAREN ( ( ruleElement VBAR )=>re1= ruleElement ( VBAR re1= ruleElement )+ | ( ruleElement AMPER )=>re2= ruleElement ( AMPER re2= ruleElement )+ |res2= ruleElements ) lt1= RPAREN (q= quantifierPart )? ( LCURLY (c= conditions )? ( THEN a= actions )? lt2= RCURLY )?
            {
            ft=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_ruleElementComposed2558); if (state.failed) return re;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:684:2: ( ( ruleElement VBAR )=>re1= ruleElement ( VBAR re1= ruleElement )+ | ( ruleElement AMPER )=>re2= ruleElement ( AMPER re2= ruleElement )+ |res2= ruleElements )
            int alt60=3;
            switch ( input.LA(1) ) {
            case STARTANCHOR:
                {
                int LA60_1 = input.LA(2);

                if ( (synpred4_RutaParser()) ) {
                    alt60=1;
                }
                else if ( (synpred5_RutaParser()) ) {
                    alt60=2;
                }
                else if ( (true) ) {
                    alt60=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return re;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 60, 1, input);

                    throw nvae;

                }
                }
                break;
            case Identifier:
                {
                int LA60_2 = input.LA(2);

                if ( (synpred4_RutaParser()) ) {
                    alt60=1;
                }
                else if ( (synpred5_RutaParser()) ) {
                    alt60=2;
                }
                else if ( (true) ) {
                    alt60=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return re;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 60, 2, input);

                    throw nvae;

                }
                }
                break;
            case StringLiteral:
                {
                int LA60_3 = input.LA(2);

                if ( (synpred4_RutaParser()) ) {
                    alt60=1;
                }
                else if ( (synpred5_RutaParser()) ) {
                    alt60=2;
                }
                else if ( (true) ) {
                    alt60=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return re;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 60, 3, input);

                    throw nvae;

                }
                }
                break;
            case LPAREN:
                {
                int LA60_4 = input.LA(2);

                if ( (synpred4_RutaParser()) ) {
                    alt60=1;
                }
                else if ( (synpred5_RutaParser()) ) {
                    alt60=2;
                }
                else if ( (true) ) {
                    alt60=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return re;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 60, 4, input);

                    throw nvae;

                }
                }
                break;
            case WILDCARD:
                {
                int LA60_5 = input.LA(2);

                if ( (synpred4_RutaParser()) ) {
                    alt60=1;
                }
                else if ( (synpred5_RutaParser()) ) {
                    alt60=2;
                }
                else if ( (true) ) {
                    alt60=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return re;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 60, 5, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return re;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;

            }

            switch (alt60) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:685:2: ( ruleElement VBAR )=>re1= ruleElement ( VBAR re1= ruleElement )+
                    {
                    pushFollow(FOLLOW_ruleElement_in_ruleElementComposed2575);
                    re1=ruleElement();

                    state._fsp--;
                    if (state.failed) return re;

                    if ( state.backtracking==0 ) {res.add(re1);}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:685:57: ( VBAR re1= ruleElement )+
                    int cnt58=0;
                    loop58:
                    do {
                        int alt58=2;
                        int LA58_0 = input.LA(1);

                        if ( (LA58_0==VBAR) ) {
                            alt58=1;
                        }


                        switch (alt58) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:685:58: VBAR re1= ruleElement
                    	    {
                    	    match(input,VBAR,FOLLOW_VBAR_in_ruleElementComposed2580); if (state.failed) return re;

                    	    pushFollow(FOLLOW_ruleElement_in_ruleElementComposed2586);
                    	    re1=ruleElement();

                    	    state._fsp--;
                    	    if (state.failed) return re;

                    	    if ( state.backtracking==0 ) {disjunctive = true; res.add(re1);}

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt58 >= 1 ) break loop58;
                    	    if (state.backtracking>0) {state.failed=true; return re;}
                                EarlyExitException eee =
                                    new EarlyExitException(58, input);
                                throw eee;
                        }
                        cnt58++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:687:2: ( ruleElement AMPER )=>re2= ruleElement ( AMPER re2= ruleElement )+
                    {
                    pushFollow(FOLLOW_ruleElement_in_ruleElementComposed2607);
                    re2=ruleElement();

                    state._fsp--;
                    if (state.failed) return re;

                    if ( state.backtracking==0 ) {res.add(re2);}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:687:58: ( AMPER re2= ruleElement )+
                    int cnt59=0;
                    loop59:
                    do {
                        int alt59=2;
                        int LA59_0 = input.LA(1);

                        if ( (LA59_0==AMPER) ) {
                            alt59=1;
                        }


                        switch (alt59) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:687:59: AMPER re2= ruleElement
                    	    {
                    	    match(input,AMPER,FOLLOW_AMPER_in_ruleElementComposed2612); if (state.failed) return re;

                    	    pushFollow(FOLLOW_ruleElement_in_ruleElementComposed2618);
                    	    re2=ruleElement();

                    	    state._fsp--;
                    	    if (state.failed) return re;

                    	    if ( state.backtracking==0 ) {disjunctive = false; res.add(re2);}

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt59 >= 1 ) break loop59;
                    	    if (state.backtracking>0) {state.failed=true; return re;}
                                EarlyExitException eee =
                                    new EarlyExitException(59, input);
                                throw eee;
                        }
                        cnt59++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:689:2: res2= ruleElements
                    {
                    pushFollow(FOLLOW_ruleElements_in_ruleElementComposed2632);
                    res2=ruleElements();

                    state._fsp--;
                    if (state.failed) return re;

                    if ( state.backtracking==0 ) {res = res2;}

                    }
                    break;

            }


            lt1=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_ruleElementComposed2644); if (state.failed) return re;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:691:17: (q= quantifierPart )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==LBRACK||LA61_0==PLUS||LA61_0==STAR||LA61_0==QUESTION) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:691:17: q= quantifierPart
                    {
                    pushFollow(FOLLOW_quantifierPart_in_ruleElementComposed2650);
                    q=quantifierPart();

                    state._fsp--;
                    if (state.failed) return re;

                    }
                    break;

            }


            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:691:35: ( LCURLY (c= conditions )? ( THEN a= actions )? lt2= RCURLY )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==LCURLY) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:691:36: LCURLY (c= conditions )? ( THEN a= actions )? lt2= RCURLY
                    {
                    match(input,LCURLY,FOLLOW_LCURLY_in_ruleElementComposed2654); if (state.failed) return re;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:691:45: (c= conditions )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==CONTAINS||(LA62_0 >= AND && LA62_0 <= PARSE)||(LA62_0 >= BEFORE && LA62_0 <= ENDSWITH)||LA62_0==NOT||LA62_0==SIZE||(LA62_0 >= XOR && LA62_0 <= FALSE)||(LA62_0 >= Identifier && LA62_0 <= LPAREN)||LA62_0==MINUS) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:691:45: c= conditions
                            {
                            pushFollow(FOLLOW_conditions_in_ruleElementComposed2660);
                            c=conditions();

                            state._fsp--;
                            if (state.failed) return re;

                            }
                            break;

                    }


                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:691:59: ( THEN a= actions )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==THEN) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:691:60: THEN a= actions
                            {
                            match(input,THEN,FOLLOW_THEN_in_ruleElementComposed2664); if (state.failed) return re;

                            pushFollow(FOLLOW_actions_in_ruleElementComposed2670);
                            a=actions();

                            state._fsp--;
                            if (state.failed) return re;

                            }
                            break;

                    }


                    lt2=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_ruleElementComposed2678); if (state.failed) return re;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {re = scriptFactory.createComposedRuleElement(res, q, c, a, disjunctive, ((blockDeclaration_scope)blockDeclaration_stack.peek()).env, ft, lt1, lt2);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return re;
    }
    // $ANTLR end "ruleElementComposed"



    // $ANTLR start "ruleElementType"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:695:1: ruleElementType returns [RutaRuleElement re = null] : ( typeMatchExpression )=>idRef= typeMatchExpression (quantifier= quantifierPart )? ( LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY )? ;
    public final RutaRuleElement ruleElementType() throws RecognitionException {
        RutaRuleElement re =  null;


        Token end=null;
        Expression idRef =null;

        List<Expression> quantifier =null;

        List<RutaCondition> c =null;

        List<RutaAction> a =null;



        List<RutaCondition> dummyConds = new ArrayList<RutaCondition>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:699:3: ( ( typeMatchExpression )=>idRef= typeMatchExpression (quantifier= quantifierPart )? ( LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY )? )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:700:5: ( typeMatchExpression )=>idRef= typeMatchExpression (quantifier= quantifierPart )? ( LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY )?
            {
            pushFollow(FOLLOW_typeMatchExpression_in_ruleElementType2714);
            idRef=typeMatchExpression();

            state._fsp--;
            if (state.failed) return re;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:700:65: (quantifier= quantifierPart )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==LBRACK||LA65_0==PLUS||LA65_0==STAR||LA65_0==QUESTION) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:700:65: quantifier= quantifierPart
                    {
                    pushFollow(FOLLOW_quantifierPart_in_ruleElementType2720);
                    quantifier=quantifierPart();

                    state._fsp--;
                    if (state.failed) return re;

                    }
                    break;

            }


            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:701:9: ( LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==LCURLY) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:701:10: LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY
                    {
                    match(input,LCURLY,FOLLOW_LCURLY_in_ruleElementType2733); if (state.failed) return re;

                    if ( state.backtracking==0 ) {
                            
                            dummyConds.add(ConditionFactory.createEmptyCondition(input.LT(1)));
                            }

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:706:11: (c= conditions )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==CONTAINS||(LA66_0 >= AND && LA66_0 <= PARSE)||(LA66_0 >= BEFORE && LA66_0 <= ENDSWITH)||LA66_0==NOT||LA66_0==SIZE||(LA66_0 >= XOR && LA66_0 <= FALSE)||(LA66_0 >= Identifier && LA66_0 <= LPAREN)||LA66_0==MINUS) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:706:11: c= conditions
                            {
                            pushFollow(FOLLOW_conditions_in_ruleElementType2759);
                            c=conditions();

                            state._fsp--;
                            if (state.failed) return re;

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                            if(c==null) {
                            	c = dummyConds;
                            }
                            }

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:712:9: ( THEN a= actions )?
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==THEN) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:712:10: THEN a= actions
                            {
                            match(input,THEN,FOLLOW_THEN_in_ruleElementType2782); if (state.failed) return re;

                            pushFollow(FOLLOW_actions_in_ruleElementType2788);
                            a=actions();

                            state._fsp--;
                            if (state.failed) return re;

                            }
                            break;

                    }


                    end=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_ruleElementType2796); if (state.failed) return re;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {
                    // TODO handle quantifierPart.
                    re = scriptFactory.createRuleElement(idRef,quantifier,c,a,end);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return re;
    }
    // $ANTLR end "ruleElementType"



    // $ANTLR start "ruleElementLiteral"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:719:1: ruleElementLiteral returns [RutaRuleElement re = null] : ( simpleStringExpression )=>idRef= simpleStringExpression (quantifier= quantifierPart )? ( LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY )? ;
    public final RutaRuleElement ruleElementLiteral() throws RecognitionException {
        RutaRuleElement re =  null;


        Token end=null;
        Expression idRef =null;

        List<Expression> quantifier =null;

        List<RutaCondition> c =null;

        List<RutaAction> a =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:720:5: ( ( simpleStringExpression )=>idRef= simpleStringExpression (quantifier= quantifierPart )? ( LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY )? )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:722:5: ( simpleStringExpression )=>idRef= simpleStringExpression (quantifier= quantifierPart )? ( LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY )?
            {
            pushFollow(FOLLOW_simpleStringExpression_in_ruleElementLiteral2854);
            idRef=simpleStringExpression();

            state._fsp--;
            if (state.failed) return re;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:722:71: (quantifier= quantifierPart )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==LBRACK||LA69_0==PLUS||LA69_0==STAR||LA69_0==QUESTION) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:722:71: quantifier= quantifierPart
                    {
                    pushFollow(FOLLOW_quantifierPart_in_ruleElementLiteral2860);
                    quantifier=quantifierPart();

                    state._fsp--;
                    if (state.failed) return re;

                    }
                    break;

            }


            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:723:9: ( LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==LCURLY) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:723:10: LCURLY (c= conditions )? ( THEN a= actions )? end= RCURLY
                    {
                    match(input,LCURLY,FOLLOW_LCURLY_in_ruleElementLiteral2873); if (state.failed) return re;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:725:11: (c= conditions )?
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==CONTAINS||(LA70_0 >= AND && LA70_0 <= PARSE)||(LA70_0 >= BEFORE && LA70_0 <= ENDSWITH)||LA70_0==NOT||LA70_0==SIZE||(LA70_0 >= XOR && LA70_0 <= FALSE)||(LA70_0 >= Identifier && LA70_0 <= LPAREN)||LA70_0==MINUS) ) {
                        alt70=1;
                    }
                    switch (alt70) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:725:11: c= conditions
                            {
                            pushFollow(FOLLOW_conditions_in_ruleElementLiteral2889);
                            c=conditions();

                            state._fsp--;
                            if (state.failed) return re;

                            }
                            break;

                    }


                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:726:9: ( THEN a= actions )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==THEN) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:726:10: THEN a= actions
                            {
                            match(input,THEN,FOLLOW_THEN_in_ruleElementLiteral2902); if (state.failed) return re;

                            pushFollow(FOLLOW_actions_in_ruleElementLiteral2908);
                            a=actions();

                            state._fsp--;
                            if (state.failed) return re;

                            }
                            break;

                    }


                    end=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_ruleElementLiteral2925); if (state.failed) return re;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {
                    // TODO handle quantifierPart.
                    re = scriptFactory.createRuleElement(idRef,quantifier,c,a,end);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return re;
    }
    // $ANTLR end "ruleElementLiteral"



    // $ANTLR start "conditions"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:734:1: conditions returns [List<RutaCondition> conds = new ArrayList<RutaCondition>()] : c= condition ( COMMA c= condition )* ;
    public final List<RutaCondition> conditions() throws RecognitionException {
        List<RutaCondition> conds =  new ArrayList<RutaCondition>();


        RutaCondition c =null;



        conds.add(ConditionFactory.createEmptyCondition(input.LT(1)));

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:738:5: (c= condition ( COMMA c= condition )* )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:739:5: c= condition ( COMMA c= condition )*
            {
            pushFollow(FOLLOW_condition_in_conditions2984);
            c=condition();

            state._fsp--;
            if (state.failed) return conds;

            if ( state.backtracking==0 ) {conds.remove(0);conds.add(c);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:739:51: ( COMMA c= condition )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:739:52: COMMA c= condition
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_conditions2989); if (state.failed) return conds;

            	    pushFollow(FOLLOW_condition_in_conditions2995);
            	    c=condition();

            	    state._fsp--;
            	    if (state.failed) return conds;

            	    if ( state.backtracking==0 ) {conds.add(c);}

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return conds;
    }
    // $ANTLR end "conditions"



    // $ANTLR start "actions"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:743:1: actions returns [List<RutaAction> actions = new ArrayList<RutaAction>()] : a= action ( COMMA a= action )* ;
    public final List<RutaAction> actions() throws RecognitionException {
        List<RutaAction> actions =  new ArrayList<RutaAction>();


        RutaAction a =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:744:5: (a= action ( COMMA a= action )* )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:745:5: a= action ( COMMA a= action )*
            {
            pushFollow(FOLLOW_action_in_actions3032);
            a=action();

            state._fsp--;
            if (state.failed) return actions;

            if ( state.backtracking==0 ) {actions.add(a);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:745:34: ( COMMA a= action )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==COMMA) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:745:35: COMMA a= action
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_actions3037); if (state.failed) return actions;

            	    pushFollow(FOLLOW_action_in_actions3043);
            	    a=action();

            	    state._fsp--;
            	    if (state.failed) return actions;

            	    if ( state.backtracking==0 ) {actions.add(a);}

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return actions;
    }
    // $ANTLR end "actions"



    // $ANTLR start "listExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:749:1: listExpression returns [Expression expr = null] : ( ( booleanListExpression )=>e= booleanListExpression | ( intListExpression )=>e= intListExpression | ( doubleListExpression )=>e= doubleListExpression | ( floatListExpression )=>e= floatListExpression | ( stringListExpression )=>e= stringListExpression | ( typeListExpression )=>e= typeListExpression );
    public final Expression listExpression() throws RecognitionException {
        Expression expr =  null;


        Expression e =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:750:2: ( ( booleanListExpression )=>e= booleanListExpression | ( intListExpression )=>e= intListExpression | ( doubleListExpression )=>e= doubleListExpression | ( floatListExpression )=>e= floatListExpression | ( stringListExpression )=>e= stringListExpression | ( typeListExpression )=>e= typeListExpression )
            int alt75=6;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==LCURLY) ) {
                int LA75_1 = input.LA(2);

                if ( (synpred8_RutaParser()) ) {
                    alt75=1;
                }
                else if ( (synpred9_RutaParser()) ) {
                    alt75=2;
                }
                else if ( (synpred10_RutaParser()) ) {
                    alt75=3;
                }
                else if ( (synpred11_RutaParser()) ) {
                    alt75=4;
                }
                else if ( (synpred12_RutaParser()) ) {
                    alt75=5;
                }
                else if ( (synpred13_RutaParser()) ) {
                    alt75=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 75, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA75_0==Identifier) ) {
                int LA75_2 = input.LA(2);

                if ( (((synpred8_RutaParser()&&synpred8_RutaParser())&&(isVariableOfType(input.LT(1).getText(), "BOOLEANLIST")))) ) {
                    alt75=1;
                }
                else if ( ((((isVariableOfType(input.LT(1).getText(), "INTLIST"))&&(isVariableOfType(input.LT(1).getText(), "INTLIST")))&&synpred9_RutaParser())) ) {
                    alt75=2;
                }
                else if ( ((((isVariableOfType(input.LT(1).getText(), "DOUBLELIST"))&&(isVariableOfType(input.LT(1).getText(), "DOUBLELIST")))&&synpred10_RutaParser())) ) {
                    alt75=3;
                }
                else if ( ((((isVariableOfType(input.LT(1).getText(), "FLOATLIST"))&&(isVariableOfType(input.LT(1).getText(), "FLOATLIST")))&&synpred11_RutaParser())) ) {
                    alt75=4;
                }
                else if ( (((synpred12_RutaParser()&&synpred12_RutaParser())&&(isVariableOfType(input.LT(1).getText(), "STRINGLIST")))) ) {
                    alt75=5;
                }
                else if ( ((((isVariableOfType(input.LT(1).getText(), "TYPELIST"))&&(isVariableOfType(input.LT(1).getText(), "TYPELIST")))&&synpred13_RutaParser())) ) {
                    alt75=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 75, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;

            }
            switch (alt75) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:751:2: ( booleanListExpression )=>e= booleanListExpression
                    {
                    pushFollow(FOLLOW_booleanListExpression_in_listExpression3081);
                    e=booleanListExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = e;}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:752:4: ( intListExpression )=>e= intListExpression
                    {
                    pushFollow(FOLLOW_intListExpression_in_listExpression3097);
                    e=intListExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = e;}

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:753:4: ( doubleListExpression )=>e= doubleListExpression
                    {
                    pushFollow(FOLLOW_doubleListExpression_in_listExpression3113);
                    e=doubleListExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = e;}

                    }
                    break;
                case 4 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:754:4: ( floatListExpression )=>e= floatListExpression
                    {
                    pushFollow(FOLLOW_floatListExpression_in_listExpression3129);
                    e=floatListExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = e;}

                    }
                    break;
                case 5 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:755:4: ( stringListExpression )=>e= stringListExpression
                    {
                    pushFollow(FOLLOW_stringListExpression_in_listExpression3145);
                    e=stringListExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = e;}

                    }
                    break;
                case 6 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:756:4: ( typeListExpression )=>e= typeListExpression
                    {
                    pushFollow(FOLLOW_typeListExpression_in_listExpression3161);
                    e=typeListExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = e;}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "listExpression"



    // $ANTLR start "booleanListExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:759:1: booleanListExpression returns [Expression expr = null] : e= simpleBooleanListExpression ;
    public final Expression booleanListExpression() throws RecognitionException {
        Expression expr =  null;


        Expression e =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:761:2: (e= simpleBooleanListExpression )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:762:2: e= simpleBooleanListExpression
            {
            pushFollow(FOLLOW_simpleBooleanListExpression_in_booleanListExpression3185);
            e=simpleBooleanListExpression();

            state._fsp--;
            if (state.failed) return expr;

            if ( state.backtracking==0 ) {expr = e;}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "booleanListExpression"



    // $ANTLR start "simpleBooleanListExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:765:1: simpleBooleanListExpression returns [Expression expr = null] : ( LCURLY (e= simpleBooleanExpression ( COMMA e= simpleBooleanExpression )* )? RCURLY |{...}?var= Identifier );
    public final Expression simpleBooleanListExpression() throws RecognitionException {
        Expression expr =  null;


        Token var=null;
        Expression e =null;



        	List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:768:3: ( LCURLY (e= simpleBooleanExpression ( COMMA e= simpleBooleanExpression )* )? RCURLY |{...}?var= Identifier )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==LCURLY) ) {
                alt78=1;
            }
            else if ( (LA78_0==Identifier) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;

            }
            switch (alt78) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:769:2: LCURLY (e= simpleBooleanExpression ( COMMA e= simpleBooleanExpression )* )? RCURLY
                    {
                    match(input,LCURLY,FOLLOW_LCURLY_in_simpleBooleanListExpression3206); if (state.failed) return expr;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:769:9: (e= simpleBooleanExpression ( COMMA e= simpleBooleanExpression )* )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( ((LA77_0 >= TRUE && LA77_0 <= FALSE)||LA77_0==Identifier) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:769:10: e= simpleBooleanExpression ( COMMA e= simpleBooleanExpression )*
                            {
                            pushFollow(FOLLOW_simpleBooleanExpression_in_simpleBooleanListExpression3213);
                            e=simpleBooleanExpression();

                            state._fsp--;
                            if (state.failed) return expr;

                            if ( state.backtracking==0 ) {list.add(e);}

                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:769:53: ( COMMA e= simpleBooleanExpression )*
                            loop76:
                            do {
                                int alt76=2;
                                int LA76_0 = input.LA(1);

                                if ( (LA76_0==COMMA) ) {
                                    alt76=1;
                                }


                                switch (alt76) {
                            	case 1 :
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:769:54: COMMA e= simpleBooleanExpression
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_simpleBooleanListExpression3218); if (state.failed) return expr;

                            	    pushFollow(FOLLOW_simpleBooleanExpression_in_simpleBooleanListExpression3224);
                            	    e=simpleBooleanExpression();

                            	    state._fsp--;
                            	    if (state.failed) return expr;

                            	    if ( state.backtracking==0 ) {list.add(e);}

                            	    }
                            	    break;

                            	default :
                            	    break loop76;
                                }
                            } while (true);


                            }
                            break;

                    }


                    match(input,RCURLY,FOLLOW_RCURLY_in_simpleBooleanListExpression3233); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createListExpression(list, RutaTypeConstants.RUTA_TYPE_BL);}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:772:2: {...}?var= Identifier
                    {
                    if ( !((isVariableOfType(input.LT(1).getText(), "BOOLEANLIST"))) ) {
                        if (state.backtracking>0) {state.failed=true; return expr;}
                        throw new FailedPredicateException(input, "simpleBooleanListExpression", "isVariableOfType(input.LT(1).getText(), \"BOOLEANLIST\")");
                    }

                    var=(Token)match(input,Identifier,FOLLOW_Identifier_in_simpleBooleanListExpression3250); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createListExpression(var, RutaTypeConstants.RUTA_TYPE_BL);}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "simpleBooleanListExpression"



    // $ANTLR start "intListExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:778:1: intListExpression returns [Expression expr = null] : e= simpleIntListExpression ;
    public final Expression intListExpression() throws RecognitionException {
        Expression expr =  null;


        Expression e =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:779:2: (e= simpleIntListExpression )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:780:2: e= simpleIntListExpression
            {
            pushFollow(FOLLOW_simpleIntListExpression_in_intListExpression3275);
            e=simpleIntListExpression();

            state._fsp--;
            if (state.failed) return expr;

            if ( state.backtracking==0 ) {expr = e;}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "intListExpression"



    // $ANTLR start "simpleIntListExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:783:1: simpleIntListExpression returns [Expression expr = null] : ( LCURLY (e= simpleNumberExpression ( COMMA e= simpleNumberExpression )* )? RCURLY |{...}?var= Identifier );
    public final Expression simpleIntListExpression() throws RecognitionException {
        Expression expr =  null;


        Token var=null;
        Expression e =null;



        	List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:786:3: ( LCURLY (e= simpleNumberExpression ( COMMA e= simpleNumberExpression )* )? RCURLY |{...}?var= Identifier )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==LCURLY) ) {
                alt81=1;
            }
            else if ( (LA81_0==Identifier) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }
            switch (alt81) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:787:2: LCURLY (e= simpleNumberExpression ( COMMA e= simpleNumberExpression )* )? RCURLY
                    {
                    match(input,LCURLY,FOLLOW_LCURLY_in_simpleIntListExpression3296); if (state.failed) return expr;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:787:9: (e= simpleNumberExpression ( COMMA e= simpleNumberExpression )* )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==DecimalLiteral||LA80_0==FloatingPointLiteral||(LA80_0 >= Identifier && LA80_0 <= LPAREN)||LA80_0==MINUS) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:787:10: e= simpleNumberExpression ( COMMA e= simpleNumberExpression )*
                            {
                            pushFollow(FOLLOW_simpleNumberExpression_in_simpleIntListExpression3303);
                            e=simpleNumberExpression();

                            state._fsp--;
                            if (state.failed) return expr;

                            if ( state.backtracking==0 ) {list.add(e);}

                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:787:52: ( COMMA e= simpleNumberExpression )*
                            loop79:
                            do {
                                int alt79=2;
                                int LA79_0 = input.LA(1);

                                if ( (LA79_0==COMMA) ) {
                                    alt79=1;
                                }


                                switch (alt79) {
                            	case 1 :
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:787:53: COMMA e= simpleNumberExpression
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_simpleIntListExpression3308); if (state.failed) return expr;

                            	    pushFollow(FOLLOW_simpleNumberExpression_in_simpleIntListExpression3314);
                            	    e=simpleNumberExpression();

                            	    state._fsp--;
                            	    if (state.failed) return expr;

                            	    if ( state.backtracking==0 ) {list.add(e);}

                            	    }
                            	    break;

                            	default :
                            	    break loop79;
                                }
                            } while (true);


                            }
                            break;

                    }


                    match(input,RCURLY,FOLLOW_RCURLY_in_simpleIntListExpression3323); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createListExpression(list, RutaTypeConstants.RUTA_TYPE_NL);}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:790:2: {...}?var= Identifier
                    {
                    if ( !((isVariableOfType(input.LT(1).getText(), "INTLIST"))) ) {
                        if (state.backtracking>0) {state.failed=true; return expr;}
                        throw new FailedPredicateException(input, "simpleIntListExpression", "isVariableOfType(input.LT(1).getText(), \"INTLIST\")");
                    }

                    var=(Token)match(input,Identifier,FOLLOW_Identifier_in_simpleIntListExpression3340); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createListExpression(var, RutaTypeConstants.RUTA_TYPE_NL);}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "simpleIntListExpression"



    // $ANTLR start "numberListExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:796:1: numberListExpression returns [Expression expr = null] : ( (e1= doubleListExpression )=>e1= doubleListExpression | (e1= floatListExpression )=>e1= floatListExpression |e2= intListExpression );
    public final Expression numberListExpression() throws RecognitionException {
        Expression expr =  null;


        Expression e1 =null;

        Expression e2 =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:797:2: ( (e1= doubleListExpression )=>e1= doubleListExpression | (e1= floatListExpression )=>e1= floatListExpression |e2= intListExpression )
            int alt82=3;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==LCURLY) ) {
                int LA82_1 = input.LA(2);

                if ( (synpred14_RutaParser()) ) {
                    alt82=1;
                }
                else if ( (synpred15_RutaParser()) ) {
                    alt82=2;
                }
                else if ( (true) ) {
                    alt82=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 82, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA82_0==Identifier) ) {
                int LA82_2 = input.LA(2);

                if ( ((((isVariableOfType(input.LT(1).getText(), "DOUBLELIST"))&&(isVariableOfType(input.LT(1).getText(), "DOUBLELIST")))&&synpred14_RutaParser())) ) {
                    alt82=1;
                }
                else if ( (((synpred15_RutaParser()&&synpred15_RutaParser())&&(isVariableOfType(input.LT(1).getText(), "FLOATLIST")))) ) {
                    alt82=2;
                }
                else if ( ((isVariableOfType(input.LT(1).getText(), "INTLIST"))) ) {
                    alt82=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 82, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;

            }
            switch (alt82) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:798:2: (e1= doubleListExpression )=>e1= doubleListExpression
                    {
                    pushFollow(FOLLOW_doubleListExpression_in_numberListExpression3374);
                    e1=doubleListExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = e1;}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:800:2: (e1= floatListExpression )=>e1= floatListExpression
                    {
                    pushFollow(FOLLOW_floatListExpression_in_numberListExpression3395);
                    e1=floatListExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = e1;}

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:802:2: e2= intListExpression
                    {
                    pushFollow(FOLLOW_intListExpression_in_numberListExpression3407);
                    e2=intListExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = e2;}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "numberListExpression"



    // $ANTLR start "doubleListExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:805:1: doubleListExpression returns [Expression expr = null] : e= simpleDoubleListExpression ;
    public final Expression doubleListExpression() throws RecognitionException {
        Expression expr =  null;


        Expression e =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:806:2: (e= simpleDoubleListExpression )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:807:2: e= simpleDoubleListExpression
            {
            pushFollow(FOLLOW_simpleDoubleListExpression_in_doubleListExpression3430);
            e=simpleDoubleListExpression();

            state._fsp--;
            if (state.failed) return expr;

            if ( state.backtracking==0 ) {expr = e;}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "doubleListExpression"



    // $ANTLR start "simpleDoubleListExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:810:1: simpleDoubleListExpression returns [Expression expr = null] : ( LCURLY (e= simpleNumberExpression ( COMMA e= simpleNumberExpression )* )? RCURLY |{...}?var= Identifier );
    public final Expression simpleDoubleListExpression() throws RecognitionException {
        Expression expr =  null;


        Token var=null;
        Expression e =null;



        	List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:813:3: ( LCURLY (e= simpleNumberExpression ( COMMA e= simpleNumberExpression )* )? RCURLY |{...}?var= Identifier )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==LCURLY) ) {
                alt85=1;
            }
            else if ( (LA85_0==Identifier) ) {
                alt85=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;

            }
            switch (alt85) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:814:2: LCURLY (e= simpleNumberExpression ( COMMA e= simpleNumberExpression )* )? RCURLY
                    {
                    match(input,LCURLY,FOLLOW_LCURLY_in_simpleDoubleListExpression3451); if (state.failed) return expr;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:814:9: (e= simpleNumberExpression ( COMMA e= simpleNumberExpression )* )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==DecimalLiteral||LA84_0==FloatingPointLiteral||(LA84_0 >= Identifier && LA84_0 <= LPAREN)||LA84_0==MINUS) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:814:10: e= simpleNumberExpression ( COMMA e= simpleNumberExpression )*
                            {
                            pushFollow(FOLLOW_simpleNumberExpression_in_simpleDoubleListExpression3458);
                            e=simpleNumberExpression();

                            state._fsp--;
                            if (state.failed) return expr;

                            if ( state.backtracking==0 ) {list.add(e);}

                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:814:52: ( COMMA e= simpleNumberExpression )*
                            loop83:
                            do {
                                int alt83=2;
                                int LA83_0 = input.LA(1);

                                if ( (LA83_0==COMMA) ) {
                                    alt83=1;
                                }


                                switch (alt83) {
                            	case 1 :
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:814:53: COMMA e= simpleNumberExpression
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_simpleDoubleListExpression3463); if (state.failed) return expr;

                            	    pushFollow(FOLLOW_simpleNumberExpression_in_simpleDoubleListExpression3469);
                            	    e=simpleNumberExpression();

                            	    state._fsp--;
                            	    if (state.failed) return expr;

                            	    if ( state.backtracking==0 ) {list.add(e);}

                            	    }
                            	    break;

                            	default :
                            	    break loop83;
                                }
                            } while (true);


                            }
                            break;

                    }


                    match(input,RCURLY,FOLLOW_RCURLY_in_simpleDoubleListExpression3478); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createListExpression(list, RutaTypeConstants.RUTA_TYPE_NL);}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:817:2: {...}?var= Identifier
                    {
                    if ( !((isVariableOfType(input.LT(1).getText(), "DOUBLELIST"))) ) {
                        if (state.backtracking>0) {state.failed=true; return expr;}
                        throw new FailedPredicateException(input, "simpleDoubleListExpression", "isVariableOfType(input.LT(1).getText(), \"DOUBLELIST\")");
                    }

                    var=(Token)match(input,Identifier,FOLLOW_Identifier_in_simpleDoubleListExpression3495); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createListExpression(var, RutaTypeConstants.RUTA_TYPE_NL);}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "simpleDoubleListExpression"



    // $ANTLR start "floatListExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:822:1: floatListExpression returns [Expression expr = null] : e= simpleFloatListExpression ;
    public final Expression floatListExpression() throws RecognitionException {
        Expression expr =  null;


        Expression e =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:823:2: (e= simpleFloatListExpression )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:824:2: e= simpleFloatListExpression
            {
            pushFollow(FOLLOW_simpleFloatListExpression_in_floatListExpression3519);
            e=simpleFloatListExpression();

            state._fsp--;
            if (state.failed) return expr;

            if ( state.backtracking==0 ) {expr = e;}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "floatListExpression"



    // $ANTLR start "simpleFloatListExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:827:1: simpleFloatListExpression returns [Expression expr = null] : ( LCURLY (e= simpleNumberExpression ( COMMA e= simpleNumberExpression )* )? RCURLY |{...}?var= Identifier );
    public final Expression simpleFloatListExpression() throws RecognitionException {
        Expression expr =  null;


        Token var=null;
        Expression e =null;



        	List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:830:3: ( LCURLY (e= simpleNumberExpression ( COMMA e= simpleNumberExpression )* )? RCURLY |{...}?var= Identifier )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==LCURLY) ) {
                alt88=1;
            }
            else if ( (LA88_0==Identifier) ) {
                alt88=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;

            }
            switch (alt88) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:831:2: LCURLY (e= simpleNumberExpression ( COMMA e= simpleNumberExpression )* )? RCURLY
                    {
                    match(input,LCURLY,FOLLOW_LCURLY_in_simpleFloatListExpression3540); if (state.failed) return expr;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:831:9: (e= simpleNumberExpression ( COMMA e= simpleNumberExpression )* )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==DecimalLiteral||LA87_0==FloatingPointLiteral||(LA87_0 >= Identifier && LA87_0 <= LPAREN)||LA87_0==MINUS) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:831:10: e= simpleNumberExpression ( COMMA e= simpleNumberExpression )*
                            {
                            pushFollow(FOLLOW_simpleNumberExpression_in_simpleFloatListExpression3547);
                            e=simpleNumberExpression();

                            state._fsp--;
                            if (state.failed) return expr;

                            if ( state.backtracking==0 ) {list.add(e);}

                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:831:52: ( COMMA e= simpleNumberExpression )*
                            loop86:
                            do {
                                int alt86=2;
                                int LA86_0 = input.LA(1);

                                if ( (LA86_0==COMMA) ) {
                                    alt86=1;
                                }


                                switch (alt86) {
                            	case 1 :
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:831:53: COMMA e= simpleNumberExpression
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_simpleFloatListExpression3552); if (state.failed) return expr;

                            	    pushFollow(FOLLOW_simpleNumberExpression_in_simpleFloatListExpression3558);
                            	    e=simpleNumberExpression();

                            	    state._fsp--;
                            	    if (state.failed) return expr;

                            	    if ( state.backtracking==0 ) {list.add(e);}

                            	    }
                            	    break;

                            	default :
                            	    break loop86;
                                }
                            } while (true);


                            }
                            break;

                    }


                    match(input,RCURLY,FOLLOW_RCURLY_in_simpleFloatListExpression3567); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createListExpression(list, RutaTypeConstants.RUTA_TYPE_NL);}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:834:2: {...}?var= Identifier
                    {
                    if ( !((isVariableOfType(input.LT(1).getText(), "FLOATLIST"))) ) {
                        if (state.backtracking>0) {state.failed=true; return expr;}
                        throw new FailedPredicateException(input, "simpleFloatListExpression", "isVariableOfType(input.LT(1).getText(), \"FLOATLIST\")");
                    }

                    var=(Token)match(input,Identifier,FOLLOW_Identifier_in_simpleFloatListExpression3584); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createListExpression(var, RutaTypeConstants.RUTA_TYPE_NL);}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "simpleFloatListExpression"



    // $ANTLR start "stringListExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:840:1: stringListExpression returns [Expression expr = null] : e= simpleStringListExpression ;
    public final Expression stringListExpression() throws RecognitionException {
        Expression expr =  null;


        Expression e =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:841:2: (e= simpleStringListExpression )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:842:2: e= simpleStringListExpression
            {
            pushFollow(FOLLOW_simpleStringListExpression_in_stringListExpression3609);
            e=simpleStringListExpression();

            state._fsp--;
            if (state.failed) return expr;

            if ( state.backtracking==0 ) {expr = e;}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "stringListExpression"



    // $ANTLR start "simpleStringListExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:845:1: simpleStringListExpression returns [Expression expr = null] : ( LCURLY (e= simpleStringExpression ( COMMA e= simpleStringExpression )* )? RCURLY |{...}?var= Identifier );
    public final Expression simpleStringListExpression() throws RecognitionException {
        Expression expr =  null;


        Token var=null;
        Expression e =null;



        	List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:848:3: ( LCURLY (e= simpleStringExpression ( COMMA e= simpleStringExpression )* )? RCURLY |{...}?var= Identifier )
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==LCURLY) ) {
                alt91=1;
            }
            else if ( (LA91_0==Identifier) ) {
                alt91=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;

            }
            switch (alt91) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:849:2: LCURLY (e= simpleStringExpression ( COMMA e= simpleStringExpression )* )? RCURLY
                    {
                    match(input,LCURLY,FOLLOW_LCURLY_in_simpleStringListExpression3630); if (state.failed) return expr;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:849:9: (e= simpleStringExpression ( COMMA e= simpleStringExpression )* )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==StringLiteral||LA90_0==Identifier) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:849:10: e= simpleStringExpression ( COMMA e= simpleStringExpression )*
                            {
                            pushFollow(FOLLOW_simpleStringExpression_in_simpleStringListExpression3637);
                            e=simpleStringExpression();

                            state._fsp--;
                            if (state.failed) return expr;

                            if ( state.backtracking==0 ) {list.add(e);}

                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:849:52: ( COMMA e= simpleStringExpression )*
                            loop89:
                            do {
                                int alt89=2;
                                int LA89_0 = input.LA(1);

                                if ( (LA89_0==COMMA) ) {
                                    alt89=1;
                                }


                                switch (alt89) {
                            	case 1 :
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:849:53: COMMA e= simpleStringExpression
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_simpleStringListExpression3642); if (state.failed) return expr;

                            	    pushFollow(FOLLOW_simpleStringExpression_in_simpleStringListExpression3648);
                            	    e=simpleStringExpression();

                            	    state._fsp--;
                            	    if (state.failed) return expr;

                            	    if ( state.backtracking==0 ) {list.add(e);}

                            	    }
                            	    break;

                            	default :
                            	    break loop89;
                                }
                            } while (true);


                            }
                            break;

                    }


                    match(input,RCURLY,FOLLOW_RCURLY_in_simpleStringListExpression3657); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createListExpression(list, RutaTypeConstants.RUTA_TYPE_SL);}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:852:2: {...}?var= Identifier
                    {
                    if ( !((isVariableOfType(input.LT(1).getText(), "STRINGLIST"))) ) {
                        if (state.backtracking>0) {state.failed=true; return expr;}
                        throw new FailedPredicateException(input, "simpleStringListExpression", "isVariableOfType(input.LT(1).getText(), \"STRINGLIST\")");
                    }

                    var=(Token)match(input,Identifier,FOLLOW_Identifier_in_simpleStringListExpression3674); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createListExpression(var, RutaTypeConstants.RUTA_TYPE_SL);}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "simpleStringListExpression"



    // $ANTLR start "typeListExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:858:1: typeListExpression returns [Expression expr = null] : e= simpleTypeListExpression ;
    public final Expression typeListExpression() throws RecognitionException {
        Expression expr =  null;


        Expression e =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:859:2: (e= simpleTypeListExpression )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:860:2: e= simpleTypeListExpression
            {
            pushFollow(FOLLOW_simpleTypeListExpression_in_typeListExpression3699);
            e=simpleTypeListExpression();

            state._fsp--;
            if (state.failed) return expr;

            if ( state.backtracking==0 ) {expr = e;}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "typeListExpression"



    // $ANTLR start "simpleTypeListExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:863:1: simpleTypeListExpression returns [Expression expr = null] : ( LCURLY (e= simpleTypeExpression ( COMMA e= simpleTypeExpression )* )? RCURLY |{...}?var= Identifier );
    public final Expression simpleTypeListExpression() throws RecognitionException {
        Expression expr =  null;


        Token var=null;
        Expression e =null;



        	List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:866:3: ( LCURLY (e= simpleTypeExpression ( COMMA e= simpleTypeExpression )* )? RCURLY |{...}?var= Identifier )
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==LCURLY) ) {
                alt94=1;
            }
            else if ( (LA94_0==Identifier) ) {
                alt94=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;

            }
            switch (alt94) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:867:2: LCURLY (e= simpleTypeExpression ( COMMA e= simpleTypeExpression )* )? RCURLY
                    {
                    match(input,LCURLY,FOLLOW_LCURLY_in_simpleTypeListExpression3720); if (state.failed) return expr;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:867:9: (e= simpleTypeExpression ( COMMA e= simpleTypeExpression )* )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==Identifier) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:867:10: e= simpleTypeExpression ( COMMA e= simpleTypeExpression )*
                            {
                            pushFollow(FOLLOW_simpleTypeExpression_in_simpleTypeListExpression3727);
                            e=simpleTypeExpression();

                            state._fsp--;
                            if (state.failed) return expr;

                            if ( state.backtracking==0 ) {list.add(e);}

                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:867:50: ( COMMA e= simpleTypeExpression )*
                            loop92:
                            do {
                                int alt92=2;
                                int LA92_0 = input.LA(1);

                                if ( (LA92_0==COMMA) ) {
                                    alt92=1;
                                }


                                switch (alt92) {
                            	case 1 :
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:867:51: COMMA e= simpleTypeExpression
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_simpleTypeListExpression3732); if (state.failed) return expr;

                            	    pushFollow(FOLLOW_simpleTypeExpression_in_simpleTypeListExpression3738);
                            	    e=simpleTypeExpression();

                            	    state._fsp--;
                            	    if (state.failed) return expr;

                            	    if ( state.backtracking==0 ) {list.add(e);}

                            	    }
                            	    break;

                            	default :
                            	    break loop92;
                                }
                            } while (true);


                            }
                            break;

                    }


                    match(input,RCURLY,FOLLOW_RCURLY_in_simpleTypeListExpression3747); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createListExpression(list, RutaTypeConstants.RUTA_TYPE_TL);}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:870:2: {...}?var= Identifier
                    {
                    if ( !((isVariableOfType(input.LT(1).getText(), "TYPELIST"))) ) {
                        if (state.backtracking>0) {state.failed=true; return expr;}
                        throw new FailedPredicateException(input, "simpleTypeListExpression", "isVariableOfType(input.LT(1).getText(), \"TYPELIST\")");
                    }

                    var=(Token)match(input,Identifier,FOLLOW_Identifier_in_simpleTypeListExpression3764); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createListExpression(var, RutaTypeConstants.RUTA_TYPE_TL);}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "simpleTypeListExpression"



    // $ANTLR start "typeMatchExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:876:1: typeMatchExpression returns [Expression expr = null] options {backtrack=true; } : ( ( featureTypeExpression )=>ft= featureTypeExpression | ( typeFunction )=>tf= typeFunction |st= simpleTypeExpression ) ;
    public final Expression typeMatchExpression() throws RecognitionException {
        Expression expr =  null;


        Expression ft =null;

        Expression tf =null;

        Expression st =null;



        expr = ExpressionFactory.createEmptyTypeExpression(input.LT(1));

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:883:2: ( ( ( featureTypeExpression )=>ft= featureTypeExpression | ( typeFunction )=>tf= typeFunction |st= simpleTypeExpression ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:884:2: ( ( featureTypeExpression )=>ft= featureTypeExpression | ( typeFunction )=>tf= typeFunction |st= simpleTypeExpression )
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:884:2: ( ( featureTypeExpression )=>ft= featureTypeExpression | ( typeFunction )=>tf= typeFunction |st= simpleTypeExpression )
            int alt95=3;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==Identifier) ) {
                int LA95_1 = input.LA(2);

                if ( (synpred16_RutaParser()) ) {
                    alt95=1;
                }
                else if ( (synpred17_RutaParser()) ) {
                    alt95=2;
                }
                else if ( (true) ) {
                    alt95=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;

            }
            switch (alt95) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:885:2: ( featureTypeExpression )=>ft= featureTypeExpression
                    {
                    pushFollow(FOLLOW_featureTypeExpression_in_typeMatchExpression3817);
                    ft=featureTypeExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ft;}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:887:2: ( typeFunction )=>tf= typeFunction
                    {
                    pushFollow(FOLLOW_typeFunction_in_typeMatchExpression3835);
                    tf=typeFunction();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = tf;}

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:889:2: st= simpleTypeExpression
                    {
                    pushFollow(FOLLOW_simpleTypeExpression_in_typeMatchExpression3848);
                    st=simpleTypeExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {expr = ExpressionFactory.createTypeExpression(st);
            	 }

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "typeMatchExpression"



    // $ANTLR start "typeExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:896:1: typeExpression returns [Expression expr = null] : ( ( typeFunction )=>tf= typeFunction |st= simpleTypeExpression );
    public final Expression typeExpression() throws RecognitionException {
        Expression expr =  null;


        Expression tf =null;

        Expression st =null;



        expr = ExpressionFactory.createEmptyTypeExpression(input.LT(1));

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:900:2: ( ( typeFunction )=>tf= typeFunction |st= simpleTypeExpression )
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==Identifier) ) {
                int LA96_1 = input.LA(2);

                if ( (synpred18_RutaParser()) ) {
                    alt96=1;
                }
                else if ( (true) ) {
                    alt96=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;

            }
            switch (alt96) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:901:2: ( typeFunction )=>tf= typeFunction
                    {
                    pushFollow(FOLLOW_typeFunction_in_typeExpression3889);
                    tf=typeFunction();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = tf;}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:902:4: st= simpleTypeExpression
                    {
                    pushFollow(FOLLOW_simpleTypeExpression_in_typeExpression3900);
                    st=simpleTypeExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createTypeExpression(st);
                    	 }

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "typeExpression"



    // $ANTLR start "typeFunction"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:908:1: typeFunction returns [Expression expr = null] : (e= externalTypeFunction )=>e= externalTypeFunction ;
    public final Expression typeFunction() throws RecognitionException {
        Expression expr =  null;


        Expression e =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:909:2: ( (e= externalTypeFunction )=>e= externalTypeFunction )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:910:2: (e= externalTypeFunction )=>e= externalTypeFunction
            {
            pushFollow(FOLLOW_externalTypeFunction_in_typeFunction3934);
            e=externalTypeFunction();

            state._fsp--;
            if (state.failed) return expr;

            if ( state.backtracking==0 ) {expr = e;}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "typeFunction"



    // $ANTLR start "externalTypeFunction"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:914:1: externalTypeFunction returns [Expression expr = null] : id= Identifier LPAREN (args= varArgumentList )? RPAREN ;
    public final Expression externalTypeFunction() throws RecognitionException {
        Expression expr =  null;


        Token id=null;
        List<Expression> args =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:915:2: (id= Identifier LPAREN (args= varArgumentList )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:916:2: id= Identifier LPAREN (args= varArgumentList )? RPAREN
            {
            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_externalTypeFunction3957); if (state.failed) return expr;

            match(input,LPAREN,FOLLOW_LPAREN_in_externalTypeFunction3961); if (state.failed) return expr;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:918:7: (args= varArgumentList )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==REMOVESTRING||(LA97_0 >= EXP && LA97_0 <= FALSE)||LA97_0==DecimalLiteral||LA97_0==FloatingPointLiteral||LA97_0==StringLiteral||(LA97_0 >= Identifier && LA97_0 <= LPAREN)||LA97_0==MINUS) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:918:7: args= varArgumentList
                    {
                    pushFollow(FOLLOW_varArgumentList_in_externalTypeFunction3968);
                    args=varArgumentList();

                    state._fsp--;
                    if (state.failed) return expr;

                    }
                    break;

            }


            match(input,RPAREN,FOLLOW_RPAREN_in_externalTypeFunction3972); if (state.failed) return expr;

            if ( state.backtracking==0 ) {
            		expr = external.createExternalTypeFunction(id, args);
            	}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "externalTypeFunction"



    // $ANTLR start "featureAssignmentExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:925:1: featureAssignmentExpression returns [Expression expr = null] : feature= dottedId comp= ASSIGN_EQUAL value= argument ;
    public final Expression featureAssignmentExpression() throws RecognitionException {
        Expression expr =  null;


        Token comp=null;
        Token feature =null;

        Expression value =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:926:2: (feature= dottedId comp= ASSIGN_EQUAL value= argument )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:927:2: feature= dottedId comp= ASSIGN_EQUAL value= argument
            {
            pushFollow(FOLLOW_dottedId_in_featureAssignmentExpression3995);
            feature=dottedId();

            state._fsp--;
            if (state.failed) return expr;

            comp=(Token)match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_featureAssignmentExpression4001); if (state.failed) return expr;

            pushFollow(FOLLOW_argument_in_featureAssignmentExpression4007);
            value=argument();

            state._fsp--;
            if (state.failed) return expr;

            if ( state.backtracking==0 ) {expr = ExpressionFactory.createFeatureMatch(feature, comp, value);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "featureAssignmentExpression"



    // $ANTLR start "featureTypeExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:930:1: featureTypeExpression returns [Expression expr = null] : feature= dottedId (comp= EQUAL |comp= NOTEQUAL ) value= argument ;
    public final Expression featureTypeExpression() throws RecognitionException {
        Expression expr =  null;


        Token comp=null;
        Token feature =null;

        Expression value =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:931:2: (feature= dottedId (comp= EQUAL |comp= NOTEQUAL ) value= argument )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:932:2: feature= dottedId (comp= EQUAL |comp= NOTEQUAL ) value= argument
            {
            pushFollow(FOLLOW_dottedId_in_featureTypeExpression4029);
            feature=dottedId();

            state._fsp--;
            if (state.failed) return expr;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:932:21: (comp= EQUAL |comp= NOTEQUAL )
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==EQUAL) ) {
                alt98=1;
            }
            else if ( (LA98_0==NOTEQUAL) ) {
                alt98=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;

            }
            switch (alt98) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:932:22: comp= EQUAL
                    {
                    comp=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_featureTypeExpression4036); if (state.failed) return expr;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:932:37: comp= NOTEQUAL
                    {
                    comp=(Token)match(input,NOTEQUAL,FOLLOW_NOTEQUAL_in_featureTypeExpression4044); if (state.failed) return expr;

                    }
                    break;

            }


            pushFollow(FOLLOW_argument_in_featureTypeExpression4051);
            value=argument();

            state._fsp--;
            if (state.failed) return expr;

            if ( state.backtracking==0 ) {expr = ExpressionFactory.createFeatureMatch(feature, comp, value);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "featureTypeExpression"



    // $ANTLR start "featureExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:935:1: featureExpression returns [Expression expr = null] : f= dottedId2 ;
    public final Expression featureExpression() throws RecognitionException {
        Expression expr =  null;


        Token f =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:936:2: (f= dottedId2 )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:937:2: f= dottedId2
            {
            pushFollow(FOLLOW_dottedId2_in_featureExpression4073);
            f=dottedId2();

            state._fsp--;
            if (state.failed) return expr;

            if ( state.backtracking==0 ) {expr = ExpressionFactory.createFeatureExpression(f);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "featureExpression"



    // $ANTLR start "simpleTypeExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:940:1: simpleTypeExpression returns [Expression type = null] : at= annotationType ;
    public final Expression simpleTypeExpression() throws RecognitionException {
        Expression type =  null;


        Expression at =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:941:2: (at= annotationType )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:942:2: at= annotationType
            {
            pushFollow(FOLLOW_annotationType_in_simpleTypeExpression4096);
            at=annotationType();

            state._fsp--;
            if (state.failed) return type;

            if ( state.backtracking==0 ) {type = at;}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return type;
    }
    // $ANTLR end "simpleTypeExpression"



    // $ANTLR start "variable"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:945:1: variable returns [Expression var = null] :{...}?v= Identifier ;
    public final Expression variable() throws RecognitionException {
        Expression var =  null;


        Token v=null;

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:946:2: ({...}?v= Identifier )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:947:2: {...}?v= Identifier
            {
            if ( !((vars.contains(input.LT(1).getText()))) ) {
                if (state.backtracking>0) {state.failed=true; return var;}
                throw new FailedPredicateException(input, "variable", "vars.contains(input.LT(1).getText())");
            }

            v=(Token)match(input,Identifier,FOLLOW_Identifier_in_variable4120); if (state.failed) return var;

            if ( state.backtracking==0 ) {var=ExpressionFactory.createGenericVariableReference(v);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return var;
    }
    // $ANTLR end "variable"



    // $ANTLR start "listVariable"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:951:1: listVariable returns [Expression var = null] :{...}?v= Identifier ;
    public final Expression listVariable() throws RecognitionException {
        Expression var =  null;


        Token v=null;

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:952:2: ({...}?v= Identifier )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:953:2: {...}?v= Identifier
            {
            if ( !((isVariableOfType(input.LT(1).getText(), "BOOLEANLIST")
            	||isVariableOfType(input.LT(1).getText(), "INTLIST")
            	||isVariableOfType(input.LT(1).getText(), "FLOATLIST")
            	||isVariableOfType(input.LT(1).getText(), "DOUBLELIST")
            	||isVariableOfType(input.LT(1).getText(), "STRINGLIST")
            	||isVariableOfType(input.LT(1).getText(), "TYPELIST")
            	)) ) {
                if (state.backtracking>0) {state.failed=true; return var;}
                throw new FailedPredicateException(input, "listVariable", "isVariableOfType(input.LT(1).getText(), \"BOOLEANLIST\")\r\n\t||isVariableOfType(input.LT(1).getText(), \"INTLIST\")\r\n\t||isVariableOfType(input.LT(1).getText(), \"FLOATLIST\")\r\n\t||isVariableOfType(input.LT(1).getText(), \"DOUBLELIST\")\r\n\t||isVariableOfType(input.LT(1).getText(), \"STRINGLIST\")\r\n\t||isVariableOfType(input.LT(1).getText(), \"TYPELIST\")\r\n\t");
            }

            v=(Token)match(input,Identifier,FOLLOW_Identifier_in_listVariable4147); if (state.failed) return var;

            if ( state.backtracking==0 ) {var=ExpressionFactory.createGenericVariableReference(v);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return var;
    }
    // $ANTLR end "listVariable"



    // $ANTLR start "quantifierPart"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:964:1: quantifierPart returns [List<Expression> exprs = new ArrayList<Expression>()] : (s= STAR (q= QUESTION )? |p= PLUS (q= QUESTION )? |q1= QUESTION (q= QUESTION )? | (b1= LBRACK min= numberExpression ( COMMA (max= numberExpression )? )? b2= RBRACK (q= QUESTION )? ) );
    public final List<Expression> quantifierPart() throws RecognitionException {
        List<Expression> exprs =  new ArrayList<Expression>();


        Token s=null;
        Token q=null;
        Token p=null;
        Token q1=null;
        Token b1=null;
        Token b2=null;
        Expression min =null;

        Expression max =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:965:2: (s= STAR (q= QUESTION )? |p= PLUS (q= QUESTION )? |q1= QUESTION (q= QUESTION )? | (b1= LBRACK min= numberExpression ( COMMA (max= numberExpression )? )? b2= RBRACK (q= QUESTION )? ) )
            int alt105=4;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt105=1;
                }
                break;
            case PLUS:
                {
                alt105=2;
                }
                break;
            case QUESTION:
                {
                alt105=3;
                }
                break;
            case LBRACK:
                {
                alt105=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return exprs;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;

            }

            switch (alt105) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:966:3: s= STAR (q= QUESTION )?
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_quantifierPart4174); if (state.failed) return exprs;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:966:14: (q= QUESTION )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==QUESTION) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:966:14: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_quantifierPart4180); if (state.failed) return exprs;

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {exprs.add(ExpressionFactory.createQuantifierLiteralExpression(s,q));}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:967:4: p= PLUS (q= QUESTION )?
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_quantifierPart4192); if (state.failed) return exprs;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:967:15: (q= QUESTION )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==QUESTION) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:967:15: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_quantifierPart4198); if (state.failed) return exprs;

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {exprs.add(ExpressionFactory.createQuantifierLiteralExpression(p,q));}

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:968:4: q1= QUESTION (q= QUESTION )?
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_quantifierPart4210); if (state.failed) return exprs;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:968:20: (q= QUESTION )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==QUESTION) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:968:20: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_quantifierPart4216); if (state.failed) return exprs;

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {exprs.add(ExpressionFactory.createQuantifierLiteralExpression(q1,q));}

                    }
                    break;
                case 4 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:969:4: (b1= LBRACK min= numberExpression ( COMMA (max= numberExpression )? )? b2= RBRACK (q= QUESTION )? )
                    {
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:969:4: (b1= LBRACK min= numberExpression ( COMMA (max= numberExpression )? )? b2= RBRACK (q= QUESTION )? )
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:969:5: b1= LBRACK min= numberExpression ( COMMA (max= numberExpression )? )? b2= RBRACK (q= QUESTION )?
                    {
                    b1=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_quantifierPart4229); if (state.failed) return exprs;

                    pushFollow(FOLLOW_numberExpression_in_quantifierPart4235);
                    min=numberExpression();

                    state._fsp--;
                    if (state.failed) return exprs;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:969:40: ( COMMA (max= numberExpression )? )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==COMMA) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:969:41: COMMA (max= numberExpression )?
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_quantifierPart4238); if (state.failed) return exprs;

                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:969:47: (max= numberExpression )?
                            int alt102=2;
                            int LA102_0 = input.LA(1);

                            if ( ((LA102_0 >= EXP && LA102_0 <= TAN)||LA102_0==DecimalLiteral||LA102_0==FloatingPointLiteral||(LA102_0 >= Identifier && LA102_0 <= LPAREN)||LA102_0==MINUS) ) {
                                alt102=1;
                            }
                            switch (alt102) {
                                case 1 :
                                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:969:48: max= numberExpression
                                    {
                                    pushFollow(FOLLOW_numberExpression_in_quantifierPart4245);
                                    max=numberExpression();

                                    state._fsp--;
                                    if (state.failed) return exprs;

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    b2=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_quantifierPart4255); if (state.failed) return exprs;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:969:89: (q= QUESTION )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==QUESTION) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:969:89: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_quantifierPart4261); if (state.failed) return exprs;

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    		  //if(b1!=null) {exprs.add(b1);}
                    		  if(min!=null) {exprs.add(min);}
                    		  if(max!=null) {exprs.add(max);}
                    		  //if(b2!=null) {exprs.add(b2);}
                    		  if(q!=null) {exprs.add(ExpressionFactory.createQuantifierLiteralExpression(q, null));}
                    		 }

                    }


                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return exprs;
    }
    // $ANTLR end "quantifierPart"



    // $ANTLR start "condition"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:981:1: condition returns [RutaCondition result = null] : (c= conditionAnd |c= conditionContains |c= conditionContextCount |c= conditionCount |c= conditionCurrentCount |c= conditionInList |c= conditionLast |c= conditionMofN |c= conditionNear |c= conditionNot |c= conditionOr |c= conditionPartOf |c= conditionPosition |c= conditionRegExp |c= conditionScore |c= conditionTotalCount |c= conditionVote |c= conditionIf |c= conditionFeature |c= conditionParse |c= conditionIs |c= conditionBefore |c= conditionAfter |c= conditionStartsWith |c= conditionEndsWith |c= conditionPartOfNeq |c= conditionSize | ( externalCondition )=>c= externalCondition |b= booleanExpression ) ;
    public final RutaCondition condition() throws RecognitionException {
        RutaCondition result =  null;


        RutaCondition c =null;

        Expression b =null;



        result = ConditionFactory.createEmptyCondition(input.LT(1));

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:985:2: ( (c= conditionAnd |c= conditionContains |c= conditionContextCount |c= conditionCount |c= conditionCurrentCount |c= conditionInList |c= conditionLast |c= conditionMofN |c= conditionNear |c= conditionNot |c= conditionOr |c= conditionPartOf |c= conditionPosition |c= conditionRegExp |c= conditionScore |c= conditionTotalCount |c= conditionVote |c= conditionIf |c= conditionFeature |c= conditionParse |c= conditionIs |c= conditionBefore |c= conditionAfter |c= conditionStartsWith |c= conditionEndsWith |c= conditionPartOfNeq |c= conditionSize | ( externalCondition )=>c= externalCondition |b= booleanExpression ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:986:2: (c= conditionAnd |c= conditionContains |c= conditionContextCount |c= conditionCount |c= conditionCurrentCount |c= conditionInList |c= conditionLast |c= conditionMofN |c= conditionNear |c= conditionNot |c= conditionOr |c= conditionPartOf |c= conditionPosition |c= conditionRegExp |c= conditionScore |c= conditionTotalCount |c= conditionVote |c= conditionIf |c= conditionFeature |c= conditionParse |c= conditionIs |c= conditionBefore |c= conditionAfter |c= conditionStartsWith |c= conditionEndsWith |c= conditionPartOfNeq |c= conditionSize | ( externalCondition )=>c= externalCondition |b= booleanExpression )
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:986:2: (c= conditionAnd |c= conditionContains |c= conditionContextCount |c= conditionCount |c= conditionCurrentCount |c= conditionInList |c= conditionLast |c= conditionMofN |c= conditionNear |c= conditionNot |c= conditionOr |c= conditionPartOf |c= conditionPosition |c= conditionRegExp |c= conditionScore |c= conditionTotalCount |c= conditionVote |c= conditionIf |c= conditionFeature |c= conditionParse |c= conditionIs |c= conditionBefore |c= conditionAfter |c= conditionStartsWith |c= conditionEndsWith |c= conditionPartOfNeq |c= conditionSize | ( externalCondition )=>c= externalCondition |b= booleanExpression )
            int alt106=29;
            switch ( input.LA(1) ) {
            case AND:
                {
                alt106=1;
                }
                break;
            case CONTAINS:
                {
                alt106=2;
                }
                break;
            case CONTEXTCOUNT:
                {
                alt106=3;
                }
                break;
            case COUNT:
                {
                alt106=4;
                }
                break;
            case CURRENTCOUNT:
                {
                alt106=5;
                }
                break;
            case INLIST:
                {
                alt106=6;
                }
                break;
            case LAST:
                {
                alt106=7;
                }
                break;
            case MOFN:
                {
                alt106=8;
                }
                break;
            case NEAR:
                {
                alt106=9;
                }
                break;
            case NOT:
            case MINUS:
                {
                alt106=10;
                }
                break;
            case OR:
                {
                alt106=11;
                }
                break;
            case PARTOF:
                {
                alt106=12;
                }
                break;
            case POSITION:
                {
                alt106=13;
                }
                break;
            case REGEXP:
                {
                alt106=14;
                }
                break;
            case SCORE:
                {
                alt106=15;
                }
                break;
            case TOTALCOUNT:
                {
                alt106=16;
                }
                break;
            case VOTE:
                {
                alt106=17;
                }
                break;
            case IF:
                {
                alt106=18;
                }
                break;
            case FEATURE:
                {
                alt106=19;
                }
                break;
            case PARSE:
                {
                alt106=20;
                }
                break;
            case IS:
                {
                alt106=21;
                }
                break;
            case BEFORE:
                {
                alt106=22;
                }
                break;
            case AFTER:
                {
                alt106=23;
                }
                break;
            case STARTSWITH:
                {
                alt106=24;
                }
                break;
            case ENDSWITH:
                {
                alt106=25;
                }
                break;
            case PARTOFNEQ:
                {
                alt106=26;
                }
                break;
            case SIZE:
                {
                alt106=27;
                }
                break;
            case Identifier:
                {
                int LA106_29 = input.LA(2);

                if ( (synpred20_RutaParser()) ) {
                    alt106=28;
                }
                else if ( (true) ) {
                    alt106=29;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return result;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 106, 29, input);

                    throw nvae;

                }
                }
                break;
            case XOR:
            case TRUE:
            case FALSE:
            case LPAREN:
                {
                alt106=29;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return result;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;

            }

            switch (alt106) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:987:2: c= conditionAnd
                    {
                    pushFollow(FOLLOW_conditionAnd_in_condition4304);
                    c=conditionAnd();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:988:4: c= conditionContains
                    {
                    pushFollow(FOLLOW_conditionContains_in_condition4313);
                    c=conditionContains();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:989:4: c= conditionContextCount
                    {
                    pushFollow(FOLLOW_conditionContextCount_in_condition4322);
                    c=conditionContextCount();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 4 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:990:4: c= conditionCount
                    {
                    pushFollow(FOLLOW_conditionCount_in_condition4331);
                    c=conditionCount();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 5 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:991:4: c= conditionCurrentCount
                    {
                    pushFollow(FOLLOW_conditionCurrentCount_in_condition4340);
                    c=conditionCurrentCount();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 6 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:992:4: c= conditionInList
                    {
                    pushFollow(FOLLOW_conditionInList_in_condition4349);
                    c=conditionInList();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 7 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:993:4: c= conditionLast
                    {
                    pushFollow(FOLLOW_conditionLast_in_condition4358);
                    c=conditionLast();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 8 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:994:4: c= conditionMofN
                    {
                    pushFollow(FOLLOW_conditionMofN_in_condition4367);
                    c=conditionMofN();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 9 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:995:4: c= conditionNear
                    {
                    pushFollow(FOLLOW_conditionNear_in_condition4376);
                    c=conditionNear();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 10 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:996:4: c= conditionNot
                    {
                    pushFollow(FOLLOW_conditionNot_in_condition4385);
                    c=conditionNot();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 11 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:997:4: c= conditionOr
                    {
                    pushFollow(FOLLOW_conditionOr_in_condition4394);
                    c=conditionOr();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 12 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:998:4: c= conditionPartOf
                    {
                    pushFollow(FOLLOW_conditionPartOf_in_condition4403);
                    c=conditionPartOf();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 13 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:999:4: c= conditionPosition
                    {
                    pushFollow(FOLLOW_conditionPosition_in_condition4412);
                    c=conditionPosition();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 14 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1000:4: c= conditionRegExp
                    {
                    pushFollow(FOLLOW_conditionRegExp_in_condition4421);
                    c=conditionRegExp();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 15 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1001:4: c= conditionScore
                    {
                    pushFollow(FOLLOW_conditionScore_in_condition4430);
                    c=conditionScore();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 16 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1002:4: c= conditionTotalCount
                    {
                    pushFollow(FOLLOW_conditionTotalCount_in_condition4439);
                    c=conditionTotalCount();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 17 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1003:4: c= conditionVote
                    {
                    pushFollow(FOLLOW_conditionVote_in_condition4448);
                    c=conditionVote();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 18 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1004:4: c= conditionIf
                    {
                    pushFollow(FOLLOW_conditionIf_in_condition4457);
                    c=conditionIf();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 19 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1005:4: c= conditionFeature
                    {
                    pushFollow(FOLLOW_conditionFeature_in_condition4466);
                    c=conditionFeature();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 20 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1006:4: c= conditionParse
                    {
                    pushFollow(FOLLOW_conditionParse_in_condition4475);
                    c=conditionParse();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 21 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1007:4: c= conditionIs
                    {
                    pushFollow(FOLLOW_conditionIs_in_condition4484);
                    c=conditionIs();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 22 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1008:4: c= conditionBefore
                    {
                    pushFollow(FOLLOW_conditionBefore_in_condition4493);
                    c=conditionBefore();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 23 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1009:4: c= conditionAfter
                    {
                    pushFollow(FOLLOW_conditionAfter_in_condition4502);
                    c=conditionAfter();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 24 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1010:4: c= conditionStartsWith
                    {
                    pushFollow(FOLLOW_conditionStartsWith_in_condition4511);
                    c=conditionStartsWith();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 25 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1011:4: c= conditionEndsWith
                    {
                    pushFollow(FOLLOW_conditionEndsWith_in_condition4520);
                    c=conditionEndsWith();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 26 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1012:4: c= conditionPartOfNeq
                    {
                    pushFollow(FOLLOW_conditionPartOfNeq_in_condition4529);
                    c=conditionPartOfNeq();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 27 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1013:4: c= conditionSize
                    {
                    pushFollow(FOLLOW_conditionSize_in_condition4538);
                    c=conditionSize();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 28 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1014:4: ( externalCondition )=>c= externalCondition
                    {
                    pushFollow(FOLLOW_externalCondition_in_condition4552);
                    c=externalCondition();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 29 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1015:4: b= booleanExpression
                    {
                    pushFollow(FOLLOW_booleanExpression_in_condition4561);
                    b=booleanExpression();

                    state._fsp--;
                    if (state.failed) return result;

                    if ( state.backtracking==0 ) {c = ConditionFactory.createCondition(b);}

                    }
                    break;

            }


            if ( state.backtracking==0 ) {result = c;}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "condition"



    // $ANTLR start "variableCondition"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1020:1: variableCondition returns [RutaCondition condition = null] : id= Identifier ;
    public final RutaCondition variableCondition() throws RecognitionException {
        RutaCondition condition =  null;


        Token id=null;

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1021:2: (id= Identifier )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1024:2: id= Identifier
            {
            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableCondition4596); if (state.failed) return condition;

            if ( state.backtracking==0 ) {
            		condition = ConditionFactory.createCondition(id);
            	}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return condition;
    }
    // $ANTLR end "variableCondition"



    // $ANTLR start "externalCondition"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1031:1: externalCondition returns [RutaCondition condition = null] : id= Identifier LPAREN (args= varArgumentList )? RPAREN ;
    public final RutaCondition externalCondition() throws RecognitionException {
        RutaCondition condition =  null;


        Token id=null;
        List<Expression> args =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1032:2: (id= Identifier LPAREN (args= varArgumentList )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1033:2: id= Identifier LPAREN (args= varArgumentList )? RPAREN
            {
            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_externalCondition4623); if (state.failed) return condition;

            if ( state.backtracking==0 ) {condition = external.createExternalCondition(id, args);}

            match(input,LPAREN,FOLLOW_LPAREN_in_externalCondition4629); if (state.failed) return condition;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1036:7: (args= varArgumentList )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==REMOVESTRING||(LA107_0 >= EXP && LA107_0 <= FALSE)||LA107_0==DecimalLiteral||LA107_0==FloatingPointLiteral||LA107_0==StringLiteral||(LA107_0 >= Identifier && LA107_0 <= LPAREN)||LA107_0==MINUS) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1036:7: args= varArgumentList
                    {
                    pushFollow(FOLLOW_varArgumentList_in_externalCondition4636);
                    args=varArgumentList();

                    state._fsp--;
                    if (state.failed) return condition;

                    }
                    break;

            }


            match(input,RPAREN,FOLLOW_RPAREN_in_externalCondition4640); if (state.failed) return condition;

            if ( state.backtracking==0 ) {condition = external.createExternalCondition(id, args);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return condition;
    }
    // $ANTLR end "externalCondition"



    // $ANTLR start "conditionAnd"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1040:1: conditionAnd returns [RutaCondition cond = null] : name= AND LPAREN conds= conditions RPAREN ;
    public final RutaCondition conditionAnd() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        List<RutaCondition> conds =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1041:5: (name= AND LPAREN conds= conditions RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1042:5: name= AND LPAREN conds= conditions RPAREN
            {
            name=(Token)match(input,AND,FOLLOW_AND_in_conditionAnd4671); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionAnd4673); if (state.failed) return cond;

            pushFollow(FOLLOW_conditions_in_conditionAnd4679);
            conds=conditions();

            state._fsp--;
            if (state.failed) return cond;

            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, conds);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionAnd4693); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionAnd"



    // $ANTLR start "conditionContains"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1047:1: conditionContains returns [RutaCondition cond = null] options {backtrack=true; } : name= CONTAINS LPAREN (type= typeExpression |list= listExpression COMMA a= argument ) ( COMMA min= numberExpression COMMA max= numberExpression ( COMMA percent= booleanExpression )? )? RPAREN ;
    public final RutaCondition conditionContains() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression type =null;

        Expression list =null;

        Expression a =null;

        Expression min =null;

        Expression max =null;

        Expression percent =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1051:5: (name= CONTAINS LPAREN (type= typeExpression |list= listExpression COMMA a= argument ) ( COMMA min= numberExpression COMMA max= numberExpression ( COMMA percent= booleanExpression )? )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1052:5: name= CONTAINS LPAREN (type= typeExpression |list= listExpression COMMA a= argument ) ( COMMA min= numberExpression COMMA max= numberExpression ( COMMA percent= booleanExpression )? )? RPAREN
            {
            name=(Token)match(input,CONTAINS,FOLLOW_CONTAINS_in_conditionContains4739); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionContains4741); if (state.failed) return cond;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1052:29: (type= typeExpression |list= listExpression COMMA a= argument )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==Identifier) ) {
                int LA108_1 = input.LA(2);

                if ( (!((((isVariableOfType(input.LT(1).getText(), "INTLIST"))||(isVariableOfType(input.LT(1).getText(), "TYPELIST"))||(isVariableOfType(input.LT(1).getText(), "DOUBLELIST"))||(isVariableOfType(input.LT(1).getText(), "FLOATLIST"))||(isVariableOfType(input.LT(1).getText(), "BOOLEANLIST"))||(isVariableOfType(input.LT(1).getText(), "STRINGLIST")))))) ) {
                    alt108=1;
                }
                else if ( (((isVariableOfType(input.LT(1).getText(), "INTLIST"))||(isVariableOfType(input.LT(1).getText(), "TYPELIST"))||(isVariableOfType(input.LT(1).getText(), "DOUBLELIST"))||(isVariableOfType(input.LT(1).getText(), "FLOATLIST"))||(isVariableOfType(input.LT(1).getText(), "BOOLEANLIST"))||(isVariableOfType(input.LT(1).getText(), "STRINGLIST")))) ) {
                    alt108=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return cond;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA108_0==LCURLY) ) {
                alt108=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return cond;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;

            }
            switch (alt108) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1052:30: type= typeExpression
                    {
                    pushFollow(FOLLOW_typeExpression_in_conditionContains4748);
                    type=typeExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1052:54: list= listExpression COMMA a= argument
                    {
                    pushFollow(FOLLOW_listExpression_in_conditionContains4756);
                    list=listExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    match(input,COMMA,FOLLOW_COMMA_in_conditionContains4758); if (state.failed) return cond;

                    pushFollow(FOLLOW_argument_in_conditionContains4764);
                    a=argument();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1053:5: ( COMMA min= numberExpression COMMA max= numberExpression ( COMMA percent= booleanExpression )? )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==COMMA) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1053:6: COMMA min= numberExpression COMMA max= numberExpression ( COMMA percent= booleanExpression )?
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_conditionContains4773); if (state.failed) return cond;

                    pushFollow(FOLLOW_numberExpression_in_conditionContains4779);
                    min=numberExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    match(input,COMMA,FOLLOW_COMMA_in_conditionContains4781); if (state.failed) return cond;

                    pushFollow(FOLLOW_numberExpression_in_conditionContains4787);
                    max=numberExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1053:64: ( COMMA percent= booleanExpression )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==COMMA) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1053:65: COMMA percent= booleanExpression
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_conditionContains4790); if (state.failed) return cond;

                            pushFollow(FOLLOW_booleanExpression_in_conditionContains4796);
                            percent=booleanExpression();

                            state._fsp--;
                            if (state.failed) return cond;

                            }
                            break;

                    }


                    }
                    break;

            }


            if ( state.backtracking==0 ) {if(type != null) {cond = ConditionFactory.createCondition(name,type, min, max, percent);}
                else {cond = ConditionFactory.createCondition(name,list,a, min, max, percent);};}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionContains4813); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionContains"



    // $ANTLR start "conditionContextCount"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1059:1: conditionContextCount returns [RutaCondition cond = null] : name= CONTEXTCOUNT LPAREN typeExpr= typeExpression ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN ;
    public final RutaCondition conditionContextCount() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression typeExpr =null;

        Expression min =null;

        Expression max =null;

        Expression var =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1060:5: (name= CONTEXTCOUNT LPAREN typeExpr= typeExpression ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1061:5: name= CONTEXTCOUNT LPAREN typeExpr= typeExpression ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN
            {
            name=(Token)match(input,CONTEXTCOUNT,FOLLOW_CONTEXTCOUNT_in_conditionContextCount4849); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionContextCount4851); if (state.failed) return cond;

            pushFollow(FOLLOW_typeExpression_in_conditionContextCount4857);
            typeExpr=typeExpression();

            state._fsp--;
            if (state.failed) return cond;

            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, typeExpr, min, max, var);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1063:5: ( COMMA min= numberExpression COMMA max= numberExpression )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==COMMA) ) {
                int LA111_1 = input.LA(2);

                if ( (LA111_1==Identifier) ) {
                    int LA111_3 = input.LA(3);

                    if ( (LA111_3==LPAREN||LA111_3==DOT||LA111_3==COMMA||(LA111_3 >= PLUS && LA111_3 <= SLASH)||LA111_3==PERCENT) ) {
                        alt111=1;
                    }
                }
                else if ( ((LA111_1 >= EXP && LA111_1 <= TAN)||LA111_1==DecimalLiteral||LA111_1==FloatingPointLiteral||LA111_1==LPAREN||LA111_1==MINUS) ) {
                    alt111=1;
                }
            }
            switch (alt111) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1063:6: COMMA min= numberExpression COMMA max= numberExpression
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_conditionContextCount4871); if (state.failed) return cond;

                    pushFollow(FOLLOW_numberExpression_in_conditionContextCount4877);
                    min=numberExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    match(input,COMMA,FOLLOW_COMMA_in_conditionContextCount4879); if (state.failed) return cond;

                    pushFollow(FOLLOW_numberExpression_in_conditionContextCount4885);
                    max=numberExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, typeExpr, min, max, var);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1065:5: ( COMMA var= numberVariable )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==COMMA) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1065:6: COMMA var= numberVariable
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_conditionContextCount4900); if (state.failed) return cond;

                    pushFollow(FOLLOW_numberVariable_in_conditionContextCount4906);
                    var=numberVariable();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, typeExpr, min, max, var);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionContextCount4921); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionContextCount"



    // $ANTLR start "conditionCount"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1070:1: conditionCount returns [RutaCondition cond = null] options {backtrack=true; } : (name= COUNT LPAREN type= listExpression COMMA a= argument ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN |name= COUNT LPAREN type= typeExpression ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN );
    public final RutaCondition conditionCount() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression type =null;

        Expression a =null;

        Expression min =null;

        Expression max =null;

        Expression var =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1074:6: (name= COUNT LPAREN type= listExpression COMMA a= argument ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN |name= COUNT LPAREN type= typeExpression ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==COUNT) ) {
                int LA117_1 = input.LA(2);

                if ( (synpred21_RutaParser()) ) {
                    alt117=1;
                }
                else if ( (true) ) {
                    alt117=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return cond;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 117, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return cond;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }
            switch (alt117) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1075:6: name= COUNT LPAREN type= listExpression COMMA a= argument ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN
                    {
                    name=(Token)match(input,COUNT,FOLLOW_COUNT_in_conditionCount4972); if (state.failed) return cond;

                    match(input,LPAREN,FOLLOW_LPAREN_in_conditionCount4974); if (state.failed) return cond;

                    pushFollow(FOLLOW_listExpression_in_conditionCount4980);
                    type=listExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type, a, min, max, var);}

                    match(input,COMMA,FOLLOW_COMMA_in_conditionCount4995); if (state.failed) return cond;

                    pushFollow(FOLLOW_argument_in_conditionCount5001);
                    a=argument();

                    state._fsp--;
                    if (state.failed) return cond;

                    if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type, a, min, max, var);}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1079:6: ( COMMA min= numberExpression COMMA max= numberExpression )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==COMMA) ) {
                        int LA113_1 = input.LA(2);

                        if ( (LA113_1==Identifier) ) {
                            int LA113_3 = input.LA(3);

                            if ( (LA113_3==LPAREN||LA113_3==DOT||LA113_3==COMMA||(LA113_3 >= PLUS && LA113_3 <= SLASH)||LA113_3==PERCENT) ) {
                                alt113=1;
                            }
                        }
                        else if ( ((LA113_1 >= EXP && LA113_1 <= TAN)||LA113_1==DecimalLiteral||LA113_1==FloatingPointLiteral||LA113_1==LPAREN||LA113_1==MINUS) ) {
                            alt113=1;
                        }
                    }
                    switch (alt113) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1079:7: COMMA min= numberExpression COMMA max= numberExpression
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_conditionCount5017); if (state.failed) return cond;

                            pushFollow(FOLLOW_numberExpression_in_conditionCount5023);
                            min=numberExpression();

                            state._fsp--;
                            if (state.failed) return cond;

                            match(input,COMMA,FOLLOW_COMMA_in_conditionCount5025); if (state.failed) return cond;

                            pushFollow(FOLLOW_numberExpression_in_conditionCount5031);
                            max=numberExpression();

                            state._fsp--;
                            if (state.failed) return cond;

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type, a, min, max, var);}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1081:6: ( COMMA var= numberVariable )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==COMMA) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1081:7: COMMA var= numberVariable
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_conditionCount5049); if (state.failed) return cond;

                            pushFollow(FOLLOW_numberVariable_in_conditionCount5055);
                            var=numberVariable();

                            state._fsp--;
                            if (state.failed) return cond;

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type, a, min, max, var);}

                    match(input,RPAREN,FOLLOW_RPAREN_in_conditionCount5071); if (state.failed) return cond;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1085:5: name= COUNT LPAREN type= typeExpression ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN
                    {
                    name=(Token)match(input,COUNT,FOLLOW_COUNT_in_conditionCount5087); if (state.failed) return cond;

                    match(input,LPAREN,FOLLOW_LPAREN_in_conditionCount5089); if (state.failed) return cond;

                    pushFollow(FOLLOW_typeExpression_in_conditionCount5095);
                    type=typeExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type, min, max, var);}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1087:5: ( COMMA min= numberExpression COMMA max= numberExpression )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==COMMA) ) {
                        int LA115_1 = input.LA(2);

                        if ( (LA115_1==Identifier) ) {
                            int LA115_3 = input.LA(3);

                            if ( (LA115_3==LPAREN||LA115_3==DOT||LA115_3==COMMA||(LA115_3 >= PLUS && LA115_3 <= SLASH)||LA115_3==PERCENT) ) {
                                alt115=1;
                            }
                        }
                        else if ( ((LA115_1 >= EXP && LA115_1 <= TAN)||LA115_1==DecimalLiteral||LA115_1==FloatingPointLiteral||LA115_1==LPAREN||LA115_1==MINUS) ) {
                            alt115=1;
                        }
                    }
                    switch (alt115) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1087:6: COMMA min= numberExpression COMMA max= numberExpression
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_conditionCount5109); if (state.failed) return cond;

                            pushFollow(FOLLOW_numberExpression_in_conditionCount5115);
                            min=numberExpression();

                            state._fsp--;
                            if (state.failed) return cond;

                            match(input,COMMA,FOLLOW_COMMA_in_conditionCount5117); if (state.failed) return cond;

                            pushFollow(FOLLOW_numberExpression_in_conditionCount5123);
                            max=numberExpression();

                            state._fsp--;
                            if (state.failed) return cond;

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type, min, max, var);}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1089:5: ( COMMA var= numberVariable )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==COMMA) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1089:6: COMMA var= numberVariable
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_conditionCount5138); if (state.failed) return cond;

                            pushFollow(FOLLOW_numberVariable_in_conditionCount5144);
                            var=numberVariable();

                            state._fsp--;
                            if (state.failed) return cond;

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type, min, max, var);}

                    match(input,RPAREN,FOLLOW_RPAREN_in_conditionCount5161); if (state.failed) return cond;

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionCount"



    // $ANTLR start "conditionCurrentCount"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1094:1: conditionCurrentCount returns [RutaCondition cond = null] : name= CURRENTCOUNT LPAREN type= typeExpression ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN ;
    public final RutaCondition conditionCurrentCount() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression type =null;

        Expression min =null;

        Expression max =null;

        Expression var =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1095:5: (name= CURRENTCOUNT LPAREN type= typeExpression ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1096:5: name= CURRENTCOUNT LPAREN type= typeExpression ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN
            {
            name=(Token)match(input,CURRENTCOUNT,FOLLOW_CURRENTCOUNT_in_conditionCurrentCount5201); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionCurrentCount5203); if (state.failed) return cond;

            pushFollow(FOLLOW_typeExpression_in_conditionCurrentCount5209);
            type=typeExpression();

            state._fsp--;
            if (state.failed) return cond;

            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name,type, min, max, var);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1098:5: ( COMMA min= numberExpression COMMA max= numberExpression )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==COMMA) ) {
                int LA118_1 = input.LA(2);

                if ( (LA118_1==Identifier) ) {
                    int LA118_3 = input.LA(3);

                    if ( (LA118_3==LPAREN||LA118_3==DOT||LA118_3==COMMA||(LA118_3 >= PLUS && LA118_3 <= SLASH)||LA118_3==PERCENT) ) {
                        alt118=1;
                    }
                }
                else if ( ((LA118_1 >= EXP && LA118_1 <= TAN)||LA118_1==DecimalLiteral||LA118_1==FloatingPointLiteral||LA118_1==LPAREN||LA118_1==MINUS) ) {
                    alt118=1;
                }
            }
            switch (alt118) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1098:6: COMMA min= numberExpression COMMA max= numberExpression
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_conditionCurrentCount5223); if (state.failed) return cond;

                    pushFollow(FOLLOW_numberExpression_in_conditionCurrentCount5229);
                    min=numberExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    match(input,COMMA,FOLLOW_COMMA_in_conditionCurrentCount5231); if (state.failed) return cond;

                    pushFollow(FOLLOW_numberExpression_in_conditionCurrentCount5237);
                    max=numberExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name,type, min, max, var);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1100:5: ( COMMA var= numberVariable )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==COMMA) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1100:6: COMMA var= numberVariable
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_conditionCurrentCount5253); if (state.failed) return cond;

                    pushFollow(FOLLOW_numberVariable_in_conditionCurrentCount5259);
                    var=numberVariable();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name,type, min, max, var);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionCurrentCount5274); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionCurrentCount"



    // $ANTLR start "conditionTotalCount"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1105:1: conditionTotalCount returns [RutaCondition cond = null] : name= TOTALCOUNT LPAREN type= typeExpression ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN ;
    public final RutaCondition conditionTotalCount() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression type =null;

        Expression min =null;

        Expression max =null;

        Expression var =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1106:5: (name= TOTALCOUNT LPAREN type= typeExpression ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1107:5: name= TOTALCOUNT LPAREN type= typeExpression ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN
            {
            name=(Token)match(input,TOTALCOUNT,FOLLOW_TOTALCOUNT_in_conditionTotalCount5313); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionTotalCount5315); if (state.failed) return cond;

            pushFollow(FOLLOW_typeExpression_in_conditionTotalCount5321);
            type=typeExpression();

            state._fsp--;
            if (state.failed) return cond;

            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name,type, min, max, var);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1109:5: ( COMMA min= numberExpression COMMA max= numberExpression )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==COMMA) ) {
                int LA120_1 = input.LA(2);

                if ( (LA120_1==Identifier) ) {
                    int LA120_3 = input.LA(3);

                    if ( (LA120_3==LPAREN||LA120_3==DOT||LA120_3==COMMA||(LA120_3 >= PLUS && LA120_3 <= SLASH)||LA120_3==PERCENT) ) {
                        alt120=1;
                    }
                }
                else if ( ((LA120_1 >= EXP && LA120_1 <= TAN)||LA120_1==DecimalLiteral||LA120_1==FloatingPointLiteral||LA120_1==LPAREN||LA120_1==MINUS) ) {
                    alt120=1;
                }
            }
            switch (alt120) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1109:6: COMMA min= numberExpression COMMA max= numberExpression
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_conditionTotalCount5335); if (state.failed) return cond;

                    pushFollow(FOLLOW_numberExpression_in_conditionTotalCount5341);
                    min=numberExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    match(input,COMMA,FOLLOW_COMMA_in_conditionTotalCount5343); if (state.failed) return cond;

                    pushFollow(FOLLOW_numberExpression_in_conditionTotalCount5349);
                    max=numberExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name,type, min, max, var);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1111:5: ( COMMA var= numberVariable )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==COMMA) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1111:6: COMMA var= numberVariable
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_conditionTotalCount5364); if (state.failed) return cond;

                    pushFollow(FOLLOW_numberVariable_in_conditionTotalCount5370);
                    var=numberVariable();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type, min, max, var);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionTotalCount5385); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionTotalCount"



    // $ANTLR start "conditionInList"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1115:1: conditionInList returns [RutaCondition cond = null] options {backtrack=true; } : name= INLIST LPAREN ( (list2= stringListExpression )=>list2= stringListExpression |list1= wordListExpression ) ( COMMA dist= numberExpression ( COMMA rel= booleanExpression )? )? RPAREN ;
    public final RutaCondition conditionInList() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression list2 =null;

        Expression list1 =null;

        Expression dist =null;

        Expression rel =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1119:5: (name= INLIST LPAREN ( (list2= stringListExpression )=>list2= stringListExpression |list1= wordListExpression ) ( COMMA dist= numberExpression ( COMMA rel= booleanExpression )? )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1120:5: name= INLIST LPAREN ( (list2= stringListExpression )=>list2= stringListExpression |list1= wordListExpression ) ( COMMA dist= numberExpression ( COMMA rel= booleanExpression )? )? RPAREN
            {
            name=(Token)match(input,INLIST,FOLLOW_INLIST_in_conditionInList5426); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionInList5428); if (state.failed) return cond;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1120:26: ( (list2= stringListExpression )=>list2= stringListExpression |list1= wordListExpression )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==LCURLY) && (synpred22_RutaParser())) {
                alt122=1;
            }
            else if ( (LA122_0==Identifier) ) {
                int LA122_2 = input.LA(2);

                if ( (((synpred22_RutaParser()&&synpred22_RutaParser())&&(isVariableOfType(input.LT(1).getText(), "STRINGLIST")))) ) {
                    alt122=1;
                }
                else if ( (true) ) {
                    alt122=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return cond;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 122, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA122_0==RessourceLiteral) ) {
                alt122=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return cond;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;

            }
            switch (alt122) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1120:27: (list2= stringListExpression )=>list2= stringListExpression
                    {
                    pushFollow(FOLLOW_stringListExpression_in_conditionInList5443);
                    list2=stringListExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1120:90: list1= wordListExpression
                    {
                    pushFollow(FOLLOW_wordListExpression_in_conditionInList5451);
                    list1=wordListExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1121:5: ( COMMA dist= numberExpression ( COMMA rel= booleanExpression )? )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==COMMA) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1121:6: COMMA dist= numberExpression ( COMMA rel= booleanExpression )?
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_conditionInList5460); if (state.failed) return cond;

                    pushFollow(FOLLOW_numberExpression_in_conditionInList5466);
                    dist=numberExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1121:36: ( COMMA rel= booleanExpression )?
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==COMMA) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1121:37: COMMA rel= booleanExpression
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_conditionInList5469); if (state.failed) return cond;

                            pushFollow(FOLLOW_booleanExpression_in_conditionInList5475);
                            rel=booleanExpression();

                            state._fsp--;
                            if (state.failed) return cond;

                            }
                            break;

                    }


                    }
                    break;

            }


            if ( state.backtracking==0 ) {if(list1 != null) {cond = ConditionFactory.createCondition(name, list1, dist, rel);}
                else {cond = ConditionFactory.createCondition(name, list2, dist, rel);};}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionInList5493); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionInList"



    // $ANTLR start "conditionLast"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1127:1: conditionLast returns [RutaCondition cond = null] : name= LAST LPAREN type= typeExpression RPAREN ;
    public final RutaCondition conditionLast() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression type =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1128:5: (name= LAST LPAREN type= typeExpression RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1129:5: name= LAST LPAREN type= typeExpression RPAREN
            {
            name=(Token)match(input,LAST,FOLLOW_LAST_in_conditionLast5537); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionLast5539); if (state.failed) return cond;

            pushFollow(FOLLOW_typeExpression_in_conditionLast5545);
            type=typeExpression();

            state._fsp--;
            if (state.failed) return cond;

            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionLast5558); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionLast"



    // $ANTLR start "conditionMofN"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1134:1: conditionMofN returns [RutaCondition cond = null] : name= MOFN LPAREN min= numberExpression COMMA max= numberExpression COMMA conds= conditions RPAREN ;
    public final RutaCondition conditionMofN() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression min =null;

        Expression max =null;

        List<RutaCondition> conds =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1135:5: (name= MOFN LPAREN min= numberExpression COMMA max= numberExpression COMMA conds= conditions RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1136:5: name= MOFN LPAREN min= numberExpression COMMA max= numberExpression COMMA conds= conditions RPAREN
            {
            name=(Token)match(input,MOFN,FOLLOW_MOFN_in_conditionMofN5594); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionMofN5596); if (state.failed) return cond;

            pushFollow(FOLLOW_numberExpression_in_conditionMofN5602);
            min=numberExpression();

            state._fsp--;
            if (state.failed) return cond;

            match(input,COMMA,FOLLOW_COMMA_in_conditionMofN5604); if (state.failed) return cond;

            pushFollow(FOLLOW_numberExpression_in_conditionMofN5610);
            max=numberExpression();

            state._fsp--;
            if (state.failed) return cond;

            match(input,COMMA,FOLLOW_COMMA_in_conditionMofN5612); if (state.failed) return cond;

            pushFollow(FOLLOW_conditions_in_conditionMofN5618);
            conds=conditions();

            state._fsp--;
            if (state.failed) return cond;

            if ( state.backtracking==0 ) {List exprs = new ArrayList();
                exprs.add(min);
                exprs.add(max);
                exprs.addAll(conds);
                cond = ConditionFactory.createCondition(name, exprs);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionMofN5633); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionMofN"



    // $ANTLR start "conditionNear"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1145:1: conditionNear returns [RutaCondition cond = null] : name= NEAR LPAREN type= typeExpression COMMA min= numberExpression COMMA max= numberExpression ( COMMA direction= booleanExpression ( COMMA filtered= booleanExpression )? )? RPAREN ;
    public final RutaCondition conditionNear() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression type =null;

        Expression min =null;

        Expression max =null;

        Expression direction =null;

        Expression filtered =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1146:5: (name= NEAR LPAREN type= typeExpression COMMA min= numberExpression COMMA max= numberExpression ( COMMA direction= booleanExpression ( COMMA filtered= booleanExpression )? )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1147:5: name= NEAR LPAREN type= typeExpression COMMA min= numberExpression COMMA max= numberExpression ( COMMA direction= booleanExpression ( COMMA filtered= booleanExpression )? )? RPAREN
            {
            name=(Token)match(input,NEAR,FOLLOW_NEAR_in_conditionNear5665); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionNear5667); if (state.failed) return cond;

            pushFollow(FOLLOW_typeExpression_in_conditionNear5673);
            type=typeExpression();

            state._fsp--;
            if (state.failed) return cond;

            match(input,COMMA,FOLLOW_COMMA_in_conditionNear5675); if (state.failed) return cond;

            pushFollow(FOLLOW_numberExpression_in_conditionNear5681);
            min=numberExpression();

            state._fsp--;
            if (state.failed) return cond;

            match(input,COMMA,FOLLOW_COMMA_in_conditionNear5683); if (state.failed) return cond;

            pushFollow(FOLLOW_numberExpression_in_conditionNear5689);
            max=numberExpression();

            state._fsp--;
            if (state.failed) return cond;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1148:5: ( COMMA direction= booleanExpression ( COMMA filtered= booleanExpression )? )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==COMMA) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1148:6: COMMA direction= booleanExpression ( COMMA filtered= booleanExpression )?
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_conditionNear5697); if (state.failed) return cond;

                    pushFollow(FOLLOW_booleanExpression_in_conditionNear5703);
                    direction=booleanExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1148:42: ( COMMA filtered= booleanExpression )?
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==COMMA) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1148:43: COMMA filtered= booleanExpression
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_conditionNear5706); if (state.failed) return cond;

                            pushFollow(FOLLOW_booleanExpression_in_conditionNear5712);
                            filtered=booleanExpression();

                            state._fsp--;
                            if (state.failed) return cond;

                            }
                            break;

                    }


                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type, min, max, direction, filtered);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionNear5732); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionNear"



    // $ANTLR start "conditionNot"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1152:1: conditionNot returns [RutaCondition cond = null] : ( (name= MINUS c= condition ) | (name= NOT LPAREN c= condition RPAREN ) ) ;
    public final RutaCondition conditionNot() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        RutaCondition c =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1153:5: ( ( (name= MINUS c= condition ) | (name= NOT LPAREN c= condition RPAREN ) ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1154:5: ( (name= MINUS c= condition ) | (name= NOT LPAREN c= condition RPAREN ) )
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1154:5: ( (name= MINUS c= condition ) | (name= NOT LPAREN c= condition RPAREN ) )
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==MINUS) ) {
                alt127=1;
            }
            else if ( (LA127_0==NOT) ) {
                alt127=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return cond;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;

            }
            switch (alt127) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1154:6: (name= MINUS c= condition )
                    {
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1154:6: (name= MINUS c= condition )
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1154:7: name= MINUS c= condition
                    {
                    name=(Token)match(input,MINUS,FOLLOW_MINUS_in_conditionNot5765); if (state.failed) return cond;

                    pushFollow(FOLLOW_condition_in_conditionNot5771);
                    c=condition();

                    state._fsp--;
                    if (state.failed) return cond;

                    }


                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1154:38: (name= NOT LPAREN c= condition RPAREN )
                    {
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1154:38: (name= NOT LPAREN c= condition RPAREN )
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1154:39: name= NOT LPAREN c= condition RPAREN
                    {
                    name=(Token)match(input,NOT,FOLLOW_NOT_in_conditionNot5782); if (state.failed) return cond;

                    match(input,LPAREN,FOLLOW_LPAREN_in_conditionNot5784); if (state.failed) return cond;

                    pushFollow(FOLLOW_condition_in_conditionNot5790);
                    c=condition();

                    state._fsp--;
                    if (state.failed) return cond;

                    match(input,RPAREN,FOLLOW_RPAREN_in_conditionNot5792); if (state.failed) return cond;

                    }


                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, c);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionNot"



    // $ANTLR start "conditionOr"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1157:1: conditionOr returns [RutaCondition cond = null] : name= OR LPAREN conds= conditions RPAREN ;
    public final RutaCondition conditionOr() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        List<RutaCondition> conds =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1158:5: (name= OR LPAREN conds= conditions RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1159:5: name= OR LPAREN conds= conditions RPAREN
            {
            name=(Token)match(input,OR,FOLLOW_OR_in_conditionOr5832); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionOr5834); if (state.failed) return cond;

            pushFollow(FOLLOW_conditions_in_conditionOr5840);
            conds=conditions();

            state._fsp--;
            if (state.failed) return cond;

            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, conds);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionOr5853); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionOr"



    // $ANTLR start "conditionPartOf"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1163:1: conditionPartOf returns [RutaCondition cond = null] : name= PARTOF LPAREN (type= typeExpression |type= typeListExpression ) RPAREN ;
    public final RutaCondition conditionPartOf() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression type =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1164:5: (name= PARTOF LPAREN (type= typeExpression |type= typeListExpression ) RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1165:5: name= PARTOF LPAREN (type= typeExpression |type= typeListExpression ) RPAREN
            {
            name=(Token)match(input,PARTOF,FOLLOW_PARTOF_in_conditionPartOf5881); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionPartOf5883); if (state.failed) return cond;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1165:26: (type= typeExpression |type= typeListExpression )
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==Identifier) ) {
                int LA128_1 = input.LA(2);

                if ( (!(((isVariableOfType(input.LT(1).getText(), "TYPELIST"))))) ) {
                    alt128=1;
                }
                else if ( ((isVariableOfType(input.LT(1).getText(), "TYPELIST"))) ) {
                    alt128=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return cond;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA128_0==LCURLY) ) {
                alt128=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return cond;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;

            }
            switch (alt128) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1165:27: type= typeExpression
                    {
                    pushFollow(FOLLOW_typeExpression_in_conditionPartOf5890);
                    type=typeExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1165:49: type= typeListExpression
                    {
                    pushFollow(FOLLOW_typeListExpression_in_conditionPartOf5896);
                    type=typeListExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionPartOf5913); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionPartOf"



    // $ANTLR start "conditionPartOfNeq"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1170:1: conditionPartOfNeq returns [RutaCondition cond = null] : name= PARTOFNEQ LPAREN (type= typeExpression |type= typeListExpression ) RPAREN ;
    public final RutaCondition conditionPartOfNeq() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression type =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1171:5: (name= PARTOFNEQ LPAREN (type= typeExpression |type= typeListExpression ) RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1172:5: name= PARTOFNEQ LPAREN (type= typeExpression |type= typeListExpression ) RPAREN
            {
            name=(Token)match(input,PARTOFNEQ,FOLLOW_PARTOFNEQ_in_conditionPartOfNeq5946); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionPartOfNeq5948); if (state.failed) return cond;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1172:29: (type= typeExpression |type= typeListExpression )
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==Identifier) ) {
                int LA129_1 = input.LA(2);

                if ( (!(((isVariableOfType(input.LT(1).getText(), "TYPELIST"))))) ) {
                    alt129=1;
                }
                else if ( ((isVariableOfType(input.LT(1).getText(), "TYPELIST"))) ) {
                    alt129=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return cond;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 129, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA129_0==LCURLY) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return cond;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;

            }
            switch (alt129) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1172:30: type= typeExpression
                    {
                    pushFollow(FOLLOW_typeExpression_in_conditionPartOfNeq5955);
                    type=typeExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1172:52: type= typeListExpression
                    {
                    pushFollow(FOLLOW_typeListExpression_in_conditionPartOfNeq5961);
                    type=typeListExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionPartOfNeq5978); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionPartOfNeq"



    // $ANTLR start "conditionPosition"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1178:1: conditionPosition returns [RutaCondition cond = null] : name= POSITION LPAREN type= typeExpression COMMA pos= numberExpression ( COMMA rel= booleanExpression )? RPAREN ;
    public final RutaCondition conditionPosition() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression type =null;

        Expression pos =null;

        Expression rel =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1179:5: (name= POSITION LPAREN type= typeExpression COMMA pos= numberExpression ( COMMA rel= booleanExpression )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1180:5: name= POSITION LPAREN type= typeExpression COMMA pos= numberExpression ( COMMA rel= booleanExpression )? RPAREN
            {
            name=(Token)match(input,POSITION,FOLLOW_POSITION_in_conditionPosition6015); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionPosition6017); if (state.failed) return cond;

            pushFollow(FOLLOW_typeExpression_in_conditionPosition6023);
            type=typeExpression();

            state._fsp--;
            if (state.failed) return cond;

            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type, pos, rel);}

            match(input,COMMA,FOLLOW_COMMA_in_conditionPosition6036); if (state.failed) return cond;

            pushFollow(FOLLOW_numberExpression_in_conditionPosition6042);
            pos=numberExpression();

            state._fsp--;
            if (state.failed) return cond;

            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type, pos, rel);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1184:5: ( COMMA rel= booleanExpression )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==COMMA) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1184:6: COMMA rel= booleanExpression
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_conditionPosition6056); if (state.failed) return cond;

                    pushFollow(FOLLOW_booleanExpression_in_conditionPosition6062);
                    rel=booleanExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type, pos, rel);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionPosition6077); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionPosition"



    // $ANTLR start "conditionRegExp"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1188:1: conditionRegExp returns [RutaCondition cond = null] : name= REGEXP LPAREN ( ( stringExpression COMMA stringExpression )=>v= stringExpression COMMA pattern= stringExpression |pattern= stringExpression ) ( COMMA caseSensitive= booleanExpression )? RPAREN ;
    public final RutaCondition conditionRegExp() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression v =null;

        Expression pattern =null;

        Expression caseSensitive =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1189:5: (name= REGEXP LPAREN ( ( stringExpression COMMA stringExpression )=>v= stringExpression COMMA pattern= stringExpression |pattern= stringExpression ) ( COMMA caseSensitive= booleanExpression )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1190:5: name= REGEXP LPAREN ( ( stringExpression COMMA stringExpression )=>v= stringExpression COMMA pattern= stringExpression |pattern= stringExpression ) ( COMMA caseSensitive= booleanExpression )? RPAREN
            {
            name=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_conditionRegExp6105); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionRegExp6107); if (state.failed) return cond;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1191:5: ( ( stringExpression COMMA stringExpression )=>v= stringExpression COMMA pattern= stringExpression |pattern= stringExpression )
            int alt131=2;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                int LA131_1 = input.LA(2);

                if ( (synpred23_RutaParser()) ) {
                    alt131=1;
                }
                else if ( (true) ) {
                    alt131=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return cond;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 131, 1, input);

                    throw nvae;

                }
                }
                break;
            case REMOVESTRING:
                {
                int LA131_2 = input.LA(2);

                if ( (synpred23_RutaParser()) ) {
                    alt131=1;
                }
                else if ( (true) ) {
                    alt131=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return cond;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 131, 2, input);

                    throw nvae;

                }
                }
                break;
            case StringLiteral:
                {
                int LA131_3 = input.LA(2);

                if ( (synpred23_RutaParser()) ) {
                    alt131=1;
                }
                else if ( (true) ) {
                    alt131=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return cond;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 131, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return cond;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }

            switch (alt131) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1191:6: ( stringExpression COMMA stringExpression )=>v= stringExpression COMMA pattern= stringExpression
                    {
                    pushFollow(FOLLOW_stringExpression_in_conditionRegExp6128);
                    v=stringExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    match(input,COMMA,FOLLOW_COMMA_in_conditionRegExp6130); if (state.failed) return cond;

                    pushFollow(FOLLOW_stringExpression_in_conditionRegExp6136);
                    pattern=stringExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1192:7: pattern= stringExpression
                    {
                    pushFollow(FOLLOW_stringExpression_in_conditionRegExp6148);
                    pattern=stringExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1193:7: ( COMMA caseSensitive= booleanExpression )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==COMMA) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1193:8: COMMA caseSensitive= booleanExpression
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_conditionRegExp6157); if (state.failed) return cond;

                    pushFollow(FOLLOW_booleanExpression_in_conditionRegExp6163);
                    caseSensitive=booleanExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, v, pattern, caseSensitive);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionRegExp6181); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionRegExp"



    // $ANTLR start "conditionScore"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1198:1: conditionScore returns [RutaCondition cond = null] : name= SCORE LPAREN min= numberExpression ( COMMA max= numberExpression ( COMMA var= numberVariable )? )? RPAREN ;
    public final RutaCondition conditionScore() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression min =null;

        Expression max =null;

        Expression var =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1199:5: (name= SCORE LPAREN min= numberExpression ( COMMA max= numberExpression ( COMMA var= numberVariable )? )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1200:5: name= SCORE LPAREN min= numberExpression ( COMMA max= numberExpression ( COMMA var= numberVariable )? )? RPAREN
            {
            name=(Token)match(input,SCORE,FOLLOW_SCORE_in_conditionScore6215); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionScore6217); if (state.failed) return cond;

            pushFollow(FOLLOW_numberExpression_in_conditionScore6223);
            min=numberExpression();

            state._fsp--;
            if (state.failed) return cond;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1200:48: ( COMMA max= numberExpression ( COMMA var= numberVariable )? )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==COMMA) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1200:49: COMMA max= numberExpression ( COMMA var= numberVariable )?
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_conditionScore6226); if (state.failed) return cond;

                    pushFollow(FOLLOW_numberExpression_in_conditionScore6232);
                    max=numberExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1201:5: ( COMMA var= numberVariable )?
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==COMMA) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1201:6: COMMA var= numberVariable
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_conditionScore6241); if (state.failed) return cond;

                            pushFollow(FOLLOW_numberVariable_in_conditionScore6247);
                            var=numberVariable();

                            state._fsp--;
                            if (state.failed) return cond;

                            }
                            break;

                    }


                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, min, max, var);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionScore6264); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionScore"



    // $ANTLR start "conditionVote"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1206:1: conditionVote returns [RutaCondition cond = null] : name= VOTE LPAREN type1= typeExpression COMMA type2= typeExpression RPAREN ;
    public final RutaCondition conditionVote() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression type1 =null;

        Expression type2 =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1207:5: (name= VOTE LPAREN type1= typeExpression COMMA type2= typeExpression RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1208:5: name= VOTE LPAREN type1= typeExpression COMMA type2= typeExpression RPAREN
            {
            name=(Token)match(input,VOTE,FOLLOW_VOTE_in_conditionVote6296); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionVote6298); if (state.failed) return cond;

            pushFollow(FOLLOW_typeExpression_in_conditionVote6304);
            type1=typeExpression();

            state._fsp--;
            if (state.failed) return cond;

            match(input,COMMA,FOLLOW_COMMA_in_conditionVote6306); if (state.failed) return cond;

            pushFollow(FOLLOW_typeExpression_in_conditionVote6312);
            type2=typeExpression();

            state._fsp--;
            if (state.failed) return cond;

            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type1, type2);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionVote6325); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionVote"



    // $ANTLR start "conditionIf"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1212:1: conditionIf returns [RutaCondition cond = null] : name= IF LPAREN e= booleanExpression RPAREN ;
    public final RutaCondition conditionIf() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression e =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1213:5: (name= IF LPAREN e= booleanExpression RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1214:5: name= IF LPAREN e= booleanExpression RPAREN
            {
            name=(Token)match(input,IF,FOLLOW_IF_in_conditionIf6359); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionIf6361); if (state.failed) return cond;

            pushFollow(FOLLOW_booleanExpression_in_conditionIf6367);
            e=booleanExpression();

            state._fsp--;
            if (state.failed) return cond;

            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, e);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionIf6380); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionIf"



    // $ANTLR start "conditionFeature"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1219:1: conditionFeature returns [RutaCondition cond = null] : name= FEATURE LPAREN se= stringExpression COMMA v= argument RPAREN ;
    public final RutaCondition conditionFeature() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression se =null;

        Expression v =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1220:5: (name= FEATURE LPAREN se= stringExpression COMMA v= argument RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1221:5: name= FEATURE LPAREN se= stringExpression COMMA v= argument RPAREN
            {
            name=(Token)match(input,FEATURE,FOLLOW_FEATURE_in_conditionFeature6419); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionFeature6421); if (state.failed) return cond;

            pushFollow(FOLLOW_stringExpression_in_conditionFeature6427);
            se=stringExpression();

            state._fsp--;
            if (state.failed) return cond;

            match(input,COMMA,FOLLOW_COMMA_in_conditionFeature6429); if (state.failed) return cond;

            pushFollow(FOLLOW_argument_in_conditionFeature6435);
            v=argument();

            state._fsp--;
            if (state.failed) return cond;

            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, se, v);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionFeature6448); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionFeature"



    // $ANTLR start "conditionParse"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1225:1: conditionParse returns [RutaCondition cond = null] : name= PARSE LPAREN var= genericVariableReference RPAREN ;
    public final RutaCondition conditionParse() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression var =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1226:5: (name= PARSE LPAREN var= genericVariableReference RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1227:5: name= PARSE LPAREN var= genericVariableReference RPAREN
            {
            name=(Token)match(input,PARSE,FOLLOW_PARSE_in_conditionParse6479); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionParse6481); if (state.failed) return cond;

            pushFollow(FOLLOW_genericVariableReference_in_conditionParse6490);
            var=genericVariableReference();

            state._fsp--;
            if (state.failed) return cond;

            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, var);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionParse6503); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionParse"



    // $ANTLR start "conditionIs"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1234:1: conditionIs returns [RutaCondition cond = null] : name= IS LPAREN (type= typeExpression |type= typeListExpression ) RPAREN ;
    public final RutaCondition conditionIs() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression type =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1235:5: (name= IS LPAREN (type= typeExpression |type= typeListExpression ) RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1236:5: name= IS LPAREN (type= typeExpression |type= typeListExpression ) RPAREN
            {
            name=(Token)match(input,IS,FOLLOW_IS_in_conditionIs6533); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionIs6535); if (state.failed) return cond;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1236:22: (type= typeExpression |type= typeListExpression )
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==Identifier) ) {
                int LA135_1 = input.LA(2);

                if ( (!(((isVariableOfType(input.LT(1).getText(), "TYPELIST"))))) ) {
                    alt135=1;
                }
                else if ( ((isVariableOfType(input.LT(1).getText(), "TYPELIST"))) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return cond;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA135_0==LCURLY) ) {
                alt135=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return cond;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;

            }
            switch (alt135) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1236:23: type= typeExpression
                    {
                    pushFollow(FOLLOW_typeExpression_in_conditionIs6542);
                    type=typeExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1236:45: type= typeListExpression
                    {
                    pushFollow(FOLLOW_typeListExpression_in_conditionIs6548);
                    type=typeListExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionIs6562); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionIs"



    // $ANTLR start "conditionBefore"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1241:1: conditionBefore returns [RutaCondition cond = null] : name= BEFORE LPAREN (type= typeExpression |type= typeListExpression ) RPAREN ;
    public final RutaCondition conditionBefore() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression type =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1242:5: (name= BEFORE LPAREN (type= typeExpression |type= typeListExpression ) RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1243:5: name= BEFORE LPAREN (type= typeExpression |type= typeListExpression ) RPAREN
            {
            name=(Token)match(input,BEFORE,FOLLOW_BEFORE_in_conditionBefore6591); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionBefore6593); if (state.failed) return cond;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1243:26: (type= typeExpression |type= typeListExpression )
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==Identifier) ) {
                int LA136_1 = input.LA(2);

                if ( (!(((isVariableOfType(input.LT(1).getText(), "TYPELIST"))))) ) {
                    alt136=1;
                }
                else if ( ((isVariableOfType(input.LT(1).getText(), "TYPELIST"))) ) {
                    alt136=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return cond;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA136_0==LCURLY) ) {
                alt136=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return cond;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;

            }
            switch (alt136) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1243:27: type= typeExpression
                    {
                    pushFollow(FOLLOW_typeExpression_in_conditionBefore6600);
                    type=typeExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1243:49: type= typeListExpression
                    {
                    pushFollow(FOLLOW_typeListExpression_in_conditionBefore6606);
                    type=typeListExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionBefore6620); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionBefore"



    // $ANTLR start "conditionAfter"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1248:1: conditionAfter returns [RutaCondition cond = null] : name= AFTER LPAREN (type= typeExpression |type= typeListExpression ) RPAREN ;
    public final RutaCondition conditionAfter() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression type =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1249:5: (name= AFTER LPAREN (type= typeExpression |type= typeListExpression ) RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1250:5: name= AFTER LPAREN (type= typeExpression |type= typeListExpression ) RPAREN
            {
            name=(Token)match(input,AFTER,FOLLOW_AFTER_in_conditionAfter6649); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionAfter6651); if (state.failed) return cond;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1250:25: (type= typeExpression |type= typeListExpression )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==Identifier) ) {
                int LA137_1 = input.LA(2);

                if ( (!(((isVariableOfType(input.LT(1).getText(), "TYPELIST"))))) ) {
                    alt137=1;
                }
                else if ( ((isVariableOfType(input.LT(1).getText(), "TYPELIST"))) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return cond;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA137_0==LCURLY) ) {
                alt137=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return cond;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;

            }
            switch (alt137) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1250:26: type= typeExpression
                    {
                    pushFollow(FOLLOW_typeExpression_in_conditionAfter6658);
                    type=typeExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1250:48: type= typeListExpression
                    {
                    pushFollow(FOLLOW_typeListExpression_in_conditionAfter6664);
                    type=typeListExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionAfter6678); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionAfter"



    // $ANTLR start "conditionStartsWith"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1255:1: conditionStartsWith returns [RutaCondition cond = null] : name= STARTSWITH LPAREN (type= typeExpression |type= typeListExpression ) RPAREN ;
    public final RutaCondition conditionStartsWith() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression type =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1256:5: (name= STARTSWITH LPAREN (type= typeExpression |type= typeListExpression ) RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1257:5: name= STARTSWITH LPAREN (type= typeExpression |type= typeListExpression ) RPAREN
            {
            name=(Token)match(input,STARTSWITH,FOLLOW_STARTSWITH_in_conditionStartsWith6711); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionStartsWith6713); if (state.failed) return cond;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1257:30: (type= typeExpression |type= typeListExpression )
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==Identifier) ) {
                int LA138_1 = input.LA(2);

                if ( (!(((isVariableOfType(input.LT(1).getText(), "TYPELIST"))))) ) {
                    alt138=1;
                }
                else if ( ((isVariableOfType(input.LT(1).getText(), "TYPELIST"))) ) {
                    alt138=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return cond;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 138, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA138_0==LCURLY) ) {
                alt138=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return cond;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;

            }
            switch (alt138) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1257:31: type= typeExpression
                    {
                    pushFollow(FOLLOW_typeExpression_in_conditionStartsWith6720);
                    type=typeExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1257:53: type= typeListExpression
                    {
                    pushFollow(FOLLOW_typeListExpression_in_conditionStartsWith6726);
                    type=typeListExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionStartsWith6740); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionStartsWith"



    // $ANTLR start "conditionEndsWith"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1262:1: conditionEndsWith returns [RutaCondition cond = null] : name= ENDSWITH LPAREN (type= typeExpression |type= typeListExpression ) RPAREN ;
    public final RutaCondition conditionEndsWith() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression type =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1263:5: (name= ENDSWITH LPAREN (type= typeExpression |type= typeListExpression ) RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1264:5: name= ENDSWITH LPAREN (type= typeExpression |type= typeListExpression ) RPAREN
            {
            name=(Token)match(input,ENDSWITH,FOLLOW_ENDSWITH_in_conditionEndsWith6773); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionEndsWith6775); if (state.failed) return cond;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1264:28: (type= typeExpression |type= typeListExpression )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==Identifier) ) {
                int LA139_1 = input.LA(2);

                if ( (!(((isVariableOfType(input.LT(1).getText(), "TYPELIST"))))) ) {
                    alt139=1;
                }
                else if ( ((isVariableOfType(input.LT(1).getText(), "TYPELIST"))) ) {
                    alt139=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return cond;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA139_0==LCURLY) ) {
                alt139=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return cond;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;

            }
            switch (alt139) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1264:29: type= typeExpression
                    {
                    pushFollow(FOLLOW_typeExpression_in_conditionEndsWith6782);
                    type=typeExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1264:51: type= typeListExpression
                    {
                    pushFollow(FOLLOW_typeListExpression_in_conditionEndsWith6788);
                    type=typeListExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, type);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionEndsWith6802); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionEndsWith"



    // $ANTLR start "conditionSize"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1269:1: conditionSize returns [RutaCondition cond = null] : name= SIZE LPAREN list= listExpression ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN ;
    public final RutaCondition conditionSize() throws RecognitionException {
        RutaCondition cond =  null;


        Token name=null;
        Expression list =null;

        Expression min =null;

        Expression max =null;

        Expression var =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1270:5: (name= SIZE LPAREN list= listExpression ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1271:5: name= SIZE LPAREN list= listExpression ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN
            {
            name=(Token)match(input,SIZE,FOLLOW_SIZE_in_conditionSize6835); if (state.failed) return cond;

            match(input,LPAREN,FOLLOW_LPAREN_in_conditionSize6837); if (state.failed) return cond;

            pushFollow(FOLLOW_listExpression_in_conditionSize6843);
            list=listExpression();

            state._fsp--;
            if (state.failed) return cond;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1271:46: ( COMMA min= numberExpression COMMA max= numberExpression )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==COMMA) ) {
                int LA140_1 = input.LA(2);

                if ( (LA140_1==Identifier) ) {
                    int LA140_3 = input.LA(3);

                    if ( (LA140_3==LPAREN||LA140_3==DOT||LA140_3==COMMA||(LA140_3 >= PLUS && LA140_3 <= SLASH)||LA140_3==PERCENT) ) {
                        alt140=1;
                    }
                }
                else if ( ((LA140_1 >= EXP && LA140_1 <= TAN)||LA140_1==DecimalLiteral||LA140_1==FloatingPointLiteral||LA140_1==LPAREN||LA140_1==MINUS) ) {
                    alt140=1;
                }
            }
            switch (alt140) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1271:47: COMMA min= numberExpression COMMA max= numberExpression
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_conditionSize6846); if (state.failed) return cond;

                    pushFollow(FOLLOW_numberExpression_in_conditionSize6852);
                    min=numberExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    match(input,COMMA,FOLLOW_COMMA_in_conditionSize6854); if (state.failed) return cond;

                    pushFollow(FOLLOW_numberExpression_in_conditionSize6860);
                    max=numberExpression();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1271:107: ( COMMA var= numberVariable )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==COMMA) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1271:108: COMMA var= numberVariable
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_conditionSize6865); if (state.failed) return cond;

                    pushFollow(FOLLOW_numberVariable_in_conditionSize6871);
                    var=numberVariable();

                    state._fsp--;
                    if (state.failed) return cond;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {cond = ConditionFactory.createCondition(name, list, min, max, var);}

            match(input,RPAREN,FOLLOW_RPAREN_in_conditionSize6886); if (state.failed) return cond;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return cond;
    }
    // $ANTLR end "conditionSize"



    // $ANTLR start "action"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1277:1: action returns [RutaAction result = null] : (a= actionColor |a= actionDel |a= actionLog |a= actionMark |a= actionMarkScore |a= actionMarkFast |a= actionMarkLast |a= actionReplace |a= actionRetainType |a= actionFilterType |a= actionCreate |a= actionFill |a= actionCall |a= actionAssign |a= actionSetFeature |a= actionGetFeature |a= actionUnmark |a= actionUnmarkAll |a= actionTransfer |a= actionMarkOnce |a= actionTrie |a= actionGather |a= actionExec |a= actionMarkTable |a= actionAdd |a= actionRemove |a= actionRemoveDuplicate |a= actionMerge |a= actionGet |a= actionGetList |a= actionMatchedText |a= actionClear |a= actionShift |a= actionConfigure |a= actionDynamicAnchoring |a= actionTrim |a= actionAddFilterType |a= actionAddRetainType |a= actionRemoveFilterType |a= actionRemoveRetainType | ( externalAction )=>a= externalAction | ( featureAssignmentExpression )=>fae= featureAssignmentExpression | ( typeExpression )=>te= typeExpression ) ;
    public final RutaAction action() throws RecognitionException {
        RutaAction result =  null;


        RutaAction a =null;

        Expression fae =null;

        Expression te =null;



        result = ActionFactory.createEmptyAction(input.LT(1));

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1281:2: ( (a= actionColor |a= actionDel |a= actionLog |a= actionMark |a= actionMarkScore |a= actionMarkFast |a= actionMarkLast |a= actionReplace |a= actionRetainType |a= actionFilterType |a= actionCreate |a= actionFill |a= actionCall |a= actionAssign |a= actionSetFeature |a= actionGetFeature |a= actionUnmark |a= actionUnmarkAll |a= actionTransfer |a= actionMarkOnce |a= actionTrie |a= actionGather |a= actionExec |a= actionMarkTable |a= actionAdd |a= actionRemove |a= actionRemoveDuplicate |a= actionMerge |a= actionGet |a= actionGetList |a= actionMatchedText |a= actionClear |a= actionShift |a= actionConfigure |a= actionDynamicAnchoring |a= actionTrim |a= actionAddFilterType |a= actionAddRetainType |a= actionRemoveFilterType |a= actionRemoveRetainType | ( externalAction )=>a= externalAction | ( featureAssignmentExpression )=>fae= featureAssignmentExpression | ( typeExpression )=>te= typeExpression ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1282:2: (a= actionColor |a= actionDel |a= actionLog |a= actionMark |a= actionMarkScore |a= actionMarkFast |a= actionMarkLast |a= actionReplace |a= actionRetainType |a= actionFilterType |a= actionCreate |a= actionFill |a= actionCall |a= actionAssign |a= actionSetFeature |a= actionGetFeature |a= actionUnmark |a= actionUnmarkAll |a= actionTransfer |a= actionMarkOnce |a= actionTrie |a= actionGather |a= actionExec |a= actionMarkTable |a= actionAdd |a= actionRemove |a= actionRemoveDuplicate |a= actionMerge |a= actionGet |a= actionGetList |a= actionMatchedText |a= actionClear |a= actionShift |a= actionConfigure |a= actionDynamicAnchoring |a= actionTrim |a= actionAddFilterType |a= actionAddRetainType |a= actionRemoveFilterType |a= actionRemoveRetainType | ( externalAction )=>a= externalAction | ( featureAssignmentExpression )=>fae= featureAssignmentExpression | ( typeExpression )=>te= typeExpression )
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1282:2: (a= actionColor |a= actionDel |a= actionLog |a= actionMark |a= actionMarkScore |a= actionMarkFast |a= actionMarkLast |a= actionReplace |a= actionRetainType |a= actionFilterType |a= actionCreate |a= actionFill |a= actionCall |a= actionAssign |a= actionSetFeature |a= actionGetFeature |a= actionUnmark |a= actionUnmarkAll |a= actionTransfer |a= actionMarkOnce |a= actionTrie |a= actionGather |a= actionExec |a= actionMarkTable |a= actionAdd |a= actionRemove |a= actionRemoveDuplicate |a= actionMerge |a= actionGet |a= actionGetList |a= actionMatchedText |a= actionClear |a= actionShift |a= actionConfigure |a= actionDynamicAnchoring |a= actionTrim |a= actionAddFilterType |a= actionAddRetainType |a= actionRemoveFilterType |a= actionRemoveRetainType | ( externalAction )=>a= externalAction | ( featureAssignmentExpression )=>fae= featureAssignmentExpression | ( typeExpression )=>te= typeExpression )
            int alt142=43;
            switch ( input.LA(1) ) {
            case COLOR:
                {
                alt142=1;
                }
                break;
            case DEL:
                {
                alt142=2;
                }
                break;
            case LOG:
                {
                alt142=3;
                }
                break;
            case MARK:
                {
                alt142=4;
                }
                break;
            case MARKSCORE:
                {
                alt142=5;
                }
                break;
            case MARKFAST:
                {
                alt142=6;
                }
                break;
            case MARKLAST:
                {
                alt142=7;
                }
                break;
            case REPLACE:
                {
                alt142=8;
                }
                break;
            case RETAINTYPE:
                {
                alt142=9;
                }
                break;
            case FILTERTYPE:
                {
                alt142=10;
                }
                break;
            case CREATE:
                {
                alt142=11;
                }
                break;
            case FILL:
                {
                alt142=12;
                }
                break;
            case CALL:
                {
                alt142=13;
                }
                break;
            case ASSIGN:
                {
                alt142=14;
                }
                break;
            case SETFEATURE:
                {
                alt142=15;
                }
                break;
            case GETFEATURE:
                {
                alt142=16;
                }
                break;
            case UNMARK:
                {
                alt142=17;
                }
                break;
            case UNMARKALL:
                {
                alt142=18;
                }
                break;
            case TRANSFER:
                {
                alt142=19;
                }
                break;
            case MARKONCE:
                {
                alt142=20;
                }
                break;
            case TRIE:
                {
                alt142=21;
                }
                break;
            case GATHER:
                {
                alt142=22;
                }
                break;
            case EXEC:
                {
                alt142=23;
                }
                break;
            case MARKTABLE:
                {
                alt142=24;
                }
                break;
            case ADD:
                {
                alt142=25;
                }
                break;
            case REMOVE:
                {
                alt142=26;
                }
                break;
            case REMOVEDUPLICATE:
                {
                alt142=27;
                }
                break;
            case MERGE:
                {
                alt142=28;
                }
                break;
            case GET:
                {
                alt142=29;
                }
                break;
            case GETLIST:
                {
                alt142=30;
                }
                break;
            case MATCHEDTEXT:
                {
                alt142=31;
                }
                break;
            case CLEAR:
                {
                alt142=32;
                }
                break;
            case SHIFT:
                {
                alt142=33;
                }
                break;
            case CONFIGURE:
                {
                alt142=34;
                }
                break;
            case DYNAMICANCHORING:
                {
                alt142=35;
                }
                break;
            case TRIM:
                {
                alt142=36;
                }
                break;
            case ADDFILTERTYPE:
                {
                alt142=37;
                }
                break;
            case ADDRETAINTYPE:
                {
                alt142=38;
                }
                break;
            case REMOVEFILTERTYPE:
                {
                alt142=39;
                }
                break;
            case REMOVERETAINTYPE:
                {
                alt142=40;
                }
                break;
            case Identifier:
                {
                int LA142_41 = input.LA(2);

                if ( (synpred24_RutaParser()) ) {
                    alt142=41;
                }
                else if ( (synpred25_RutaParser()) ) {
                    alt142=42;
                }
                else if ( (synpred26_RutaParser()) ) {
                    alt142=43;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return result;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 142, 41, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return result;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;

            }

            switch (alt142) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1283:2: a= actionColor
                    {
                    pushFollow(FOLLOW_actionColor_in_action6919);
                    a=actionColor();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1284:4: a= actionDel
                    {
                    pushFollow(FOLLOW_actionDel_in_action6928);
                    a=actionDel();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1285:4: a= actionLog
                    {
                    pushFollow(FOLLOW_actionLog_in_action6937);
                    a=actionLog();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 4 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1286:4: a= actionMark
                    {
                    pushFollow(FOLLOW_actionMark_in_action6946);
                    a=actionMark();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 5 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1287:4: a= actionMarkScore
                    {
                    pushFollow(FOLLOW_actionMarkScore_in_action6955);
                    a=actionMarkScore();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 6 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1288:4: a= actionMarkFast
                    {
                    pushFollow(FOLLOW_actionMarkFast_in_action6964);
                    a=actionMarkFast();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 7 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1289:4: a= actionMarkLast
                    {
                    pushFollow(FOLLOW_actionMarkLast_in_action6973);
                    a=actionMarkLast();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 8 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1290:4: a= actionReplace
                    {
                    pushFollow(FOLLOW_actionReplace_in_action6982);
                    a=actionReplace();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 9 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1291:4: a= actionRetainType
                    {
                    pushFollow(FOLLOW_actionRetainType_in_action6991);
                    a=actionRetainType();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 10 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1292:4: a= actionFilterType
                    {
                    pushFollow(FOLLOW_actionFilterType_in_action7000);
                    a=actionFilterType();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 11 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1293:4: a= actionCreate
                    {
                    pushFollow(FOLLOW_actionCreate_in_action7009);
                    a=actionCreate();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 12 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1294:4: a= actionFill
                    {
                    pushFollow(FOLLOW_actionFill_in_action7018);
                    a=actionFill();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 13 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1295:4: a= actionCall
                    {
                    pushFollow(FOLLOW_actionCall_in_action7027);
                    a=actionCall();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 14 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1296:4: a= actionAssign
                    {
                    pushFollow(FOLLOW_actionAssign_in_action7036);
                    a=actionAssign();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 15 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1297:4: a= actionSetFeature
                    {
                    pushFollow(FOLLOW_actionSetFeature_in_action7045);
                    a=actionSetFeature();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 16 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1298:4: a= actionGetFeature
                    {
                    pushFollow(FOLLOW_actionGetFeature_in_action7054);
                    a=actionGetFeature();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 17 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1299:4: a= actionUnmark
                    {
                    pushFollow(FOLLOW_actionUnmark_in_action7063);
                    a=actionUnmark();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 18 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1300:4: a= actionUnmarkAll
                    {
                    pushFollow(FOLLOW_actionUnmarkAll_in_action7072);
                    a=actionUnmarkAll();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 19 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1301:4: a= actionTransfer
                    {
                    pushFollow(FOLLOW_actionTransfer_in_action7081);
                    a=actionTransfer();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 20 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1302:4: a= actionMarkOnce
                    {
                    pushFollow(FOLLOW_actionMarkOnce_in_action7090);
                    a=actionMarkOnce();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 21 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1303:4: a= actionTrie
                    {
                    pushFollow(FOLLOW_actionTrie_in_action7099);
                    a=actionTrie();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 22 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1304:4: a= actionGather
                    {
                    pushFollow(FOLLOW_actionGather_in_action7108);
                    a=actionGather();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 23 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1305:4: a= actionExec
                    {
                    pushFollow(FOLLOW_actionExec_in_action7118);
                    a=actionExec();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 24 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1306:4: a= actionMarkTable
                    {
                    pushFollow(FOLLOW_actionMarkTable_in_action7127);
                    a=actionMarkTable();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 25 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1307:4: a= actionAdd
                    {
                    pushFollow(FOLLOW_actionAdd_in_action7136);
                    a=actionAdd();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 26 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1308:4: a= actionRemove
                    {
                    pushFollow(FOLLOW_actionRemove_in_action7145);
                    a=actionRemove();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 27 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1309:4: a= actionRemoveDuplicate
                    {
                    pushFollow(FOLLOW_actionRemoveDuplicate_in_action7154);
                    a=actionRemoveDuplicate();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 28 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1310:4: a= actionMerge
                    {
                    pushFollow(FOLLOW_actionMerge_in_action7163);
                    a=actionMerge();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 29 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1311:4: a= actionGet
                    {
                    pushFollow(FOLLOW_actionGet_in_action7172);
                    a=actionGet();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 30 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1312:4: a= actionGetList
                    {
                    pushFollow(FOLLOW_actionGetList_in_action7182);
                    a=actionGetList();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 31 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1313:4: a= actionMatchedText
                    {
                    pushFollow(FOLLOW_actionMatchedText_in_action7191);
                    a=actionMatchedText();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 32 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1314:4: a= actionClear
                    {
                    pushFollow(FOLLOW_actionClear_in_action7200);
                    a=actionClear();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 33 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1315:4: a= actionShift
                    {
                    pushFollow(FOLLOW_actionShift_in_action7209);
                    a=actionShift();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 34 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1316:4: a= actionConfigure
                    {
                    pushFollow(FOLLOW_actionConfigure_in_action7218);
                    a=actionConfigure();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 35 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1317:4: a= actionDynamicAnchoring
                    {
                    pushFollow(FOLLOW_actionDynamicAnchoring_in_action7227);
                    a=actionDynamicAnchoring();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 36 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1318:4: a= actionTrim
                    {
                    pushFollow(FOLLOW_actionTrim_in_action7236);
                    a=actionTrim();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 37 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1319:4: a= actionAddFilterType
                    {
                    pushFollow(FOLLOW_actionAddFilterType_in_action7245);
                    a=actionAddFilterType();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 38 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1320:4: a= actionAddRetainType
                    {
                    pushFollow(FOLLOW_actionAddRetainType_in_action7254);
                    a=actionAddRetainType();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 39 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1321:4: a= actionRemoveFilterType
                    {
                    pushFollow(FOLLOW_actionRemoveFilterType_in_action7263);
                    a=actionRemoveFilterType();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 40 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1322:4: a= actionRemoveRetainType
                    {
                    pushFollow(FOLLOW_actionRemoveRetainType_in_action7272);
                    a=actionRemoveRetainType();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 41 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1323:4: ( externalAction )=>a= externalAction
                    {
                    pushFollow(FOLLOW_externalAction_in_action7286);
                    a=externalAction();

                    state._fsp--;
                    if (state.failed) return result;

                    }
                    break;
                case 42 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1324:4: ( featureAssignmentExpression )=>fae= featureAssignmentExpression
                    {
                    pushFollow(FOLLOW_featureAssignmentExpression_in_action7300);
                    fae=featureAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return result;

                    if ( state.backtracking==0 ) {a = ActionFactory.createAction(fae);}

                    }
                    break;
                case 43 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1325:4: ( typeExpression )=>te= typeExpression
                    {
                    pushFollow(FOLLOW_typeExpression_in_action7316);
                    te=typeExpression();

                    state._fsp--;
                    if (state.failed) return result;

                    if ( state.backtracking==0 ) {a = ActionFactory.createAction(te);}

                    }
                    break;

            }


            if ( state.backtracking==0 ) {result = a;}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return result;
    }
    // $ANTLR end "action"



    // $ANTLR start "variableAction"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1334:1: variableAction returns [RutaAction action = null] : id= Identifier ;
    public final RutaAction variableAction() throws RecognitionException {
        RutaAction action =  null;


        Token id=null;

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1335:2: (id= Identifier )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1338:3: id= Identifier
            {
            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableAction7355); if (state.failed) return action;

            if ( state.backtracking==0 ) {
            		action = ActionFactory.createAction(id);
            	}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "variableAction"



    // $ANTLR start "externalAction"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1344:1: externalAction returns [RutaAction action = null] : id= Identifier LPAREN (args= varArgumentList )? RPAREN ;
    public final RutaAction externalAction() throws RecognitionException {
        RutaAction action =  null;


        Token id=null;
        List<Expression> args =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1345:2: (id= Identifier LPAREN (args= varArgumentList )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1346:3: id= Identifier LPAREN (args= varArgumentList )? RPAREN
            {
            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_externalAction7380); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_externalAction7384); if (state.failed) return action;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1348:8: (args= varArgumentList )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==REMOVESTRING||(LA143_0 >= EXP && LA143_0 <= FALSE)||LA143_0==DecimalLiteral||LA143_0==FloatingPointLiteral||LA143_0==StringLiteral||(LA143_0 >= Identifier && LA143_0 <= LPAREN)||LA143_0==MINUS) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1348:8: args= varArgumentList
                    {
                    pushFollow(FOLLOW_varArgumentList_in_externalAction7392);
                    args=varArgumentList();

                    state._fsp--;
                    if (state.failed) return action;

                    }
                    break;

            }


            match(input,RPAREN,FOLLOW_RPAREN_in_externalAction7398); if (state.failed) return action;

            if ( state.backtracking==0 ) {
            		action = external.createExternalAction(id, args);
            	}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "externalAction"



    // $ANTLR start "actionCreate"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1356:1: actionCreate returns [RutaAction action = null] : name= CREATE LPAREN structure= typeExpression ( COMMA ( ( numberExpression )=>index= numberExpression ( ( COMMA index= numberExpression )=> ( COMMA index= numberExpression ) )* COMMA )? ( ( stringExpression ASSIGN_EQUAL )=>fname= stringExpression ASSIGN_EQUAL obj1= argument ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )* )? )? RPAREN ;
    public final RutaAction actionCreate() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression structure =null;

        Expression index =null;

        Expression fname =null;

        Expression obj1 =null;



            List left = new ArrayList();
            List right = new ArrayList();
            List indexes = new ArrayList();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1362:5: (name= CREATE LPAREN structure= typeExpression ( COMMA ( ( numberExpression )=>index= numberExpression ( ( COMMA index= numberExpression )=> ( COMMA index= numberExpression ) )* COMMA )? ( ( stringExpression ASSIGN_EQUAL )=>fname= stringExpression ASSIGN_EQUAL obj1= argument ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )* )? )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1363:5: name= CREATE LPAREN structure= typeExpression ( COMMA ( ( numberExpression )=>index= numberExpression ( ( COMMA index= numberExpression )=> ( COMMA index= numberExpression ) )* COMMA )? ( ( stringExpression ASSIGN_EQUAL )=>fname= stringExpression ASSIGN_EQUAL obj1= argument ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )* )? )? RPAREN
            {
            name=(Token)match(input,CREATE,FOLLOW_CREATE_in_actionCreate7433); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionCreate7435); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionCreate7441);
            structure=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1364:5: ( COMMA ( ( numberExpression )=>index= numberExpression ( ( COMMA index= numberExpression )=> ( COMMA index= numberExpression ) )* COMMA )? ( ( stringExpression ASSIGN_EQUAL )=>fname= stringExpression ASSIGN_EQUAL obj1= argument ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )* )? )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==COMMA) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1364:6: COMMA ( ( numberExpression )=>index= numberExpression ( ( COMMA index= numberExpression )=> ( COMMA index= numberExpression ) )* COMMA )? ( ( stringExpression ASSIGN_EQUAL )=>fname= stringExpression ASSIGN_EQUAL obj1= argument ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )* )?
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_actionCreate7448); if (state.failed) return action;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1366:5: ( ( numberExpression )=>index= numberExpression ( ( COMMA index= numberExpression )=> ( COMMA index= numberExpression ) )* COMMA )?
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==Identifier) ) {
                        int LA145_1 = input.LA(2);

                        if ( (synpred27_RutaParser()) ) {
                            alt145=1;
                        }
                    }
                    else if ( (LA145_0==MINUS) && (synpred27_RutaParser())) {
                        alt145=1;
                    }
                    else if ( (LA145_0==DecimalLiteral) && (synpred27_RutaParser())) {
                        alt145=1;
                    }
                    else if ( (LA145_0==FloatingPointLiteral) && (synpred27_RutaParser())) {
                        alt145=1;
                    }
                    else if ( (LA145_0==LPAREN) && (synpred27_RutaParser())) {
                        alt145=1;
                    }
                    else if ( ((LA145_0 >= EXP && LA145_0 <= TAN)) && (synpred27_RutaParser())) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1366:6: ( numberExpression )=>index= numberExpression ( ( COMMA index= numberExpression )=> ( COMMA index= numberExpression ) )* COMMA
                            {
                            pushFollow(FOLLOW_numberExpression_in_actionCreate7474);
                            index=numberExpression();

                            state._fsp--;
                            if (state.failed) return action;

                            if ( state.backtracking==0 ) {indexes.add(index);}

                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1366:74: ( ( COMMA index= numberExpression )=> ( COMMA index= numberExpression ) )*
                            loop144:
                            do {
                                int alt144=2;
                                int LA144_0 = input.LA(1);

                                if ( (LA144_0==COMMA) ) {
                                    int LA144_1 = input.LA(2);

                                    if ( (synpred28_RutaParser()) ) {
                                        alt144=1;
                                    }


                                }


                                switch (alt144) {
                            	case 1 :
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1366:75: ( COMMA index= numberExpression )=> ( COMMA index= numberExpression )
                            	    {
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1366:110: ( COMMA index= numberExpression )
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1366:111: COMMA index= numberExpression
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_actionCreate7491); if (state.failed) return action;

                            	    pushFollow(FOLLOW_numberExpression_in_actionCreate7497);
                            	    index=numberExpression();

                            	    state._fsp--;
                            	    if (state.failed) return action;

                            	    }


                            	    if ( state.backtracking==0 ) {indexes.add(index);}

                            	    }
                            	    break;

                            	default :
                            	    break loop144;
                                }
                            } while (true);


                            match(input,COMMA,FOLLOW_COMMA_in_actionCreate7503); if (state.failed) return action;

                            }
                            break;

                    }


                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1368:5: ( ( stringExpression ASSIGN_EQUAL )=>fname= stringExpression ASSIGN_EQUAL obj1= argument ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )* )?
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==Identifier) && (synpred29_RutaParser())) {
                        alt147=1;
                    }
                    else if ( (LA147_0==REMOVESTRING) && (synpred29_RutaParser())) {
                        alt147=1;
                    }
                    else if ( (LA147_0==StringLiteral) && (synpred29_RutaParser())) {
                        alt147=1;
                    }
                    switch (alt147) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1368:6: ( stringExpression ASSIGN_EQUAL )=>fname= stringExpression ASSIGN_EQUAL obj1= argument ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )*
                            {
                            pushFollow(FOLLOW_stringExpression_in_actionCreate7528);
                            fname=stringExpression();

                            state._fsp--;
                            if (state.failed) return action;

                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_actionCreate7530); if (state.failed) return action;

                            pushFollow(FOLLOW_argument_in_actionCreate7536);
                            obj1=argument();

                            state._fsp--;
                            if (state.failed) return action;

                            if ( state.backtracking==0 ) {left.add(fname); right.add(obj1);}

                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1369:5: ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )*
                            loop146:
                            do {
                                int alt146=2;
                                int LA146_0 = input.LA(1);

                                if ( (LA146_0==COMMA) ) {
                                    alt146=1;
                                }


                                switch (alt146) {
                            	case 1 :
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1369:6: COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_actionCreate7546); if (state.failed) return action;

                            	    pushFollow(FOLLOW_stringExpression_in_actionCreate7552);
                            	    fname=stringExpression();

                            	    state._fsp--;
                            	    if (state.failed) return action;

                            	    match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_actionCreate7554); if (state.failed) return action;

                            	    pushFollow(FOLLOW_argument_in_actionCreate7560);
                            	    obj1=argument();

                            	    state._fsp--;
                            	    if (state.failed) return action;

                            	    if ( state.backtracking==0 ) {left.add(fname);right.add(obj1);}

                            	    }
                            	    break;

                            	default :
                            	    break loop146;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }


            if ( state.backtracking==0 ) {action = ActionFactory.createStructureAction(name, structure, indexes, left, right);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionCreate7591); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionCreate"



    // $ANTLR start "actionMarkTable"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1377:1: actionMarkTable returns [RutaAction action = null] : name= MARKTABLE LPAREN structure= typeExpression COMMA index= numberExpression COMMA table= wordTableExpression COMMA ( ( booleanExpression )=>ignoreCase= booleanExpression COMMA ignoreLength= numberExpression COMMA ignoreChar= stringExpression COMMA maxIgnoreChar= numberExpression COMMA )? key= stringExpression ASSIGN_EQUAL value= numberExpression ( COMMA key= stringExpression ASSIGN_EQUAL value= numberExpression )* RPAREN ;
    public final RutaAction actionMarkTable() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression structure =null;

        Expression index =null;

        Expression table =null;

        Expression ignoreCase =null;

        Expression ignoreLength =null;

        Expression ignoreChar =null;

        Expression maxIgnoreChar =null;

        Expression key =null;

        Expression value =null;



            List<Expression> left = new ArrayList<Expression>();
            List<Expression> right = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1382:5: (name= MARKTABLE LPAREN structure= typeExpression COMMA index= numberExpression COMMA table= wordTableExpression COMMA ( ( booleanExpression )=>ignoreCase= booleanExpression COMMA ignoreLength= numberExpression COMMA ignoreChar= stringExpression COMMA maxIgnoreChar= numberExpression COMMA )? key= stringExpression ASSIGN_EQUAL value= numberExpression ( COMMA key= stringExpression ASSIGN_EQUAL value= numberExpression )* RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1383:5: name= MARKTABLE LPAREN structure= typeExpression COMMA index= numberExpression COMMA table= wordTableExpression COMMA ( ( booleanExpression )=>ignoreCase= booleanExpression COMMA ignoreLength= numberExpression COMMA ignoreChar= stringExpression COMMA maxIgnoreChar= numberExpression COMMA )? key= stringExpression ASSIGN_EQUAL value= numberExpression ( COMMA key= stringExpression ASSIGN_EQUAL value= numberExpression )* RPAREN
            {
            name=(Token)match(input,MARKTABLE,FOLLOW_MARKTABLE_in_actionMarkTable7626); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionMarkTable7628); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionMarkTable7639);
            structure=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            match(input,COMMA,FOLLOW_COMMA_in_actionMarkTable7641); if (state.failed) return action;

            pushFollow(FOLLOW_numberExpression_in_actionMarkTable7652);
            index=numberExpression();

            state._fsp--;
            if (state.failed) return action;

            match(input,COMMA,FOLLOW_COMMA_in_actionMarkTable7654); if (state.failed) return action;

            pushFollow(FOLLOW_wordTableExpression_in_actionMarkTable7664);
            table=wordTableExpression();

            state._fsp--;
            if (state.failed) return action;

            match(input,COMMA,FOLLOW_COMMA_in_actionMarkTable7671); if (state.failed) return action;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1388:5: ( ( booleanExpression )=>ignoreCase= booleanExpression COMMA ignoreLength= numberExpression COMMA ignoreChar= stringExpression COMMA maxIgnoreChar= numberExpression COMMA )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==Identifier) ) {
                int LA149_1 = input.LA(2);

                if ( (synpred30_RutaParser()) ) {
                    alt149=1;
                }
            }
            else if ( (LA149_0==TRUE) && (synpred30_RutaParser())) {
                alt149=1;
            }
            else if ( (LA149_0==FALSE) && (synpred30_RutaParser())) {
                alt149=1;
            }
            else if ( (LA149_0==LPAREN) && (synpred30_RutaParser())) {
                alt149=1;
            }
            else if ( (LA149_0==XOR) && (synpred30_RutaParser())) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1388:7: ( booleanExpression )=>ignoreCase= booleanExpression COMMA ignoreLength= numberExpression COMMA ignoreChar= stringExpression COMMA maxIgnoreChar= numberExpression COMMA
                    {
                    pushFollow(FOLLOW_booleanExpression_in_actionMarkTable7688);
                    ignoreCase=booleanExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    match(input,COMMA,FOLLOW_COMMA_in_actionMarkTable7695); if (state.failed) return action;

                    pushFollow(FOLLOW_numberExpression_in_actionMarkTable7701);
                    ignoreLength=numberExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    match(input,COMMA,FOLLOW_COMMA_in_actionMarkTable7708); if (state.failed) return action;

                    pushFollow(FOLLOW_stringExpression_in_actionMarkTable7714);
                    ignoreChar=stringExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    match(input,COMMA,FOLLOW_COMMA_in_actionMarkTable7720); if (state.failed) return action;

                    pushFollow(FOLLOW_numberExpression_in_actionMarkTable7726);
                    maxIgnoreChar=numberExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    match(input,COMMA,FOLLOW_COMMA_in_actionMarkTable7728); if (state.failed) return action;

                    }
                    break;

            }


            pushFollow(FOLLOW_stringExpression_in_actionMarkTable7741);
            key=stringExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {left.add(key);}

            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_actionMarkTable7745); if (state.failed) return action;

            pushFollow(FOLLOW_numberExpression_in_actionMarkTable7751);
            value=numberExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {right.add(value);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1393:5: ( COMMA key= stringExpression ASSIGN_EQUAL value= numberExpression )*
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==COMMA) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1393:6: COMMA key= stringExpression ASSIGN_EQUAL value= numberExpression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_actionMarkTable7759); if (state.failed) return action;

            	    pushFollow(FOLLOW_stringExpression_in_actionMarkTable7765);
            	    key=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {left.add(key);}

            	    match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_actionMarkTable7769); if (state.failed) return action;

            	    pushFollow(FOLLOW_numberExpression_in_actionMarkTable7775);
            	    value=numberExpression();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {right.add(value);}

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);


            if ( state.backtracking==0 ) {
                List<Expression> args = new ArrayList<Expression>();
                args.add(index);
                args.add(table);
                	args.add(ignoreCase);
            	args.add(ignoreLength);
            	args.add(ignoreChar);
                	args.add(maxIgnoreChar);
                action = ActionFactory.createStructureAction(name, args, left, right, structure);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionMarkTable7801); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionMarkTable"



    // $ANTLR start "actionGather"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1408:1: actionGather returns [RutaAction action = null] : name= GATHER LPAREN structure= typeExpression ( COMMA ( ( numberExpression )=>index= numberExpression ( ( COMMA index= numberExpression )=> ( COMMA index= numberExpression ) )* COMMA )? (fname= stringExpression ASSIGN_EQUAL (obj1= numberExpression |obj2= numberListExpression ) ( COMMA fname= stringExpression ASSIGN_EQUAL (obj1= numberExpression |obj2= numberListExpression ) )* )? )? RPAREN ;
    public final RutaAction actionGather() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression structure =null;

        Expression index =null;

        Expression fname =null;

        Expression obj1 =null;

        Expression obj2 =null;



            List left = new ArrayList();
            List right = new ArrayList();
            List indexes = new ArrayList();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1414:5: (name= GATHER LPAREN structure= typeExpression ( COMMA ( ( numberExpression )=>index= numberExpression ( ( COMMA index= numberExpression )=> ( COMMA index= numberExpression ) )* COMMA )? (fname= stringExpression ASSIGN_EQUAL (obj1= numberExpression |obj2= numberListExpression ) ( COMMA fname= stringExpression ASSIGN_EQUAL (obj1= numberExpression |obj2= numberListExpression ) )* )? )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1415:5: name= GATHER LPAREN structure= typeExpression ( COMMA ( ( numberExpression )=>index= numberExpression ( ( COMMA index= numberExpression )=> ( COMMA index= numberExpression ) )* COMMA )? (fname= stringExpression ASSIGN_EQUAL (obj1= numberExpression |obj2= numberListExpression ) ( COMMA fname= stringExpression ASSIGN_EQUAL (obj1= numberExpression |obj2= numberListExpression ) )* )? )? RPAREN
            {
            name=(Token)match(input,GATHER,FOLLOW_GATHER_in_actionGather7835); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionGather7837); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionGather7843);
            structure=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createStructureAction(name, structure, indexes, left, right);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1417:5: ( COMMA ( ( numberExpression )=>index= numberExpression ( ( COMMA index= numberExpression )=> ( COMMA index= numberExpression ) )* COMMA )? (fname= stringExpression ASSIGN_EQUAL (obj1= numberExpression |obj2= numberListExpression ) ( COMMA fname= stringExpression ASSIGN_EQUAL (obj1= numberExpression |obj2= numberListExpression ) )* )? )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==COMMA) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1417:6: COMMA ( ( numberExpression )=>index= numberExpression ( ( COMMA index= numberExpression )=> ( COMMA index= numberExpression ) )* COMMA )? (fname= stringExpression ASSIGN_EQUAL (obj1= numberExpression |obj2= numberListExpression ) ( COMMA fname= stringExpression ASSIGN_EQUAL (obj1= numberExpression |obj2= numberListExpression ) )* )?
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_actionGather7857); if (state.failed) return action;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1418:5: ( ( numberExpression )=>index= numberExpression ( ( COMMA index= numberExpression )=> ( COMMA index= numberExpression ) )* COMMA )?
                    int alt152=2;
                    int LA152_0 = input.LA(1);

                    if ( (LA152_0==Identifier) ) {
                        int LA152_1 = input.LA(2);

                        if ( (synpred31_RutaParser()) ) {
                            alt152=1;
                        }
                    }
                    else if ( (LA152_0==MINUS) && (synpred31_RutaParser())) {
                        alt152=1;
                    }
                    else if ( (LA152_0==DecimalLiteral) && (synpred31_RutaParser())) {
                        alt152=1;
                    }
                    else if ( (LA152_0==FloatingPointLiteral) && (synpred31_RutaParser())) {
                        alt152=1;
                    }
                    else if ( (LA152_0==LPAREN) && (synpred31_RutaParser())) {
                        alt152=1;
                    }
                    else if ( ((LA152_0 >= EXP && LA152_0 <= TAN)) && (synpred31_RutaParser())) {
                        alt152=1;
                    }
                    switch (alt152) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1418:6: ( numberExpression )=>index= numberExpression ( ( COMMA index= numberExpression )=> ( COMMA index= numberExpression ) )* COMMA
                            {
                            pushFollow(FOLLOW_numberExpression_in_actionGather7874);
                            index=numberExpression();

                            state._fsp--;
                            if (state.failed) return action;

                            if ( state.backtracking==0 ) {indexes.add(index);}

                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1418:74: ( ( COMMA index= numberExpression )=> ( COMMA index= numberExpression ) )*
                            loop151:
                            do {
                                int alt151=2;
                                int LA151_0 = input.LA(1);

                                if ( (LA151_0==COMMA) ) {
                                    int LA151_1 = input.LA(2);

                                    if ( (synpred32_RutaParser()) ) {
                                        alt151=1;
                                    }


                                }


                                switch (alt151) {
                            	case 1 :
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1418:75: ( COMMA index= numberExpression )=> ( COMMA index= numberExpression )
                            	    {
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1418:109: ( COMMA index= numberExpression )
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1418:110: COMMA index= numberExpression
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_actionGather7890); if (state.failed) return action;

                            	    pushFollow(FOLLOW_numberExpression_in_actionGather7896);
                            	    index=numberExpression();

                            	    state._fsp--;
                            	    if (state.failed) return action;

                            	    }


                            	    if ( state.backtracking==0 ) {indexes.add(index);}

                            	    }
                            	    break;

                            	default :
                            	    break loop151;
                                }
                            } while (true);


                            match(input,COMMA,FOLLOW_COMMA_in_actionGather7903); if (state.failed) return action;

                            }
                            break;

                    }


                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1419:5: (fname= stringExpression ASSIGN_EQUAL (obj1= numberExpression |obj2= numberListExpression ) ( COMMA fname= stringExpression ASSIGN_EQUAL (obj1= numberExpression |obj2= numberListExpression ) )* )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==REMOVESTRING||LA156_0==StringLiteral||LA156_0==Identifier) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1419:6: fname= stringExpression ASSIGN_EQUAL (obj1= numberExpression |obj2= numberListExpression ) ( COMMA fname= stringExpression ASSIGN_EQUAL (obj1= numberExpression |obj2= numberListExpression ) )*
                            {
                            pushFollow(FOLLOW_stringExpression_in_actionGather7916);
                            fname=stringExpression();

                            state._fsp--;
                            if (state.failed) return action;

                            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_actionGather7918); if (state.failed) return action;

                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1419:44: (obj1= numberExpression |obj2= numberListExpression )
                            int alt153=2;
                            switch ( input.LA(1) ) {
                            case Identifier:
                                {
                                int LA153_1 = input.LA(2);

                                if ( (!((((isVariableOfType(input.LT(1).getText(), "INTLIST"))||(isVariableOfType(input.LT(1).getText(), "DOUBLELIST"))||(isVariableOfType(input.LT(1).getText(), "FLOATLIST")))))) ) {
                                    alt153=1;
                                }
                                else if ( (((isVariableOfType(input.LT(1).getText(), "INTLIST"))||(isVariableOfType(input.LT(1).getText(), "DOUBLELIST"))||(isVariableOfType(input.LT(1).getText(), "FLOATLIST")))) ) {
                                    alt153=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return action;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 153, 1, input);

                                    throw nvae;

                                }
                                }
                                break;
                            case EXP:
                            case LOGN:
                            case SIN:
                            case COS:
                            case TAN:
                            case DecimalLiteral:
                            case FloatingPointLiteral:
                            case LPAREN:
                            case MINUS:
                                {
                                alt153=1;
                                }
                                break;
                            case LCURLY:
                                {
                                alt153=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return action;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 153, 0, input);

                                throw nvae;

                            }

                            switch (alt153) {
                                case 1 :
                                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1419:45: obj1= numberExpression
                                    {
                                    pushFollow(FOLLOW_numberExpression_in_actionGather7925);
                                    obj1=numberExpression();

                                    state._fsp--;
                                    if (state.failed) return action;

                                    }
                                    break;
                                case 2 :
                                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1419:71: obj2= numberListExpression
                                    {
                                    pushFollow(FOLLOW_numberListExpression_in_actionGather7933);
                                    obj2=numberListExpression();

                                    state._fsp--;
                                    if (state.failed) return action;

                                    }
                                    break;

                            }


                            if ( state.backtracking==0 ) {left.add(fname); right.add(obj1 != null? obj1 : obj2);}

                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1420:5: ( COMMA fname= stringExpression ASSIGN_EQUAL (obj1= numberExpression |obj2= numberListExpression ) )*
                            loop155:
                            do {
                                int alt155=2;
                                int LA155_0 = input.LA(1);

                                if ( (LA155_0==COMMA) ) {
                                    alt155=1;
                                }


                                switch (alt155) {
                            	case 1 :
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1420:6: COMMA fname= stringExpression ASSIGN_EQUAL (obj1= numberExpression |obj2= numberListExpression )
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_actionGather7944); if (state.failed) return action;

                            	    pushFollow(FOLLOW_stringExpression_in_actionGather7950);
                            	    fname=stringExpression();

                            	    state._fsp--;
                            	    if (state.failed) return action;

                            	    match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_actionGather7952); if (state.failed) return action;

                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1420:50: (obj1= numberExpression |obj2= numberListExpression )
                            	    int alt154=2;
                            	    switch ( input.LA(1) ) {
                            	    case Identifier:
                            	        {
                            	        int LA154_1 = input.LA(2);

                            	        if ( (!((((isVariableOfType(input.LT(1).getText(), "INTLIST"))||(isVariableOfType(input.LT(1).getText(), "DOUBLELIST"))||(isVariableOfType(input.LT(1).getText(), "FLOATLIST")))))) ) {
                            	            alt154=1;
                            	        }
                            	        else if ( (((isVariableOfType(input.LT(1).getText(), "INTLIST"))||(isVariableOfType(input.LT(1).getText(), "DOUBLELIST"))||(isVariableOfType(input.LT(1).getText(), "FLOATLIST")))) ) {
                            	            alt154=2;
                            	        }
                            	        else {
                            	            if (state.backtracking>0) {state.failed=true; return action;}
                            	            NoViableAltException nvae =
                            	                new NoViableAltException("", 154, 1, input);

                            	            throw nvae;

                            	        }
                            	        }
                            	        break;
                            	    case EXP:
                            	    case LOGN:
                            	    case SIN:
                            	    case COS:
                            	    case TAN:
                            	    case DecimalLiteral:
                            	    case FloatingPointLiteral:
                            	    case LPAREN:
                            	    case MINUS:
                            	        {
                            	        alt154=1;
                            	        }
                            	        break;
                            	    case LCURLY:
                            	        {
                            	        alt154=2;
                            	        }
                            	        break;
                            	    default:
                            	        if (state.backtracking>0) {state.failed=true; return action;}
                            	        NoViableAltException nvae =
                            	            new NoViableAltException("", 154, 0, input);

                            	        throw nvae;

                            	    }

                            	    switch (alt154) {
                            	        case 1 :
                            	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1420:51: obj1= numberExpression
                            	            {
                            	            pushFollow(FOLLOW_numberExpression_in_actionGather7959);
                            	            obj1=numberExpression();

                            	            state._fsp--;
                            	            if (state.failed) return action;

                            	            }
                            	            break;
                            	        case 2 :
                            	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1420:77: obj2= numberListExpression
                            	            {
                            	            pushFollow(FOLLOW_numberListExpression_in_actionGather7967);
                            	            obj2=numberListExpression();

                            	            state._fsp--;
                            	            if (state.failed) return action;

                            	            }
                            	            break;

                            	    }


                            	    if ( state.backtracking==0 ) {left.add(fname);right.add(obj1 != null? obj1 : obj2);}

                            	    }
                            	    break;

                            	default :
                            	    break loop155;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }


            if ( state.backtracking==0 ) {action = ActionFactory.createStructureAction(name, structure, indexes, left, right);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionGather7999); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionGather"



    // $ANTLR start "actionFill"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1428:1: actionFill returns [RutaAction action = null] : name= FILL LPAREN structure= typeExpression ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )+ RPAREN ;
    public final RutaAction actionFill() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression structure =null;

        Expression fname =null;

        Expression obj1 =null;



            List left = new ArrayList();
            List right = new ArrayList();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1433:5: (name= FILL LPAREN structure= typeExpression ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )+ RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1434:5: name= FILL LPAREN structure= typeExpression ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )+ RPAREN
            {
            name=(Token)match(input,FILL,FOLLOW_FILL_in_actionFill8034); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionFill8036); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionFill8042);
            structure=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createStructureAction(name, structure, null, left, right);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1436:5: ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )+
            int cnt158=0;
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);

                if ( (LA158_0==COMMA) ) {
                    alt158=1;
                }


                switch (alt158) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1437:5: COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_actionFill8060); if (state.failed) return action;

            	    pushFollow(FOLLOW_stringExpression_in_actionFill8066);
            	    fname=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_actionFill8068); if (state.failed) return action;

            	    pushFollow(FOLLOW_argument_in_actionFill8078);
            	    obj1=argument();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {left.add(fname); right.add(obj1);}

            	    }
            	    break;

            	default :
            	    if ( cnt158 >= 1 ) break loop158;
            	    if (state.backtracking>0) {state.failed=true; return action;}
                        EarlyExitException eee =
                            new EarlyExitException(158, input);
                        throw eee;
                }
                cnt158++;
            } while (true);


            if ( state.backtracking==0 ) {action = ActionFactory.createStructureAction(name, structure, null, left, right);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionFill8100); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionFill"



    // $ANTLR start "actionColor"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1445:1: actionColor returns [RutaAction action = null] : name= COLOR LPAREN type= typeExpression COMMA bgcolor= stringExpression ( COMMA fgcolor= stringExpression ( COMMA selected= booleanExpression )? )? RPAREN ;
    public final RutaAction actionColor() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression type =null;

        Expression bgcolor =null;

        Expression fgcolor =null;

        Expression selected =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1446:5: (name= COLOR LPAREN type= typeExpression COMMA bgcolor= stringExpression ( COMMA fgcolor= stringExpression ( COMMA selected= booleanExpression )? )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1447:5: name= COLOR LPAREN type= typeExpression COMMA bgcolor= stringExpression ( COMMA fgcolor= stringExpression ( COMMA selected= booleanExpression )? )? RPAREN
            {
            name=(Token)match(input,COLOR,FOLLOW_COLOR_in_actionColor8137); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionColor8139); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionColor8145);
            type=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, type, bgcolor, fgcolor, selected);}

            match(input,COMMA,FOLLOW_COMMA_in_actionColor8159); if (state.failed) return action;

            pushFollow(FOLLOW_stringExpression_in_actionColor8170);
            bgcolor=stringExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, type, bgcolor, fgcolor, selected);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1452:5: ( COMMA fgcolor= stringExpression ( COMMA selected= booleanExpression )? )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==COMMA) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1452:6: COMMA fgcolor= stringExpression ( COMMA selected= booleanExpression )?
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_actionColor8184); if (state.failed) return action;

                    pushFollow(FOLLOW_stringExpression_in_actionColor8194);
                    fgcolor=stringExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, type, bgcolor, fgcolor, selected);}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1455:5: ( COMMA selected= booleanExpression )?
                    int alt159=2;
                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==COMMA) ) {
                        alt159=1;
                    }
                    switch (alt159) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1455:6: COMMA selected= booleanExpression
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_actionColor8208); if (state.failed) return action;

                            pushFollow(FOLLOW_booleanExpression_in_actionColor8218);
                            selected=booleanExpression();

                            state._fsp--;
                            if (state.failed) return action;

                            }
                            break;

                    }


                    }
                    break;

            }


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, type, bgcolor, fgcolor, selected);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionColor8234); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionColor"



    // $ANTLR start "actionDel"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1461:1: actionDel returns [RutaAction action = null] : name= DEL ;
    public final RutaAction actionDel() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1462:5: (name= DEL )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1463:5: name= DEL
            {
            name=(Token)match(input,DEL,FOLLOW_DEL_in_actionDel8266); if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, new ArrayList());}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionDel"



    // $ANTLR start "actionLog"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1467:1: actionLog returns [RutaAction action = null] : name= LOG LPAREN lit= stringExpression ( COMMA log= LogLevel )? RPAREN ;
    public final RutaAction actionLog() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Token log=null;
        Expression lit =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1468:5: (name= LOG LPAREN lit= stringExpression ( COMMA log= LogLevel )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1469:5: name= LOG LPAREN lit= stringExpression ( COMMA log= LogLevel )? RPAREN
            {
            name=(Token)match(input,LOG,FOLLOW_LOG_in_actionLog8312); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionLog8314); if (state.failed) return action;

            pushFollow(FOLLOW_stringExpression_in_actionLog8320);
            lit=stringExpression();

            state._fsp--;
            if (state.failed) return action;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1469:46: ( COMMA log= LogLevel )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==COMMA) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1469:47: COMMA log= LogLevel
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_actionLog8323); if (state.failed) return action;

                    log=(Token)match(input,LogLevel,FOLLOW_LogLevel_in_actionLog8329); if (state.failed) return action;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {action = ActionFactory.createLogAction(name, lit, log);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionLog8345); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionLog"



    // $ANTLR start "actionMark"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1474:1: actionMark returns [RutaAction action = null] : name= MARK LPAREN type= typeExpression ( COMMA (index= numberExpression )=>index= numberExpression )* RPAREN ;
    public final RutaAction actionMark() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression type =null;

        Expression index =null;



        List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1478:5: (name= MARK LPAREN type= typeExpression ( COMMA (index= numberExpression )=>index= numberExpression )* RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1479:5: name= MARK LPAREN type= typeExpression ( COMMA (index= numberExpression )=>index= numberExpression )* RPAREN
            {
            name=(Token)match(input,MARK,FOLLOW_MARK_in_actionMark8383); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionMark8385); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionMark8396);
            type=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {list.add(type);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1482:5: ( COMMA (index= numberExpression )=>index= numberExpression )*
            loop162:
            do {
                int alt162=2;
                int LA162_0 = input.LA(1);

                if ( (LA162_0==COMMA) ) {
                    alt162=1;
                }


                switch (alt162) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1483:5: COMMA (index= numberExpression )=>index= numberExpression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_actionMark8414); if (state.failed) return action;

            	    pushFollow(FOLLOW_numberExpression_in_actionMark8430);
            	    index=numberExpression();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {list.add(index);}

            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionMark8452); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionMark"



    // $ANTLR start "actionShift"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1489:1: actionShift returns [RutaAction action = null] : name= SHIFT LPAREN type= typeExpression ( COMMA (index= numberExpression )=>index= numberExpression )* RPAREN ;
    public final RutaAction actionShift() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression type =null;

        Expression index =null;



        List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1493:5: (name= SHIFT LPAREN type= typeExpression ( COMMA (index= numberExpression )=>index= numberExpression )* RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1494:5: name= SHIFT LPAREN type= typeExpression ( COMMA (index= numberExpression )=>index= numberExpression )* RPAREN
            {
            name=(Token)match(input,SHIFT,FOLLOW_SHIFT_in_actionShift8489); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionShift8491); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionShift8502);
            type=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {list.add(type);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1497:5: ( COMMA (index= numberExpression )=>index= numberExpression )*
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==COMMA) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1498:5: COMMA (index= numberExpression )=>index= numberExpression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_actionShift8520); if (state.failed) return action;

            	    pushFollow(FOLLOW_numberExpression_in_actionShift8536);
            	    index=numberExpression();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {list.add(index);}

            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionShift8558); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionShift"



    // $ANTLR start "actionMarkScore"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1504:1: actionMarkScore returns [RutaAction action = null] : name= MARKSCORE LPAREN score= numberExpression COMMA type= typeExpression ( COMMA (index= numberExpression )=>index= numberExpression )* RPAREN ;
    public final RutaAction actionMarkScore() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression score =null;

        Expression type =null;

        Expression index =null;



        List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1508:5: (name= MARKSCORE LPAREN score= numberExpression COMMA type= typeExpression ( COMMA (index= numberExpression )=>index= numberExpression )* RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1509:5: name= MARKSCORE LPAREN score= numberExpression COMMA type= typeExpression ( COMMA (index= numberExpression )=>index= numberExpression )* RPAREN
            {
            name=(Token)match(input,MARKSCORE,FOLLOW_MARKSCORE_in_actionMarkScore8595); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionMarkScore8597); if (state.failed) return action;

            pushFollow(FOLLOW_numberExpression_in_actionMarkScore8603);
            score=numberExpression();

            state._fsp--;
            if (state.failed) return action;

            match(input,COMMA,FOLLOW_COMMA_in_actionMarkScore8605); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionMarkScore8611);
            type=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {list.add(score); list.add(type);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1511:5: ( COMMA (index= numberExpression )=>index= numberExpression )*
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==COMMA) ) {
                    alt164=1;
                }


                switch (alt164) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1512:5: COMMA (index= numberExpression )=>index= numberExpression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_actionMarkScore8629); if (state.failed) return action;

            	    pushFollow(FOLLOW_numberExpression_in_actionMarkScore8645);
            	    index=numberExpression();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {list.add(index);}

            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionMarkScore8667); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionMarkScore"



    // $ANTLR start "actionMarkOnce"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1518:1: actionMarkOnce returns [RutaAction action = null] : name= MARKONCE LPAREN ( (score= numberExpression )=>score= numberExpression COMMA )? (type= typeExpression )=>type= typeExpression ( COMMA (index= numberExpression )=>index= numberExpression )* RPAREN ;
    public final RutaAction actionMarkOnce() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression score =null;

        Expression type =null;

        Expression index =null;



        List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1522:5: (name= MARKONCE LPAREN ( (score= numberExpression )=>score= numberExpression COMMA )? (type= typeExpression )=>type= typeExpression ( COMMA (index= numberExpression )=>index= numberExpression )* RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1523:5: name= MARKONCE LPAREN ( (score= numberExpression )=>score= numberExpression COMMA )? (type= typeExpression )=>type= typeExpression ( COMMA (index= numberExpression )=>index= numberExpression )* RPAREN
            {
            name=(Token)match(input,MARKONCE,FOLLOW_MARKONCE_in_actionMarkOnce8704); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionMarkOnce8706); if (state.failed) return action;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1523:28: ( (score= numberExpression )=>score= numberExpression COMMA )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==Identifier) ) {
                int LA165_1 = input.LA(2);

                if ( (synpred36_RutaParser()) ) {
                    alt165=1;
                }
            }
            else if ( (LA165_0==MINUS) && (synpred36_RutaParser())) {
                alt165=1;
            }
            else if ( (LA165_0==DecimalLiteral) && (synpred36_RutaParser())) {
                alt165=1;
            }
            else if ( (LA165_0==FloatingPointLiteral) && (synpred36_RutaParser())) {
                alt165=1;
            }
            else if ( (LA165_0==LPAREN) && (synpred36_RutaParser())) {
                alt165=1;
            }
            else if ( ((LA165_0 >= EXP && LA165_0 <= TAN)) && (synpred36_RutaParser())) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1523:29: (score= numberExpression )=>score= numberExpression COMMA
                    {
                    pushFollow(FOLLOW_numberExpression_in_actionMarkOnce8723);
                    score=numberExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    match(input,COMMA,FOLLOW_COMMA_in_actionMarkOnce8725); if (state.failed) return action;

                    }
                    break;

            }


            pushFollow(FOLLOW_typeExpression_in_actionMarkOnce8743);
            type=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {list.add(score); list.add(type);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1525:5: ( COMMA (index= numberExpression )=>index= numberExpression )*
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==COMMA) ) {
                    alt166=1;
                }


                switch (alt166) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1526:5: COMMA (index= numberExpression )=>index= numberExpression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_actionMarkOnce8761); if (state.failed) return action;

            	    pushFollow(FOLLOW_numberExpression_in_actionMarkOnce8777);
            	    index=numberExpression();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {list.add(index);}

            	    }
            	    break;

            	default :
            	    break loop166;
                }
            } while (true);


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionMarkOnce8799); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionMarkOnce"



    // $ANTLR start "actionMarkFast"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1532:1: actionMarkFast returns [RutaAction action = null] : name= MARKFAST LPAREN type= typeExpression COMMA (list1= wordListExpression |list2= stringListExpression ) ( COMMA ignore= booleanExpression ( COMMA numExpr= numberExpression ( COMMA ignoreWS= booleanExpression )? )? )? RPAREN ;
    public final RutaAction actionMarkFast() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression type =null;

        Expression list1 =null;

        Expression list2 =null;

        Expression ignore =null;

        Expression numExpr =null;

        Expression ignoreWS =null;



         Expression list = null;

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1536:5: (name= MARKFAST LPAREN type= typeExpression COMMA (list1= wordListExpression |list2= stringListExpression ) ( COMMA ignore= booleanExpression ( COMMA numExpr= numberExpression ( COMMA ignoreWS= booleanExpression )? )? )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1537:5: name= MARKFAST LPAREN type= typeExpression COMMA (list1= wordListExpression |list2= stringListExpression ) ( COMMA ignore= booleanExpression ( COMMA numExpr= numberExpression ( COMMA ignoreWS= booleanExpression )? )? )? RPAREN
            {
            name=(Token)match(input,MARKFAST,FOLLOW_MARKFAST_in_actionMarkFast8836); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionMarkFast8838); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionMarkFast8844);
            type=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, type, list, ignore, numExpr);}

            match(input,COMMA,FOLLOW_COMMA_in_actionMarkFast8857); if (state.failed) return action;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1539:11: (list1= wordListExpression |list2= stringListExpression )
            int alt167=2;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                int LA167_1 = input.LA(2);

                if ( (!(((isVariableOfType(input.LT(1).getText(), "STRINGLIST"))))) ) {
                    alt167=1;
                }
                else if ( ((isVariableOfType(input.LT(1).getText(), "STRINGLIST"))) ) {
                    alt167=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return action;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 167, 1, input);

                    throw nvae;

                }
                }
                break;
            case RessourceLiteral:
                {
                alt167=1;
                }
                break;
            case LCURLY:
                {
                alt167=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return action;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;

            }

            switch (alt167) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1539:12: list1= wordListExpression
                    {
                    pushFollow(FOLLOW_wordListExpression_in_actionMarkFast8864);
                    list1=wordListExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1539:41: list2= stringListExpression
                    {
                    pushFollow(FOLLOW_stringListExpression_in_actionMarkFast8872);
                    list2=stringListExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {list = list1 == null ? list2 : list1;}

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, type, list, ignore, numExpr);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1541:5: ( COMMA ignore= booleanExpression ( COMMA numExpr= numberExpression ( COMMA ignoreWS= booleanExpression )? )? )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==COMMA) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1541:6: COMMA ignore= booleanExpression ( COMMA numExpr= numberExpression ( COMMA ignoreWS= booleanExpression )? )?
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_actionMarkFast8888); if (state.failed) return action;

                    pushFollow(FOLLOW_booleanExpression_in_actionMarkFast8894);
                    ignore=booleanExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1541:39: ( COMMA numExpr= numberExpression ( COMMA ignoreWS= booleanExpression )? )?
                    int alt169=2;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==COMMA) ) {
                        alt169=1;
                    }
                    switch (alt169) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1541:40: COMMA numExpr= numberExpression ( COMMA ignoreWS= booleanExpression )?
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_actionMarkFast8897); if (state.failed) return action;

                            pushFollow(FOLLOW_numberExpression_in_actionMarkFast8903);
                            numExpr=numberExpression();

                            state._fsp--;
                            if (state.failed) return action;

                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1541:73: ( COMMA ignoreWS= booleanExpression )?
                            int alt168=2;
                            int LA168_0 = input.LA(1);

                            if ( (LA168_0==COMMA) ) {
                                alt168=1;
                            }
                            switch (alt168) {
                                case 1 :
                                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1541:74: COMMA ignoreWS= booleanExpression
                                    {
                                    match(input,COMMA,FOLLOW_COMMA_in_actionMarkFast8906); if (state.failed) return action;

                                    pushFollow(FOLLOW_booleanExpression_in_actionMarkFast8912);
                                    ignoreWS=booleanExpression();

                                    state._fsp--;
                                    if (state.failed) return action;

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, type, list, ignore, numExpr, ignoreWS);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionMarkFast8932); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionMarkFast"



    // $ANTLR start "actionMarkLast"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1546:1: actionMarkLast returns [RutaAction action = null] : name= MARKLAST LPAREN type= typeExpression RPAREN ;
    public final RutaAction actionMarkLast() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression type =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1547:5: (name= MARKLAST LPAREN type= typeExpression RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1548:5: name= MARKLAST LPAREN type= typeExpression RPAREN
            {
            name=(Token)match(input,MARKLAST,FOLLOW_MARKLAST_in_actionMarkLast8964); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionMarkLast8966); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionMarkLast8972);
            type=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, type);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionMarkLast8985); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionMarkLast"



    // $ANTLR start "actionReplace"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1554:1: actionReplace returns [RutaAction action = null] : name= REPLACE LPAREN lit= stringExpression RPAREN ;
    public final RutaAction actionReplace() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression lit =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1555:5: (name= REPLACE LPAREN lit= stringExpression RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1556:5: name= REPLACE LPAREN lit= stringExpression RPAREN
            {
            name=(Token)match(input,REPLACE,FOLLOW_REPLACE_in_actionReplace9018); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionReplace9020); if (state.failed) return action;

            pushFollow(FOLLOW_stringExpression_in_actionReplace9026);
            lit=stringExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, lit);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionReplace9039); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionReplace"



    // $ANTLR start "actionRetainType"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1562:1: actionRetainType returns [RutaAction action = null] : name= RETAINTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN )? ;
    public final RutaAction actionRetainType() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression id =null;



        List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1566:5: (name= RETAINTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN )? )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1567:5: name= RETAINTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN )?
            {
            name=(Token)match(input,RETAINTYPE,FOLLOW_RETAINTYPE_in_actionRetainType9085); if (state.failed) return action;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1567:23: ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==LPAREN) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1567:24: LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_actionRetainType9088); if (state.failed) return action;

                    pushFollow(FOLLOW_typeExpression_in_actionRetainType9094);
                    id=typeExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    if ( state.backtracking==0 ) {list.add(id);}

                    if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1569:5: ( COMMA id= typeExpression )*
                    loop171:
                    do {
                        int alt171=2;
                        int LA171_0 = input.LA(1);

                        if ( (LA171_0==COMMA) ) {
                            alt171=1;
                        }


                        switch (alt171) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1569:6: COMMA id= typeExpression
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_actionRetainType9110); if (state.failed) return action;

                    	    pushFollow(FOLLOW_typeExpression_in_actionRetainType9116);
                    	    id=typeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return action;

                    	    if ( state.backtracking==0 ) {list.add(id);}

                    	    }
                    	    break;

                    	default :
                    	    break loop171;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

                    match(input,RPAREN,FOLLOW_RPAREN_in_actionRetainType9133); if (state.failed) return action;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionRetainType"



    // $ANTLR start "actionFilterType"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1576:1: actionFilterType returns [RutaAction action = null] : name= FILTERTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN )? ;
    public final RutaAction actionFilterType() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression id =null;



        List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1580:5: (name= FILTERTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN )? )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1581:5: name= FILTERTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN )?
            {
            name=(Token)match(input,FILTERTYPE,FOLLOW_FILTERTYPE_in_actionFilterType9183); if (state.failed) return action;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1581:23: ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==LPAREN) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1581:24: LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_actionFilterType9186); if (state.failed) return action;

                    pushFollow(FOLLOW_typeExpression_in_actionFilterType9192);
                    id=typeExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    if ( state.backtracking==0 ) {list.add(id);}

                    if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1583:5: ( COMMA id= typeExpression )*
                    loop173:
                    do {
                        int alt173=2;
                        int LA173_0 = input.LA(1);

                        if ( (LA173_0==COMMA) ) {
                            alt173=1;
                        }


                        switch (alt173) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1583:6: COMMA id= typeExpression
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_actionFilterType9208); if (state.failed) return action;

                    	    pushFollow(FOLLOW_typeExpression_in_actionFilterType9214);
                    	    id=typeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return action;

                    	    if ( state.backtracking==0 ) {list.add(id);}

                    	    }
                    	    break;

                    	default :
                    	    break loop173;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

                    match(input,RPAREN,FOLLOW_RPAREN_in_actionFilterType9231); if (state.failed) return action;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionFilterType"



    // $ANTLR start "actionAddFilterType"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1589:1: actionAddFilterType returns [RutaAction action = null] : name= ADDFILTERTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN ) ;
    public final RutaAction actionAddFilterType() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression id =null;



        List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1593:5: (name= ADDFILTERTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1594:5: name= ADDFILTERTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN )
            {
            name=(Token)match(input,ADDFILTERTYPE,FOLLOW_ADDFILTERTYPE_in_actionAddFilterType9283); if (state.failed) return action;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1594:26: ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1594:27: LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_actionAddFilterType9286); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionAddFilterType9292);
            id=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {list.add(id);}

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1596:5: ( COMMA id= typeExpression )*
            loop175:
            do {
                int alt175=2;
                int LA175_0 = input.LA(1);

                if ( (LA175_0==COMMA) ) {
                    alt175=1;
                }


                switch (alt175) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1596:6: COMMA id= typeExpression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_actionAddFilterType9308); if (state.failed) return action;

            	    pushFollow(FOLLOW_typeExpression_in_actionAddFilterType9314);
            	    id=typeExpression();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {list.add(id);}

            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionAddFilterType9331); if (state.failed) return action;

            }


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionAddFilterType"



    // $ANTLR start "actionAddRetainType"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1602:1: actionAddRetainType returns [RutaAction action = null] : name= ADDRETAINTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN ) ;
    public final RutaAction actionAddRetainType() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression id =null;



        List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1606:5: (name= ADDRETAINTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1607:5: name= ADDRETAINTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN )
            {
            name=(Token)match(input,ADDRETAINTYPE,FOLLOW_ADDRETAINTYPE_in_actionAddRetainType9378); if (state.failed) return action;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1607:26: ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1607:27: LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_actionAddRetainType9381); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionAddRetainType9387);
            id=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {list.add(id);}

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1609:5: ( COMMA id= typeExpression )*
            loop176:
            do {
                int alt176=2;
                int LA176_0 = input.LA(1);

                if ( (LA176_0==COMMA) ) {
                    alt176=1;
                }


                switch (alt176) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1609:6: COMMA id= typeExpression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_actionAddRetainType9403); if (state.failed) return action;

            	    pushFollow(FOLLOW_typeExpression_in_actionAddRetainType9409);
            	    id=typeExpression();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {list.add(id);}

            	    }
            	    break;

            	default :
            	    break loop176;
                }
            } while (true);


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionAddRetainType9426); if (state.failed) return action;

            }


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionAddRetainType"



    // $ANTLR start "actionRemoveFilterType"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1616:1: actionRemoveFilterType returns [RutaAction action = null] : name= REMOVEFILTERTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN ) ;
    public final RutaAction actionRemoveFilterType() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression id =null;



        List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1620:5: (name= REMOVEFILTERTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1621:5: name= REMOVEFILTERTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN )
            {
            name=(Token)match(input,REMOVEFILTERTYPE,FOLLOW_REMOVEFILTERTYPE_in_actionRemoveFilterType9474); if (state.failed) return action;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1621:29: ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1621:30: LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_actionRemoveFilterType9477); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionRemoveFilterType9483);
            id=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {list.add(id);}

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1623:5: ( COMMA id= typeExpression )*
            loop177:
            do {
                int alt177=2;
                int LA177_0 = input.LA(1);

                if ( (LA177_0==COMMA) ) {
                    alt177=1;
                }


                switch (alt177) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1623:6: COMMA id= typeExpression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_actionRemoveFilterType9499); if (state.failed) return action;

            	    pushFollow(FOLLOW_typeExpression_in_actionRemoveFilterType9505);
            	    id=typeExpression();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {list.add(id);}

            	    }
            	    break;

            	default :
            	    break loop177;
                }
            } while (true);


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionRemoveFilterType9522); if (state.failed) return action;

            }


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionRemoveFilterType"



    // $ANTLR start "actionRemoveRetainType"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1629:1: actionRemoveRetainType returns [RutaAction action = null] : name= REMOVERETAINTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN ) ;
    public final RutaAction actionRemoveRetainType() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression id =null;



        List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1633:5: (name= REMOVERETAINTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1634:5: name= REMOVERETAINTYPE ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN )
            {
            name=(Token)match(input,REMOVERETAINTYPE,FOLLOW_REMOVERETAINTYPE_in_actionRemoveRetainType9569); if (state.failed) return action;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1634:29: ( LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1634:30: LPAREN id= typeExpression ( COMMA id= typeExpression )* RPAREN
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_actionRemoveRetainType9572); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionRemoveRetainType9578);
            id=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {list.add(id);}

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1636:5: ( COMMA id= typeExpression )*
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);

                if ( (LA178_0==COMMA) ) {
                    alt178=1;
                }


                switch (alt178) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1636:6: COMMA id= typeExpression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_actionRemoveRetainType9594); if (state.failed) return action;

            	    pushFollow(FOLLOW_typeExpression_in_actionRemoveRetainType9600);
            	    id=typeExpression();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {list.add(id);}

            	    }
            	    break;

            	default :
            	    break loop178;
                }
            } while (true);


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionRemoveRetainType9617); if (state.failed) return action;

            }


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionRemoveRetainType"



    // $ANTLR start "actionCall"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1642:1: actionCall returns [RutaAction action = null] : name= CALL lp= LPAREN ns= dottedComponentReference RPAREN ;
    public final RutaAction actionCall() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Token lp=null;
        ComponentReference ns =null;



        String string = "";


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1647:5: (name= CALL lp= LPAREN ns= dottedComponentReference RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1648:5: name= CALL lp= LPAREN ns= dottedComponentReference RPAREN
            {
            name=(Token)match(input,CALL,FOLLOW_CALL_in_actionCall9659); if (state.failed) return action;

            lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_actionCall9665); if (state.failed) return action;

            if ( state.backtracking==0 ) {   action = ActionFactory.createCallAction(name, StatementFactory.createEmtpyComponentReference(lp));}

            pushFollow(FOLLOW_dottedComponentReference_in_actionCall9687);
            ns=dottedComponentReference();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {   if(ns != null) {action = ActionFactory.createCallAction(name, ns);}}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionCall9701); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionCall"



    // $ANTLR start "actionConfigure"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1657:1: actionConfigure returns [RutaAction action = null] : name= CONFIGURE lp= LPAREN ns= dottedComponentReference ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )* )? RPAREN ;
    public final RutaAction actionConfigure() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Token lp=null;
        ComponentReference ns =null;

        Expression fname =null;

        Expression obj1 =null;



            List left = new ArrayList();
            List right = new ArrayList();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1662:5: (name= CONFIGURE lp= LPAREN ns= dottedComponentReference ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )* )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1663:5: name= CONFIGURE lp= LPAREN ns= dottedComponentReference ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )* )? RPAREN
            {
            name=(Token)match(input,CONFIGURE,FOLLOW_CONFIGURE_in_actionConfigure9736); if (state.failed) return action;

            lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_actionConfigure9742); if (state.failed) return action;

            if ( state.backtracking==0 ) {   action = ActionFactory.createConfigureAction(name, StatementFactory.createEmtpyComponentReference(lp), null , null);}

            pushFollow(FOLLOW_dottedComponentReference_in_actionConfigure9764);
            ns=dottedComponentReference();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {   if(ns != null) {action = ActionFactory.createConfigureAction(name, ns, null , null);}}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1669:6: ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )* )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==COMMA) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1669:7: COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )*
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_actionConfigure9785); if (state.failed) return action;

                    pushFollow(FOLLOW_stringExpression_in_actionConfigure9791);
                    fname=stringExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_actionConfigure9793); if (state.failed) return action;

                    pushFollow(FOLLOW_argument_in_actionConfigure9799);
                    obj1=argument();

                    state._fsp--;
                    if (state.failed) return action;

                    if ( state.backtracking==0 ) {left.add(fname); right.add(obj1);}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1670:5: ( COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument )*
                    loop179:
                    do {
                        int alt179=2;
                        int LA179_0 = input.LA(1);

                        if ( (LA179_0==COMMA) ) {
                            alt179=1;
                        }


                        switch (alt179) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1670:6: COMMA fname= stringExpression ASSIGN_EQUAL obj1= argument
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_actionConfigure9809); if (state.failed) return action;

                    	    pushFollow(FOLLOW_stringExpression_in_actionConfigure9815);
                    	    fname=stringExpression();

                    	    state._fsp--;
                    	    if (state.failed) return action;

                    	    match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_actionConfigure9817); if (state.failed) return action;

                    	    pushFollow(FOLLOW_argument_in_actionConfigure9823);
                    	    obj1=argument();

                    	    state._fsp--;
                    	    if (state.failed) return action;

                    	    if ( state.backtracking==0 ) {left.add(fname);right.add(obj1);}

                    	    }
                    	    break;

                    	default :
                    	    break loop179;
                        }
                    } while (true);


                    }
                    break;

            }


            if ( state.backtracking==0 ) {   action = ActionFactory.createConfigureAction(name, ns, left , right);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionConfigure9847); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionConfigure"



    // $ANTLR start "actionExec"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1677:1: actionExec returns [RutaAction action = null] : name= EXEC lp= LPAREN ns= dottedComponentReference ( COMMA tl= typeListExpression )? RPAREN ;
    public final RutaAction actionExec() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Token lp=null;
        ComponentReference ns =null;

        Expression tl =null;



        String string = "";

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1681:5: (name= EXEC lp= LPAREN ns= dottedComponentReference ( COMMA tl= typeListExpression )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1682:5: name= EXEC lp= LPAREN ns= dottedComponentReference ( COMMA tl= typeListExpression )? RPAREN
            {
            name=(Token)match(input,EXEC,FOLLOW_EXEC_in_actionExec9882); if (state.failed) return action;

            lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_actionExec9888); if (state.failed) return action;

            if ( state.backtracking==0 ) {   action = ActionFactory.createCallAction(name, StatementFactory.createEmtpyComponentReference(lp));}

            pushFollow(FOLLOW_dottedComponentReference_in_actionExec9906);
            ns=dottedComponentReference();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {   if(ns != null) {action = ActionFactory.createCallAction(name, ns, null);}}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1686:6: ( COMMA tl= typeListExpression )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==COMMA) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1686:7: COMMA tl= typeListExpression
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_actionExec9922); if (state.failed) return action;

                    pushFollow(FOLLOW_typeListExpression_in_actionExec9928);
                    tl=typeListExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {   if(ns != null) {action = ActionFactory.createCallAction(name, ns, tl);}}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionExec9944); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionExec"



    // $ANTLR start "actionAssign"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1692:1: actionAssign returns [RutaAction action = null] : name= ASSIGN LPAREN (id= Identifier COMMA e= argument ) RPAREN ;
    public final RutaAction actionAssign() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Token id=null;
        Expression e =null;



            VariableReference ref = null;

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1696:5: (name= ASSIGN LPAREN (id= Identifier COMMA e= argument ) RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1697:5: name= ASSIGN LPAREN (id= Identifier COMMA e= argument ) RPAREN
            {
            name=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_actionAssign9986); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionAssign9988); if (state.failed) return action;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1698:5: (id= Identifier COMMA e= argument )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1698:6: id= Identifier COMMA e= argument
            {
            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_actionAssign9999); if (state.failed) return action;

            if ( state.backtracking==0 ) {
                ref = ExpressionFactory.createGenericVariableReference(id);
                action = ActionFactory.createAction(name, ref, e);}

            match(input,COMMA,FOLLOW_COMMA_in_actionAssign10017); if (state.failed) return action;

            pushFollow(FOLLOW_argument_in_actionAssign10023);
            e=argument();

            state._fsp--;
            if (state.failed) return action;

            }


            match(input,RPAREN,FOLLOW_RPAREN_in_actionAssign10031); if (state.failed) return action;

            if ( state.backtracking==0 ) {
                ref = ExpressionFactory.createGenericVariableReference(id);
                action = ActionFactory.createAction(name, ref, e);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionAssign"



    // $ANTLR start "actionSetFeature"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1711:1: actionSetFeature returns [RutaAction action = null] : name= SETFEATURE LPAREN f= stringExpression COMMA v= argument RPAREN ;
    public final RutaAction actionSetFeature() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression f =null;

        Expression v =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1712:5: (name= SETFEATURE LPAREN f= stringExpression COMMA v= argument RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1713:5: name= SETFEATURE LPAREN f= stringExpression COMMA v= argument RPAREN
            {
            name=(Token)match(input,SETFEATURE,FOLLOW_SETFEATURE_in_actionSetFeature10068); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionSetFeature10070); if (state.failed) return action;

            pushFollow(FOLLOW_stringExpression_in_actionSetFeature10076);
            f=stringExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f, v);}

            match(input,COMMA,FOLLOW_COMMA_in_actionSetFeature10090); if (state.failed) return action;

            pushFollow(FOLLOW_argument_in_actionSetFeature10096);
            v=argument();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f, v);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionSetFeature10109); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionSetFeature"



    // $ANTLR start "actionGetFeature"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1720:1: actionGetFeature returns [RutaAction action = null] : name= GETFEATURE LPAREN f= stringExpression COMMA v= variable RPAREN ;
    public final RutaAction actionGetFeature() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression f =null;

        Expression v =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1721:5: (name= GETFEATURE LPAREN f= stringExpression COMMA v= variable RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1722:5: name= GETFEATURE LPAREN f= stringExpression COMMA v= variable RPAREN
            {
            name=(Token)match(input,GETFEATURE,FOLLOW_GETFEATURE_in_actionGetFeature10138); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionGetFeature10140); if (state.failed) return action;

            pushFollow(FOLLOW_stringExpression_in_actionGetFeature10146);
            f=stringExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f, v);}

            match(input,COMMA,FOLLOW_COMMA_in_actionGetFeature10159); if (state.failed) return action;

            pushFollow(FOLLOW_variable_in_actionGetFeature10165);
            v=variable();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f, v);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionGetFeature10178); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionGetFeature"



    // $ANTLR start "actionDynamicAnchoring"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1730:1: actionDynamicAnchoring returns [RutaAction action = null] : name= DYNAMICANCHORING LPAREN active= booleanExpression ( COMMA penalty= numberExpression ( COMMA factor= numberExpression )? )? RPAREN ;
    public final RutaAction actionDynamicAnchoring() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression active =null;

        Expression penalty =null;

        Expression factor =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1731:5: (name= DYNAMICANCHORING LPAREN active= booleanExpression ( COMMA penalty= numberExpression ( COMMA factor= numberExpression )? )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1732:5: name= DYNAMICANCHORING LPAREN active= booleanExpression ( COMMA penalty= numberExpression ( COMMA factor= numberExpression )? )? RPAREN
            {
            name=(Token)match(input,DYNAMICANCHORING,FOLLOW_DYNAMICANCHORING_in_actionDynamicAnchoring10208); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionDynamicAnchoring10210); if (state.failed) return action;

            pushFollow(FOLLOW_booleanExpression_in_actionDynamicAnchoring10216);
            active=booleanExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, active);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1734:5: ( COMMA penalty= numberExpression ( COMMA factor= numberExpression )? )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==COMMA) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1734:6: COMMA penalty= numberExpression ( COMMA factor= numberExpression )?
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_actionDynamicAnchoring10231); if (state.failed) return action;

                    pushFollow(FOLLOW_numberExpression_in_actionDynamicAnchoring10237);
                    penalty=numberExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, active, penalty);}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1736:5: ( COMMA factor= numberExpression )?
                    int alt182=2;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==COMMA) ) {
                        alt182=1;
                    }
                    switch (alt182) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1736:6: COMMA factor= numberExpression
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_actionDynamicAnchoring10251); if (state.failed) return action;

                            pushFollow(FOLLOW_numberExpression_in_actionDynamicAnchoring10257);
                            factor=numberExpression();

                            state._fsp--;
                            if (state.failed) return action;

                            }
                            break;

                    }


                    }
                    break;

            }


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, active, penalty, factor);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionDynamicAnchoring10274); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionDynamicAnchoring"



    // $ANTLR start "actionTrim"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1741:1: actionTrim returns [RutaAction action = null] : name= TRIM LPAREN (t1= typeExpression ( COMMA t2= typeExpression )* |tl= typeListExpression ) RPAREN ;
    public final RutaAction actionTrim() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression t1 =null;

        Expression t2 =null;

        Expression tl =null;



        List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1745:5: (name= TRIM LPAREN (t1= typeExpression ( COMMA t2= typeExpression )* |tl= typeListExpression ) RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1746:5: name= TRIM LPAREN (t1= typeExpression ( COMMA t2= typeExpression )* |tl= typeListExpression ) RPAREN
            {
            name=(Token)match(input,TRIM,FOLLOW_TRIM_in_actionTrim10308); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionTrim10310); if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, list);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1748:5: (t1= typeExpression ( COMMA t2= typeExpression )* |tl= typeListExpression )
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==Identifier) ) {
                int LA185_1 = input.LA(2);

                if ( (!(((isVariableOfType(input.LT(1).getText(), "TYPELIST"))))) ) {
                    alt185=1;
                }
                else if ( ((isVariableOfType(input.LT(1).getText(), "TYPELIST"))) ) {
                    alt185=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return action;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 185, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA185_0==LCURLY) ) {
                alt185=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return action;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;

            }
            switch (alt185) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1749:5: t1= typeExpression ( COMMA t2= typeExpression )*
                    {
                    pushFollow(FOLLOW_typeExpression_in_actionTrim10332);
                    t1=typeExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    if ( state.backtracking==0 ) {list.add(t1); action = ActionFactory.createAction(name, list);}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1750:5: ( COMMA t2= typeExpression )*
                    loop184:
                    do {
                        int alt184=2;
                        int LA184_0 = input.LA(1);

                        if ( (LA184_0==COMMA) ) {
                            alt184=1;
                        }


                        switch (alt184) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1750:6: COMMA t2= typeExpression
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_actionTrim10342); if (state.failed) return action;

                    	    pushFollow(FOLLOW_typeExpression_in_actionTrim10348);
                    	    t2=typeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return action;

                    	    if ( state.backtracking==0 ) {list.add(t1); action = ActionFactory.createAction(name, list);}

                    	    }
                    	    break;

                    	default :
                    	    break loop184;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1752:5: tl= typeListExpression
                    {
                    pushFollow(FOLLOW_typeListExpression_in_actionTrim10368);
                    tl=typeListExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, tl);}

                    }
                    break;

            }


            match(input,RPAREN,FOLLOW_RPAREN_in_actionTrim10382); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionTrim"



    // $ANTLR start "actionUnmark"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1758:1: actionUnmark returns [RutaAction action = null] : name= UNMARK LPAREN f= typeExpression ( COMMA ( (b= booleanExpression )=>b= booleanExpression | (index= numberExpression ( COMMA index= numberExpression )* ) ) )? RPAREN ;
    public final RutaAction actionUnmark() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression f =null;

        Expression b =null;

        Expression index =null;



        List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1762:5: (name= UNMARK LPAREN f= typeExpression ( COMMA ( (b= booleanExpression )=>b= booleanExpression | (index= numberExpression ( COMMA index= numberExpression )* ) ) )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1763:5: name= UNMARK LPAREN f= typeExpression ( COMMA ( (b= booleanExpression )=>b= booleanExpression | (index= numberExpression ( COMMA index= numberExpression )* ) ) )? RPAREN
            {
            name=(Token)match(input,UNMARK,FOLLOW_UNMARK_in_actionUnmark10417); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionUnmark10419); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionUnmark10425);
            f=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1766:5: ( COMMA ( (b= booleanExpression )=>b= booleanExpression | (index= numberExpression ( COMMA index= numberExpression )* ) ) )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==COMMA) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1766:6: COMMA ( (b= booleanExpression )=>b= booleanExpression | (index= numberExpression ( COMMA index= numberExpression )* ) )
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_actionUnmark10443); if (state.failed) return action;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1767:5: ( (b= booleanExpression )=>b= booleanExpression | (index= numberExpression ( COMMA index= numberExpression )* ) )
                    int alt187=2;
                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==Identifier) ) {
                        int LA187_1 = input.LA(2);

                        if ( (synpred39_RutaParser()) ) {
                            alt187=1;
                        }
                        else if ( (true) ) {
                            alt187=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return action;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 187, 1, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA187_0==TRUE) && (synpred39_RutaParser())) {
                        alt187=1;
                    }
                    else if ( (LA187_0==FALSE) && (synpred39_RutaParser())) {
                        alt187=1;
                    }
                    else if ( (LA187_0==LPAREN) ) {
                        int LA187_4 = input.LA(2);

                        if ( (synpred39_RutaParser()) ) {
                            alt187=1;
                        }
                        else if ( (true) ) {
                            alt187=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return action;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 187, 4, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA187_0==XOR) && (synpred39_RutaParser())) {
                        alt187=1;
                    }
                    else if ( ((LA187_0 >= EXP && LA187_0 <= TAN)||LA187_0==DecimalLiteral||LA187_0==FloatingPointLiteral||LA187_0==MINUS) ) {
                        alt187=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return action;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 187, 0, input);

                        throw nvae;

                    }
                    switch (alt187) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1768:4: (b= booleanExpression )=>b= booleanExpression
                            {
                            pushFollow(FOLLOW_booleanExpression_in_actionUnmark10469);
                            b=booleanExpression();

                            state._fsp--;
                            if (state.failed) return action;

                            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f, b);}

                            }
                            break;
                        case 2 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1771:4: (index= numberExpression ( COMMA index= numberExpression )* )
                            {
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1771:4: (index= numberExpression ( COMMA index= numberExpression )* )
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1772:4: index= numberExpression ( COMMA index= numberExpression )*
                            {
                            pushFollow(FOLLOW_numberExpression_in_actionUnmark10493);
                            index=numberExpression();

                            state._fsp--;
                            if (state.failed) return action;

                            if ( state.backtracking==0 ) {list.add(index);}

                            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f, list);}

                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1774:4: ( COMMA index= numberExpression )*
                            loop186:
                            do {
                                int alt186=2;
                                int LA186_0 = input.LA(1);

                                if ( (LA186_0==COMMA) ) {
                                    alt186=1;
                                }


                                switch (alt186) {
                            	case 1 :
                            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1774:5: COMMA index= numberExpression
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_actionUnmark10507); if (state.failed) return action;

                            	    pushFollow(FOLLOW_numberExpression_in_actionUnmark10513);
                            	    index=numberExpression();

                            	    state._fsp--;
                            	    if (state.failed) return action;

                            	    if ( state.backtracking==0 ) {list.add(index);}

                            	    }
                            	    break;

                            	default :
                            	    break loop186;
                                }
                            } while (true);


                            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f, list);}

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f , b, list);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionUnmark10560); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionUnmark"



    // $ANTLR start "actionUnmarkAll"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1786:1: actionUnmarkAll returns [RutaAction action = null] : name= UNMARKALL LPAREN f= typeExpression ( COMMA list= typeListExpression )? RPAREN ;
    public final RutaAction actionUnmarkAll() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression f =null;

        Expression list =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1787:5: (name= UNMARKALL LPAREN f= typeExpression ( COMMA list= typeListExpression )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1788:5: name= UNMARKALL LPAREN f= typeExpression ( COMMA list= typeListExpression )? RPAREN
            {
            name=(Token)match(input,UNMARKALL,FOLLOW_UNMARKALL_in_actionUnmarkAll10591); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionUnmarkAll10593); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionUnmarkAll10599);
            f=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f, list);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1790:5: ( COMMA list= typeListExpression )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==COMMA) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1790:6: COMMA list= typeListExpression
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_actionUnmarkAll10613); if (state.failed) return action;

                    pushFollow(FOLLOW_typeListExpression_in_actionUnmarkAll10619);
                    list=typeListExpression();

                    state._fsp--;
                    if (state.failed) return action;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f, list);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionUnmarkAll10634); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionUnmarkAll"



    // $ANTLR start "actionTransfer"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1798:1: actionTransfer returns [RutaAction action = null] : name= TRANSFER LPAREN f= typeExpression RPAREN ;
    public final RutaAction actionTransfer() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression f =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1799:5: (name= TRANSFER LPAREN f= typeExpression RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1800:5: name= TRANSFER LPAREN f= typeExpression RPAREN
            {
            name=(Token)match(input,TRANSFER,FOLLOW_TRANSFER_in_actionTransfer10666); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionTransfer10668); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionTransfer10674);
            f=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionTransfer10687); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionTransfer"



    // $ANTLR start "actionTrie"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1805:1: actionTrie returns [RutaAction action = null] : name= TRIE LPAREN key= stringExpression ASSIGN_EQUAL value= typeExpression ( COMMA key= stringExpression ASSIGN_EQUAL value= typeExpression )* COMMA list= wordListExpression COMMA ignoreCase= booleanExpression COMMA ignoreLength= numberExpression COMMA edit= booleanExpression COMMA distance= numberExpression COMMA ignoreChar= stringExpression RPAREN ;
    public final RutaAction actionTrie() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression key =null;

        Expression value =null;

        Expression list =null;

        Expression ignoreCase =null;

        Expression ignoreLength =null;

        Expression edit =null;

        Expression distance =null;

        Expression ignoreChar =null;



        Map<Expression, Expression> map = new HashMap<Expression, Expression>();
        List<Expression> left = new ArrayList<Expression>();
        List<Expression> right = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1811:5: (name= TRIE LPAREN key= stringExpression ASSIGN_EQUAL value= typeExpression ( COMMA key= stringExpression ASSIGN_EQUAL value= typeExpression )* COMMA list= wordListExpression COMMA ignoreCase= booleanExpression COMMA ignoreLength= numberExpression COMMA edit= booleanExpression COMMA distance= numberExpression COMMA ignoreChar= stringExpression RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1812:5: name= TRIE LPAREN key= stringExpression ASSIGN_EQUAL value= typeExpression ( COMMA key= stringExpression ASSIGN_EQUAL value= typeExpression )* COMMA list= wordListExpression COMMA ignoreCase= booleanExpression COMMA ignoreLength= numberExpression COMMA edit= booleanExpression COMMA distance= numberExpression COMMA ignoreChar= stringExpression RPAREN
            {
            name=(Token)match(input,TRIE,FOLLOW_TRIE_in_actionTrie10725); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionTrie10727); if (state.failed) return action;

            pushFollow(FOLLOW_stringExpression_in_actionTrie10741);
            key=stringExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {left.add(key);}

            match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_actionTrie10744); if (state.failed) return action;

            pushFollow(FOLLOW_typeExpression_in_actionTrie10759);
            value=typeExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {right.add(value);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1815:9: ( COMMA key= stringExpression ASSIGN_EQUAL value= typeExpression )*
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==COMMA) ) {
                    int LA190_1 = input.LA(2);

                    if ( (LA190_1==Identifier) ) {
                        int LA190_2 = input.LA(3);

                        if ( (LA190_2==LPAREN||LA190_2==DOT||LA190_2==PLUS||LA190_2==ASSIGN_EQUAL) ) {
                            alt190=1;
                        }


                    }
                    else if ( (LA190_1==REMOVESTRING||LA190_1==StringLiteral) ) {
                        alt190=1;
                    }


                }


                switch (alt190) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1815:10: COMMA key= stringExpression ASSIGN_EQUAL value= typeExpression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_actionTrie10772); if (state.failed) return action;

            	    pushFollow(FOLLOW_stringExpression_in_actionTrie10778);
            	    key=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {left.add(key);}

            	    match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_actionTrie10782); if (state.failed) return action;

            	    pushFollow(FOLLOW_typeExpression_in_actionTrie10797);
            	    value=typeExpression();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {right.add(value);}

            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);


            match(input,COMMA,FOLLOW_COMMA_in_actionTrie10811); if (state.failed) return action;

            pushFollow(FOLLOW_wordListExpression_in_actionTrie10817);
            list=wordListExpression();

            state._fsp--;
            if (state.failed) return action;

            match(input,COMMA,FOLLOW_COMMA_in_actionTrie10833); if (state.failed) return action;

            pushFollow(FOLLOW_booleanExpression_in_actionTrie10839);
            ignoreCase=booleanExpression();

            state._fsp--;
            if (state.failed) return action;

            match(input,COMMA,FOLLOW_COMMA_in_actionTrie10846); if (state.failed) return action;

            pushFollow(FOLLOW_numberExpression_in_actionTrie10852);
            ignoreLength=numberExpression();

            state._fsp--;
            if (state.failed) return action;

            match(input,COMMA,FOLLOW_COMMA_in_actionTrie10859); if (state.failed) return action;

            pushFollow(FOLLOW_booleanExpression_in_actionTrie10865);
            edit=booleanExpression();

            state._fsp--;
            if (state.failed) return action;

            match(input,COMMA,FOLLOW_COMMA_in_actionTrie10872); if (state.failed) return action;

            pushFollow(FOLLOW_numberExpression_in_actionTrie10878);
            distance=numberExpression();

            state._fsp--;
            if (state.failed) return action;

            match(input,COMMA,FOLLOW_COMMA_in_actionTrie10885); if (state.failed) return action;

            pushFollow(FOLLOW_stringExpression_in_actionTrie10891);
            ignoreChar=stringExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {
                List<Expression> args = new ArrayList<Expression>();
                	args.add(ignoreCase);
            	args.add(ignoreLength);
            	args.add(edit);
            	args.add(distance);
            	args.add(ignoreChar);
                
                action = ActionFactory.createStructureAction(name, args, left, right, list);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionTrie10914); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionTrie"



    // $ANTLR start "actionAdd"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1839:1: actionAdd returns [RutaAction action = null] : name= ADD LPAREN f= listVariable ( COMMA a= argument )+ RPAREN ;
    public final RutaAction actionAdd() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression f =null;

        Expression a =null;



        	List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1843:5: (name= ADD LPAREN f= listVariable ( COMMA a= argument )+ RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1844:5: name= ADD LPAREN f= listVariable ( COMMA a= argument )+ RPAREN
            {
            name=(Token)match(input,ADD,FOLLOW_ADD_in_actionAdd10952); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionAdd10954); if (state.failed) return action;

            pushFollow(FOLLOW_listVariable_in_actionAdd10960);
            f=listVariable();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f, list);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1846:5: ( COMMA a= argument )+
            int cnt191=0;
            loop191:
            do {
                int alt191=2;
                int LA191_0 = input.LA(1);

                if ( (LA191_0==COMMA) ) {
                    alt191=1;
                }


                switch (alt191) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1846:6: COMMA a= argument
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_actionAdd10974); if (state.failed) return action;

            	    pushFollow(FOLLOW_argument_in_actionAdd10980);
            	    a=argument();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {list.add(a);}

            	    }
            	    break;

            	default :
            	    if ( cnt191 >= 1 ) break loop191;
            	    if (state.backtracking>0) {state.failed=true; return action;}
                        EarlyExitException eee =
                            new EarlyExitException(191, input);
                        throw eee;
                }
                cnt191++;
            } while (true);


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f, list);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionAdd10997); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionAdd"



    // $ANTLR start "actionRemove"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1851:1: actionRemove returns [RutaAction action = null] : name= REMOVE LPAREN f= listVariable ( COMMA a= argument )+ RPAREN ;
    public final RutaAction actionRemove() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression f =null;

        Expression a =null;



        	List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1855:5: (name= REMOVE LPAREN f= listVariable ( COMMA a= argument )+ RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1856:5: name= REMOVE LPAREN f= listVariable ( COMMA a= argument )+ RPAREN
            {
            name=(Token)match(input,REMOVE,FOLLOW_REMOVE_in_actionRemove11031); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionRemove11033); if (state.failed) return action;

            pushFollow(FOLLOW_listVariable_in_actionRemove11039);
            f=listVariable();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f, list);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1858:5: ( COMMA a= argument )+
            int cnt192=0;
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==COMMA) ) {
                    alt192=1;
                }


                switch (alt192) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1858:6: COMMA a= argument
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_actionRemove11053); if (state.failed) return action;

            	    pushFollow(FOLLOW_argument_in_actionRemove11059);
            	    a=argument();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {list.add(a);}

            	    }
            	    break;

            	default :
            	    if ( cnt192 >= 1 ) break loop192;
            	    if (state.backtracking>0) {state.failed=true; return action;}
                        EarlyExitException eee =
                            new EarlyExitException(192, input);
                        throw eee;
                }
                cnt192++;
            } while (true);


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f, list);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionRemove11076); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionRemove"



    // $ANTLR start "actionRemoveDuplicate"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1864:1: actionRemoveDuplicate returns [RutaAction action = null] : name= REMOVEDUPLICATE LPAREN f= listVariable RPAREN ;
    public final RutaAction actionRemoveDuplicate() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression f =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1865:5: (name= REMOVEDUPLICATE LPAREN f= listVariable RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1866:5: name= REMOVEDUPLICATE LPAREN f= listVariable RPAREN
            {
            name=(Token)match(input,REMOVEDUPLICATE,FOLLOW_REMOVEDUPLICATE_in_actionRemoveDuplicate11106); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionRemoveDuplicate11108); if (state.failed) return action;

            pushFollow(FOLLOW_listVariable_in_actionRemoveDuplicate11114);
            f=listVariable();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionRemoveDuplicate11127); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionRemoveDuplicate"



    // $ANTLR start "actionMerge"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1871:1: actionMerge returns [RutaAction action = null] : name= MERGE LPAREN join= booleanExpression COMMA t= listVariable COMMA f= listExpression ( COMMA f= listExpression )+ RPAREN ;
    public final RutaAction actionMerge() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression join =null;

        Expression t =null;

        Expression f =null;



        	List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1875:5: (name= MERGE LPAREN join= booleanExpression COMMA t= listVariable COMMA f= listExpression ( COMMA f= listExpression )+ RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1876:5: name= MERGE LPAREN join= booleanExpression COMMA t= listVariable COMMA f= listExpression ( COMMA f= listExpression )+ RPAREN
            {
            name=(Token)match(input,MERGE,FOLLOW_MERGE_in_actionMerge11164); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionMerge11166); if (state.failed) return action;

            pushFollow(FOLLOW_booleanExpression_in_actionMerge11172);
            join=booleanExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, join, t, list);}

            match(input,COMMA,FOLLOW_COMMA_in_actionMerge11186); if (state.failed) return action;

            pushFollow(FOLLOW_listVariable_in_actionMerge11192);
            t=listVariable();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, join, t, list);}

            match(input,COMMA,FOLLOW_COMMA_in_actionMerge11206); if (state.failed) return action;

            pushFollow(FOLLOW_listExpression_in_actionMerge11212);
            f=listExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {list.add(f);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1881:5: ( COMMA f= listExpression )+
            int cnt193=0;
            loop193:
            do {
                int alt193=2;
                int LA193_0 = input.LA(1);

                if ( (LA193_0==COMMA) ) {
                    alt193=1;
                }


                switch (alt193) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1881:6: COMMA f= listExpression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_actionMerge11222); if (state.failed) return action;

            	    pushFollow(FOLLOW_listExpression_in_actionMerge11228);
            	    f=listExpression();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {list.add(f);}

            	    }
            	    break;

            	default :
            	    if ( cnt193 >= 1 ) break loop193;
            	    if (state.backtracking>0) {state.failed=true; return action;}
                        EarlyExitException eee =
                            new EarlyExitException(193, input);
                        throw eee;
                }
                cnt193++;
            } while (true);


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, join, t, list);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionMerge11245); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionMerge"



    // $ANTLR start "actionGet"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1886:1: actionGet returns [RutaAction action = null] : name= GET LPAREN f= listExpression COMMA var= variable COMMA op= stringExpression RPAREN ;
    public final RutaAction actionGet() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression f =null;

        Expression var =null;

        Expression op =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1887:5: (name= GET LPAREN f= listExpression COMMA var= variable COMMA op= stringExpression RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1888:5: name= GET LPAREN f= listExpression COMMA var= variable COMMA op= stringExpression RPAREN
            {
            name=(Token)match(input,GET,FOLLOW_GET_in_actionGet11274); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionGet11276); if (state.failed) return action;

            pushFollow(FOLLOW_listExpression_in_actionGet11282);
            f=listExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f, var, op);}

            match(input,COMMA,FOLLOW_COMMA_in_actionGet11295); if (state.failed) return action;

            pushFollow(FOLLOW_variable_in_actionGet11301);
            var=variable();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f, var, op);}

            match(input,COMMA,FOLLOW_COMMA_in_actionGet11314); if (state.failed) return action;

            pushFollow(FOLLOW_stringExpression_in_actionGet11320);
            op=stringExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, f, var, op);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionGet11333); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionGet"



    // $ANTLR start "actionGetList"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1898:1: actionGetList returns [RutaAction action = null] : name= GETLIST LPAREN var= listVariable COMMA op= stringExpression RPAREN ;
    public final RutaAction actionGetList() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression var =null;

        Expression op =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1899:5: (name= GETLIST LPAREN var= listVariable COMMA op= stringExpression RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1900:5: name= GETLIST LPAREN var= listVariable COMMA op= stringExpression RPAREN
            {
            name=(Token)match(input,GETLIST,FOLLOW_GETLIST_in_actionGetList11363); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionGetList11365); if (state.failed) return action;

            pushFollow(FOLLOW_listVariable_in_actionGetList11371);
            var=listVariable();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, var, op);}

            match(input,COMMA,FOLLOW_COMMA_in_actionGetList11384); if (state.failed) return action;

            pushFollow(FOLLOW_stringExpression_in_actionGetList11390);
            op=stringExpression();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, var, op);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionGetList11403); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionGetList"



    // $ANTLR start "actionMatchedText"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1907:1: actionMatchedText returns [RutaAction action = null] : name= MATCHEDTEXT LPAREN var= variable ( COMMA index= numberExpression )* RPAREN ;
    public final RutaAction actionMatchedText() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression var =null;

        Expression index =null;



        List<Expression> list = new ArrayList<Expression>();

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1911:5: (name= MATCHEDTEXT LPAREN var= variable ( COMMA index= numberExpression )* RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1912:5: name= MATCHEDTEXT LPAREN var= variable ( COMMA index= numberExpression )* RPAREN
            {
            name=(Token)match(input,MATCHEDTEXT,FOLLOW_MATCHEDTEXT_in_actionMatchedText11440); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionMatchedText11442); if (state.failed) return action;

            pushFollow(FOLLOW_variable_in_actionMatchedText11453);
            var=variable();

            state._fsp--;
            if (state.failed) return action;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1914:5: ( COMMA index= numberExpression )*
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);

                if ( (LA194_0==COMMA) ) {
                    alt194=1;
                }


                switch (alt194) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1915:5: COMMA index= numberExpression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_actionMatchedText11465); if (state.failed) return action;

            	    pushFollow(FOLLOW_numberExpression_in_actionMatchedText11471);
            	    index=numberExpression();

            	    state._fsp--;
            	    if (state.failed) return action;

            	    if ( state.backtracking==0 ) {list.add(index);}

            	    }
            	    break;

            	default :
            	    break loop194;
                }
            } while (true);


            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, var, list);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionMatchedText11493); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionMatchedText"



    // $ANTLR start "actionClear"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1921:1: actionClear returns [RutaAction action = null] : name= CLEAR LPAREN var= listVariable RPAREN ;
    public final RutaAction actionClear() throws RecognitionException {
        RutaAction action =  null;


        Token name=null;
        Expression var =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1922:5: (name= CLEAR LPAREN var= listVariable RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1923:5: name= CLEAR LPAREN var= listVariable RPAREN
            {
            name=(Token)match(input,CLEAR,FOLLOW_CLEAR_in_actionClear11526); if (state.failed) return action;

            match(input,LPAREN,FOLLOW_LPAREN_in_actionClear11528); if (state.failed) return action;

            pushFollow(FOLLOW_listVariable_in_actionClear11534);
            var=listVariable();

            state._fsp--;
            if (state.failed) return action;

            if ( state.backtracking==0 ) {action = ActionFactory.createAction(name, var);}

            match(input,RPAREN,FOLLOW_RPAREN_in_actionClear11547); if (state.failed) return action;

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return action;
    }
    // $ANTLR end "actionClear"



    // $ANTLR start "varArgumentList"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1930:1: varArgumentList returns [List<Expression> args = new ArrayList<Expression>()] : arg= argument ( COMMA arg= argument )* ;
    public final List<Expression> varArgumentList() throws RecognitionException {
        List<Expression> args =  new ArrayList<Expression>();


        Expression arg =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1931:2: (arg= argument ( COMMA arg= argument )* )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1932:2: arg= argument ( COMMA arg= argument )*
            {
            pushFollow(FOLLOW_argument_in_varArgumentList11572);
            arg=argument();

            state._fsp--;
            if (state.failed) return args;

            if ( state.backtracking==0 ) {args.add(arg);}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1932:34: ( COMMA arg= argument )*
            loop195:
            do {
                int alt195=2;
                int LA195_0 = input.LA(1);

                if ( (LA195_0==COMMA) ) {
                    alt195=1;
                }


                switch (alt195) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1932:35: COMMA arg= argument
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_varArgumentList11577); if (state.failed) return args;

            	    pushFollow(FOLLOW_argument_in_varArgumentList11583);
            	    arg=argument();

            	    state._fsp--;
            	    if (state.failed) return args;

            	    if ( state.backtracking==0 ) {args.add(arg);}

            	    }
            	    break;

            	default :
            	    break loop195;
                }
            } while (true);


            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return args;
    }
    // $ANTLR end "varArgumentList"



    // $ANTLR start "argument"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1936:1: argument returns [Expression expr = null] : ( ( stringExpression )=>a4= stringExpression | ( booleanExpression )=>a2= booleanExpression | ( numberExpression )=>a3= numberExpression |a1= typeExpression );
    public final Expression argument() throws RecognitionException {
        Expression expr =  null;


        Expression a4 =null;

        Expression a2 =null;

        Expression a3 =null;

        Expression a1 =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1940:2: ( ( stringExpression )=>a4= stringExpression | ( booleanExpression )=>a2= booleanExpression | ( numberExpression )=>a3= numberExpression |a1= typeExpression )
            int alt196=4;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==Identifier) ) {
                int LA196_1 = input.LA(2);

                if ( (synpred40_RutaParser()) ) {
                    alt196=1;
                }
                else if ( (synpred41_RutaParser()) ) {
                    alt196=2;
                }
                else if ( (synpred42_RutaParser()) ) {
                    alt196=3;
                }
                else if ( (true) ) {
                    alt196=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 196, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA196_0==REMOVESTRING) && (synpred40_RutaParser())) {
                alt196=1;
            }
            else if ( (LA196_0==StringLiteral) && (synpred40_RutaParser())) {
                alt196=1;
            }
            else if ( (LA196_0==TRUE) && (synpred41_RutaParser())) {
                alt196=2;
            }
            else if ( (LA196_0==FALSE) && (synpred41_RutaParser())) {
                alt196=2;
            }
            else if ( (LA196_0==LPAREN) ) {
                int LA196_6 = input.LA(2);

                if ( (synpred41_RutaParser()) ) {
                    alt196=2;
                }
                else if ( (synpred42_RutaParser()) ) {
                    alt196=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 196, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA196_0==XOR) && (synpred41_RutaParser())) {
                alt196=2;
            }
            else if ( (LA196_0==MINUS) && (synpred42_RutaParser())) {
                alt196=3;
            }
            else if ( (LA196_0==DecimalLiteral) && (synpred42_RutaParser())) {
                alt196=3;
            }
            else if ( (LA196_0==FloatingPointLiteral) && (synpred42_RutaParser())) {
                alt196=3;
            }
            else if ( ((LA196_0 >= EXP && LA196_0 <= TAN)) && (synpred42_RutaParser())) {
                alt196=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                throw nvae;

            }
            switch (alt196) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1941:2: ( stringExpression )=>a4= stringExpression
                    {
                    pushFollow(FOLLOW_stringExpression_in_argument11617);
                    a4=stringExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = a4;}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1942:4: ( booleanExpression )=>a2= booleanExpression
                    {
                    pushFollow(FOLLOW_booleanExpression_in_argument11633);
                    a2=booleanExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = a2;}

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1943:4: ( numberExpression )=>a3= numberExpression
                    {
                    pushFollow(FOLLOW_numberExpression_in_argument11649);
                    a3=numberExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = a3;}

                    }
                    break;
                case 4 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1944:4: a1= typeExpression
                    {
                    pushFollow(FOLLOW_typeExpression_in_argument11660);
                    a1=typeExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = a1;}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "argument"



    // $ANTLR start "primitiveArgument"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1954:1: primitiveArgument returns [Expression expr = null] options {backtrack=true; } : (a4= simpleStringExpression |a2= simpleBooleanExpression |a3= simpleNumberExpression |a1= simpleTypeExpression );
    public final Expression primitiveArgument() throws RecognitionException {
        Expression expr =  null;


        Expression a4 =null;

        Expression a2 =null;

        Expression a3 =null;

        Expression a1 =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1958:2: (a4= simpleStringExpression |a2= simpleBooleanExpression |a3= simpleNumberExpression |a1= simpleTypeExpression )
            int alt197=4;
            switch ( input.LA(1) ) {
            case StringLiteral:
                {
                alt197=1;
                }
                break;
            case Identifier:
                {
                int LA197_2 = input.LA(2);

                if ( ((((isVariableOfType(input.LT(1).getText(), "STRING"))&&(isVariableOfType(input.LT(1).getText(), "STRING")))&&synpred43_RutaParser())) ) {
                    alt197=1;
                }
                else if ( (((synpred44_RutaParser()&&synpred44_RutaParser())&&(isVariableOfType(input.LT(1).getText(), "BOOLEAN")))) ) {
                    alt197=2;
                }
                else if ( (synpred45_RutaParser()) ) {
                    alt197=3;
                }
                else if ( (true) ) {
                    alt197=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 197, 2, input);

                    throw nvae;

                }
                }
                break;
            case TRUE:
            case FALSE:
                {
                alt197=2;
                }
                break;
            case DecimalLiteral:
            case FloatingPointLiteral:
            case LPAREN:
            case MINUS:
                {
                alt197=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;

            }

            switch (alt197) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1959:3: a4= simpleStringExpression
                    {
                    pushFollow(FOLLOW_simpleStringExpression_in_primitiveArgument11709);
                    a4=simpleStringExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = a4;}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1960:4: a2= simpleBooleanExpression
                    {
                    pushFollow(FOLLOW_simpleBooleanExpression_in_primitiveArgument11720);
                    a2=simpleBooleanExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = a2;}

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1961:4: a3= simpleNumberExpression
                    {
                    pushFollow(FOLLOW_simpleNumberExpression_in_primitiveArgument11731);
                    a3=simpleNumberExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = a3;}

                    }
                    break;
                case 4 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1962:4: a1= simpleTypeExpression
                    {
                    pushFollow(FOLLOW_simpleTypeExpression_in_primitiveArgument11742);
                    a1=simpleTypeExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = a1;}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "primitiveArgument"



    // $ANTLR start "dottedIdentifier"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1973:1: dottedIdentifier returns [String idString = \"\"] : id= Identifier (dot= DOT idn= Identifier )* ;
    public final String dottedIdentifier() throws RecognitionException {
        String idString =  "";


        Token id=null;
        Token dot=null;
        Token idn=null;

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1974:2: (id= Identifier (dot= DOT idn= Identifier )* )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1975:2: id= Identifier (dot= DOT idn= Identifier )*
            {
            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_dottedIdentifier11779); if (state.failed) return idString;

            if ( state.backtracking==0 ) {idString += id.getText();}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1976:2: (dot= DOT idn= Identifier )*
            loop198:
            do {
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( (LA198_0==DOT) ) {
                    alt198=1;
                }


                switch (alt198) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1977:3: dot= DOT idn= Identifier
            	    {
            	    dot=(Token)match(input,DOT,FOLLOW_DOT_in_dottedIdentifier11792); if (state.failed) return idString;

            	    if ( state.backtracking==0 ) {idString += dot.getText();}

            	    idn=(Token)match(input,Identifier,FOLLOW_Identifier_in_dottedIdentifier11802); if (state.failed) return idString;

            	    if ( state.backtracking==0 ) {idString += idn.getText();}

            	    }
            	    break;

            	default :
            	    break loop198;
                }
            } while (true);


            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return idString;
    }
    // $ANTLR end "dottedIdentifier"



    // $ANTLR start "dottedId"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1983:1: dottedId returns [Token token = null ] : id= Identifier (dot= DOT id= Identifier )* ;
    public final Token dottedId() throws RecognitionException {
        Token token =  null;


        Token id=null;
        Token dot=null;

        CommonToken ct = null;
        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1985:2: (id= Identifier (dot= DOT id= Identifier )* )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1986:2: id= Identifier (dot= DOT id= Identifier )*
            {
            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_dottedId11834); if (state.failed) return token;

            if ( state.backtracking==0 ) {
            		ct = new CommonToken(id);
            		}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1989:2: (dot= DOT id= Identifier )*
            loop199:
            do {
                int alt199=2;
                int LA199_0 = input.LA(1);

                if ( (LA199_0==DOT) ) {
                    alt199=1;
                }


                switch (alt199) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1990:3: dot= DOT id= Identifier
            	    {
            	    dot=(Token)match(input,DOT,FOLLOW_DOT_in_dottedId11847); if (state.failed) return token;

            	    if ( state.backtracking==0 ) {ct.setText(ct.getText() + dot.getText());}

            	    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_dottedId11857); if (state.failed) return token;

            	    if ( state.backtracking==0 ) {ct.setStopIndex(getBounds(id)[1]);
            	    		                 ct.setText(ct.getText() + id.getText());}

            	    }
            	    break;

            	default :
            	    break loop199;
                }
            } while (true);


            if ( state.backtracking==0 ) {token = ct;
            	 return token;}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return token;
    }
    // $ANTLR end "dottedId"



    // $ANTLR start "dottedId2"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1998:1: dottedId2 returns [Token token = null ] : id= Identifier (dot= DOT id= Identifier )+ ;
    public final Token dottedId2() throws RecognitionException {
        Token token =  null;


        Token id=null;
        Token dot=null;

        CommonToken ct = null;
        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2000:2: (id= Identifier (dot= DOT id= Identifier )+ )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2001:2: id= Identifier (dot= DOT id= Identifier )+
            {
            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_dottedId211891); if (state.failed) return token;

            if ( state.backtracking==0 ) {
            		ct = new CommonToken(id);
            		}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2004:2: (dot= DOT id= Identifier )+
            int cnt200=0;
            loop200:
            do {
                int alt200=2;
                int LA200_0 = input.LA(1);

                if ( (LA200_0==DOT) ) {
                    alt200=1;
                }


                switch (alt200) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2005:3: dot= DOT id= Identifier
            	    {
            	    dot=(Token)match(input,DOT,FOLLOW_DOT_in_dottedId211904); if (state.failed) return token;

            	    if ( state.backtracking==0 ) {ct.setText(ct.getText() + dot.getText());}

            	    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_dottedId211914); if (state.failed) return token;

            	    if ( state.backtracking==0 ) {ct.setStopIndex(getBounds(id)[1]);
            	    		                 ct.setText(ct.getText() + id.getText());}

            	    }
            	    break;

            	default :
            	    if ( cnt200 >= 1 ) break loop200;
            	    if (state.backtracking>0) {state.failed=true; return token;}
                        EarlyExitException eee =
                            new EarlyExitException(200, input);
                        throw eee;
                }
                cnt200++;
            } while (true);


            if ( state.backtracking==0 ) {token = ct;
            	 return token;}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return token;
    }
    // $ANTLR end "dottedId2"



    // $ANTLR start "dottedComponentReference"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2014:1: dottedComponentReference returns [ComponentReference ref = null ] : id= Identifier (dot= ( DOT | MINUS ) id= Identifier )* ;
    public final ComponentReference dottedComponentReference() throws RecognitionException {
        ComponentReference ref =  null;


        Token id=null;
        Token dot=null;

        CommonToken ct = null;
        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2016:2: (id= Identifier (dot= ( DOT | MINUS ) id= Identifier )* )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2017:2: id= Identifier (dot= ( DOT | MINUS ) id= Identifier )*
            {
            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_dottedComponentReference11949); if (state.failed) return ref;

            if ( state.backtracking==0 ) {
            		ct = new CommonToken(id);
            		//if (ct.getText().equals("<missing Identifier>")) {
            	        //    CommonTokenStream cts = (CommonTokenStream) input;
            	        //    Token lt = cts.LT(1);
            	        //    ct = new CommonToken(lt);
            	        //  }
            		}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2025:2: (dot= ( DOT | MINUS ) id= Identifier )*
            loop201:
            do {
                int alt201=2;
                int LA201_0 = input.LA(1);

                if ( (LA201_0==DOT||LA201_0==MINUS) ) {
                    alt201=1;
                }


                switch (alt201) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2026:3: dot= ( DOT | MINUS ) id= Identifier
            	    {
            	    dot=(Token)input.LT(1);

            	    if ( input.LA(1)==DOT||input.LA(1)==MINUS ) {
            	        input.consume();
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ref;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    if ( state.backtracking==0 ) {ct.setText(ct.getText() + dot.getText());}

            	    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_dottedComponentReference11978); if (state.failed) return ref;

            	    if ( state.backtracking==0 ) {ct.setStopIndex(getBounds(id)[1]);
            	    		                 ct.setText(ct.getText() + id.getText());}

            	    }
            	    break;

            	default :
            	    break loop201;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            	 if (!ct.getText().equals("<missing Identifier>")) ref = StatementFactory.createComponentReference(ct);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return ref;
    }
    // $ANTLR end "dottedComponentReference"



    // $ANTLR start "dottedComponentDeclaration"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2034:1: dottedComponentDeclaration returns [ComponentDeclaration ref = null ] : id= Identifier (dot= ( DOT | MINUS ) id= Identifier )* ;
    public final ComponentDeclaration dottedComponentDeclaration() throws RecognitionException {
        ComponentDeclaration ref =  null;


        Token id=null;
        Token dot=null;

        CommonToken ct = null;
        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2036:2: (id= Identifier (dot= ( DOT | MINUS ) id= Identifier )* )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2037:2: id= Identifier (dot= ( DOT | MINUS ) id= Identifier )*
            {
            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_dottedComponentDeclaration12012); if (state.failed) return ref;

            if ( state.backtracking==0 ) {
            		ct = new CommonToken(id);
            		}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2040:2: (dot= ( DOT | MINUS ) id= Identifier )*
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==DOT||LA202_0==MINUS) ) {
                    alt202=1;
                }


                switch (alt202) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2041:3: dot= ( DOT | MINUS ) id= Identifier
            	    {
            	    dot=(Token)input.LT(1);

            	    if ( input.LA(1)==DOT||input.LA(1)==MINUS ) {
            	        input.consume();
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ref;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    if ( state.backtracking==0 ) {ct.setText(ct.getText() + dot.getText());}

            	    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_dottedComponentDeclaration12041); if (state.failed) return ref;

            	    if ( state.backtracking==0 ) {ct.setStopIndex(getBounds(id)[1]);
            	    		                 ct.setText(ct.getText() + id.getText());}

            	    }
            	    break;

            	default :
            	    break loop202;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            	 if (!ct.getText().equals("<missing Identifier>")) ref = StatementFactory.createComponentDeclaration(ct);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return ref;
    }
    // $ANTLR end "dottedComponentDeclaration"



    // $ANTLR start "annotationType"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2050:1: annotationType returns [Expression at = null] : (atRef= annotationTypeVariableReference ) ;
    public final Expression annotationType() throws RecognitionException {
        Expression at =  null;


        Expression atRef =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2051:2: ( (atRef= annotationTypeVariableReference ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2052:2: (atRef= annotationTypeVariableReference )
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2052:2: (atRef= annotationTypeVariableReference )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2053:2: atRef= annotationTypeVariableReference
            {
            pushFollow(FOLLOW_annotationTypeVariableReference_in_annotationType12075);
            atRef=annotationTypeVariableReference();

            state._fsp--;
            if (state.failed) return at;

            if ( state.backtracking==0 ) {at = atRef;}

            }


            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return at;
    }
    // $ANTLR end "annotationType"



    // $ANTLR start "annotationTypeVariableReference"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2057:1: annotationTypeVariableReference returns [Expression typeVar = null] : atRef= dottedId ;
    public final Expression annotationTypeVariableReference() throws RecognitionException {
        Expression typeVar =  null;


        Token atRef =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2058:3: (atRef= dottedId )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2059:3: atRef= dottedId
            {
            pushFollow(FOLLOW_dottedId_in_annotationTypeVariableReference12104);
            atRef=dottedId();

            state._fsp--;
            if (state.failed) return typeVar;

            if ( state.backtracking==0 ) {typeVar = ExpressionFactory.createAnnotationTypeVariableReference(atRef);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return typeVar;
    }
    // $ANTLR end "annotationTypeVariableReference"



    // $ANTLR start "wordListExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2063:1: wordListExpression returns [Expression expr = null] : (id= Identifier |path= RessourceLiteral );
    public final Expression wordListExpression() throws RecognitionException {
        Expression expr =  null;


        Token id=null;
        Token path=null;

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2064:2: (id= Identifier |path= RessourceLiteral )
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==Identifier) ) {
                alt203=1;
            }
            else if ( (LA203_0==RessourceLiteral) ) {
                alt203=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                throw nvae;

            }
            switch (alt203) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2065:2: id= Identifier
                    {
                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_wordListExpression12128); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createListVariableReference(id);}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2068:2: path= RessourceLiteral
                    {
                    path=(Token)match(input,RessourceLiteral,FOLLOW_RessourceLiteral_in_wordListExpression12141); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createRessourceReference(path);}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "wordListExpression"



    // $ANTLR start "wordTableExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2073:1: wordTableExpression returns [Expression expr = null] : (id= Identifier |path= RessourceLiteral );
    public final Expression wordTableExpression() throws RecognitionException {
        Expression expr =  null;


        Token id=null;
        Token path=null;

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2074:2: (id= Identifier |path= RessourceLiteral )
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==Identifier) ) {
                alt204=1;
            }
            else if ( (LA204_0==RessourceLiteral) ) {
                alt204=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                throw nvae;

            }
            switch (alt204) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2075:2: id= Identifier
                    {
                    id=(Token)match(input,Identifier,FOLLOW_Identifier_in_wordTableExpression12165); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createTableVariableReference(id);}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2078:2: path= RessourceLiteral
                    {
                    path=(Token)match(input,RessourceLiteral,FOLLOW_RessourceLiteral_in_wordTableExpression12178); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createRessourceReference(path);}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "wordTableExpression"



    // $ANTLR start "numberExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2083:1: numberExpression returns [Expression expr = null] : e= additiveExpression ;
    public final Expression numberExpression() throws RecognitionException {
        Expression expr =  null;


        Expression e =null;



        expr = ExpressionFactory.createEmptyNumberExpression(input.LT(1));

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2087:2: (e= additiveExpression )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2088:2: e= additiveExpression
            {
            pushFollow(FOLLOW_additiveExpression_in_numberExpression12207);
            e=additiveExpression();

            state._fsp--;
            if (state.failed) return expr;

            if ( state.backtracking==0 ) {if(e!=null) expr = ExpressionFactory.createNumberExpression(e);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "numberExpression"



    // $ANTLR start "additiveExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2093:1: additiveExpression returns [Expression root = null] : expr1= multiplicativeExpression ( ( PLUS | MINUS )=>op= ( PLUS | MINUS ) expr2= multiplicativeExpression )* ;
    public final Expression additiveExpression() throws RecognitionException {
        Expression root =  null;


        Token op=null;
        Expression expr1 =null;

        Expression expr2 =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2094:5: (expr1= multiplicativeExpression ( ( PLUS | MINUS )=>op= ( PLUS | MINUS ) expr2= multiplicativeExpression )* )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2094:9: expr1= multiplicativeExpression ( ( PLUS | MINUS )=>op= ( PLUS | MINUS ) expr2= multiplicativeExpression )*
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression12233);
            expr1=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return root;

            if ( state.backtracking==0 ) {root=expr1;}

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2095:2: ( ( PLUS | MINUS )=>op= ( PLUS | MINUS ) expr2= multiplicativeExpression )*
            loop205:
            do {
                int alt205=2;
                int LA205_0 = input.LA(1);

                if ( (LA205_0==PLUS) ) {
                    int LA205_9 = input.LA(2);

                    if ( (synpred46_RutaParser()) ) {
                        alt205=1;
                    }


                }
                else if ( (LA205_0==MINUS) && (synpred46_RutaParser())) {
                    alt205=1;
                }


                switch (alt205) {
            	case 1 :
            	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2095:3: ( PLUS | MINUS )=>op= ( PLUS | MINUS ) expr2= multiplicativeExpression
            	    {
            	    op=(Token)input.LT(1);

            	    if ( (input.LA(1) >= PLUS && input.LA(1) <= MINUS) ) {
            	        input.consume();
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return root;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression12260);
            	    expr2=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return root;

            	    if ( state.backtracking==0 ) {root=ExpressionFactory.createBinaryArithmeticExpr(root,expr2,op);}

            	    }
            	    break;

            	default :
            	    break loop205;
                }
            } while (true);


            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return root;
    }
    // $ANTLR end "additiveExpression"



    // $ANTLR start "multiplicativeExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2099:1: multiplicativeExpression returns [Expression root = null] : ( ( simpleNumberExpression )=>expr1= simpleNumberExpression ( ( STAR | SLASH | PERCENT )=>op= ( STAR | SLASH | PERCENT ) sNE= simpleNumberExpression )* |e1= numberFunction ) ;
    public final Expression multiplicativeExpression() throws RecognitionException {
        Expression root =  null;


        Token op=null;
        Expression expr1 =null;

        Expression sNE =null;

        Expression e1 =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2100:5: ( ( ( simpleNumberExpression )=>expr1= simpleNumberExpression ( ( STAR | SLASH | PERCENT )=>op= ( STAR | SLASH | PERCENT ) sNE= simpleNumberExpression )* |e1= numberFunction ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2101:2: ( ( simpleNumberExpression )=>expr1= simpleNumberExpression ( ( STAR | SLASH | PERCENT )=>op= ( STAR | SLASH | PERCENT ) sNE= simpleNumberExpression )* |e1= numberFunction )
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2101:2: ( ( simpleNumberExpression )=>expr1= simpleNumberExpression ( ( STAR | SLASH | PERCENT )=>op= ( STAR | SLASH | PERCENT ) sNE= simpleNumberExpression )* |e1= numberFunction )
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==Identifier) ) {
                int LA207_1 = input.LA(2);

                if ( (synpred47_RutaParser()) ) {
                    alt207=1;
                }
                else if ( (true) ) {
                    alt207=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return root;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 207, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA207_0==MINUS) && (synpred47_RutaParser())) {
                alt207=1;
            }
            else if ( (LA207_0==DecimalLiteral) && (synpred47_RutaParser())) {
                alt207=1;
            }
            else if ( (LA207_0==FloatingPointLiteral) && (synpred47_RutaParser())) {
                alt207=1;
            }
            else if ( (LA207_0==LPAREN) && (synpred47_RutaParser())) {
                alt207=1;
            }
            else if ( ((LA207_0 >= EXP && LA207_0 <= TAN)) ) {
                alt207=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return root;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;

            }
            switch (alt207) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2101:3: ( simpleNumberExpression )=>expr1= simpleNumberExpression ( ( STAR | SLASH | PERCENT )=>op= ( STAR | SLASH | PERCENT ) sNE= simpleNumberExpression )*
                    {
                    pushFollow(FOLLOW_simpleNumberExpression_in_multiplicativeExpression12294);
                    expr1=simpleNumberExpression();

                    state._fsp--;
                    if (state.failed) return root;

                    if ( state.backtracking==0 ) {root=expr1;}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2102:2: ( ( STAR | SLASH | PERCENT )=>op= ( STAR | SLASH | PERCENT ) sNE= simpleNumberExpression )*
                    loop206:
                    do {
                        int alt206=2;
                        int LA206_0 = input.LA(1);

                        if ( (LA206_0==STAR) ) {
                            int LA206_9 = input.LA(2);

                            if ( (synpred48_RutaParser()) ) {
                                alt206=1;
                            }


                        }
                        else if ( (LA206_0==SLASH||LA206_0==PERCENT) && (synpred48_RutaParser())) {
                            alt206=1;
                        }


                        switch (alt206) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2102:4: ( STAR | SLASH | PERCENT )=>op= ( STAR | SLASH | PERCENT ) sNE= simpleNumberExpression
                    	    {
                    	    op=(Token)input.LT(1);

                    	    if ( (input.LA(1) >= STAR && input.LA(1) <= SLASH)||input.LA(1)==PERCENT ) {
                    	        input.consume();
                    	        state.errorRecovery=false;
                    	        state.failed=false;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return root;}
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        throw mse;
                    	    }


                    	    pushFollow(FOLLOW_simpleNumberExpression_in_multiplicativeExpression12336);
                    	    sNE=simpleNumberExpression();

                    	    state._fsp--;
                    	    if (state.failed) return root;

                    	    if ( state.backtracking==0 ) {root=ExpressionFactory.createBinaryArithmeticExpr(root,sNE,op);}

                    	    }
                    	    break;

                    	default :
                    	    break loop206;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2103:6: e1= numberFunction
                    {
                    pushFollow(FOLLOW_numberFunction_in_multiplicativeExpression12352);
                    e1=numberFunction();

                    state._fsp--;
                    if (state.failed) return root;

                    if ( state.backtracking==0 ) {root = e1;}

                    }
                    break;

            }


            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return root;
    }
    // $ANTLR end "multiplicativeExpression"



    // $ANTLR start "numberExpressionInPar"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2107:1: numberExpressionInPar returns [RutaExpression expr = null] : lp= LPAREN numE= numberExpression rp= RPAREN ;
    public final RutaExpression numberExpressionInPar() throws RecognitionException {
        RutaExpression expr =  null;


        Token lp=null;
        Token rp=null;
        Expression numE =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2108:2: (lp= LPAREN numE= numberExpression rp= RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2109:2: lp= LPAREN numE= numberExpression rp= RPAREN
            {
            lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_numberExpressionInPar12376); if (state.failed) return expr;

            pushFollow(FOLLOW_numberExpression_in_numberExpressionInPar12382);
            numE=numberExpression();

            state._fsp--;
            if (state.failed) return expr;

            rp=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_numberExpressionInPar12388); if (state.failed) return expr;

            if ( state.backtracking==0 ) {expr = ExpressionFactory.createNumberExpression((RutaExpression)numE); 
            	  expr.setInParantheses(true);
                      expr.setStart(((CommonToken) lp).getStartIndex());
                      expr.setEnd(((CommonToken) rp).getStopIndex()+1);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "numberExpressionInPar"



    // $ANTLR start "simpleNumberExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2117:1: simpleNumberExpression returns [Expression expr = null] : ( ( featureExpression )=>fe= featureExpression | (m= MINUS )? numVarRef= numberVariable | (m= MINUS )? decLit= DecimalLiteral | (m= MINUS )? fpLit= FloatingPointLiteral |numExprPar= numberExpressionInPar );
    public final Expression simpleNumberExpression() throws RecognitionException {
        Expression expr =  null;


        Token m=null;
        Token decLit=null;
        Token fpLit=null;
        Expression fe =null;

        Expression numVarRef =null;

        RutaExpression numExprPar =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2118:2: ( ( featureExpression )=>fe= featureExpression | (m= MINUS )? numVarRef= numberVariable | (m= MINUS )? decLit= DecimalLiteral | (m= MINUS )? fpLit= FloatingPointLiteral |numExprPar= numberExpressionInPar )
            int alt211=5;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                int LA211_1 = input.LA(2);

                if ( (LA211_1==DOT) && (synpred49_RutaParser())) {
                    alt211=1;
                }
                else if ( (LA211_1==EOF||LA211_1==AND||LA211_1==THEN||LA211_1==STARTANCHOR||LA211_1==StringLiteral||(LA211_1 >= Identifier && LA211_1 <= RCURLY)||(LA211_1 >= COMMA && LA211_1 <= NOTEQUAL)||(LA211_1 >= LESSEQUAL && LA211_1 <= WILDCARD)) ) {
                    alt211=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 211, 1, input);

                    throw nvae;

                }
                }
                break;
            case MINUS:
                {
                switch ( input.LA(2) ) {
                case Identifier:
                    {
                    alt211=2;
                    }
                    break;
                case DecimalLiteral:
                    {
                    alt211=3;
                    }
                    break;
                case FloatingPointLiteral:
                    {
                    alt211=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 211, 2, input);

                    throw nvae;

                }

                }
                break;
            case DecimalLiteral:
                {
                alt211=3;
                }
                break;
            case FloatingPointLiteral:
                {
                alt211=4;
                }
                break;
            case LPAREN:
                {
                alt211=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;

            }

            switch (alt211) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2119:2: ( featureExpression )=>fe= featureExpression
                    {
                    pushFollow(FOLLOW_featureExpression_in_simpleNumberExpression12418);
                    fe=featureExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {ExpressionFactory.createNumberExpression(fe);}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2121:3: (m= MINUS )? numVarRef= numberVariable
                    {
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2121:5: (m= MINUS )?
                    int alt208=2;
                    int LA208_0 = input.LA(1);

                    if ( (LA208_0==MINUS) ) {
                        alt208=1;
                    }
                    switch (alt208) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2121:5: m= MINUS
                            {
                            m=(Token)match(input,MINUS,FOLLOW_MINUS_in_simpleNumberExpression12431); if (state.failed) return expr;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_numberVariable_in_simpleNumberExpression12438);
                    numVarRef=numberVariable();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {if(m == null) {expr = numVarRef;} else {expr = ExpressionFactory.createNegatedNumberExpression(m, numVarRef);}}

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2123:4: (m= MINUS )? decLit= DecimalLiteral
                    {
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2123:4: (m= MINUS )?
                    int alt209=2;
                    int LA209_0 = input.LA(1);

                    if ( (LA209_0==MINUS) ) {
                        alt209=1;
                    }
                    switch (alt209) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2123:5: m= MINUS
                            {
                            m=(Token)match(input,MINUS,FOLLOW_MINUS_in_simpleNumberExpression12453); if (state.failed) return expr;

                            }
                            break;

                    }


                    decLit=(Token)match(input,DecimalLiteral,FOLLOW_DecimalLiteral_in_simpleNumberExpression12461); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createDecimalLiteral(decLit,m);}

                    }
                    break;
                case 4 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2125:4: (m= MINUS )? fpLit= FloatingPointLiteral
                    {
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2125:6: (m= MINUS )?
                    int alt210=2;
                    int LA210_0 = input.LA(1);

                    if ( (LA210_0==MINUS) ) {
                        alt210=1;
                    }
                    switch (alt210) {
                        case 1 :
                            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2125:6: m= MINUS
                            {
                            m=(Token)match(input,MINUS,FOLLOW_MINUS_in_simpleNumberExpression12475); if (state.failed) return expr;

                            }
                            break;

                    }


                    fpLit=(Token)match(input,FloatingPointLiteral,FOLLOW_FloatingPointLiteral_in_simpleNumberExpression12482); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createFloatingPointLiteral(fpLit,m);}

                    }
                    break;
                case 5 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2128:4: numExprPar= numberExpressionInPar
                    {
                    pushFollow(FOLLOW_numberExpressionInPar_in_simpleNumberExpression12498);
                    numExprPar=numberExpressionInPar();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = numExprPar;}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "simpleNumberExpression"



    // $ANTLR start "numberFunction"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2133:1: numberFunction returns [Expression expr = null] : ( (op= ( EXP | LOGN | SIN | COS | TAN ) numExprP= numberExpressionInPar ) | (e= externalNumberFunction )=>e= externalNumberFunction );
    public final Expression numberFunction() throws RecognitionException {
        Expression expr =  null;


        Token op=null;
        RutaExpression numExprP =null;

        Expression e =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2134:2: ( (op= ( EXP | LOGN | SIN | COS | TAN ) numExprP= numberExpressionInPar ) | (e= externalNumberFunction )=>e= externalNumberFunction )
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( ((LA212_0 >= EXP && LA212_0 <= TAN)) ) {
                alt212=1;
            }
            else if ( (LA212_0==Identifier) && (synpred50_RutaParser())) {
                alt212=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);

                throw nvae;

            }
            switch (alt212) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2135:2: (op= ( EXP | LOGN | SIN | COS | TAN ) numExprP= numberExpressionInPar )
                    {
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2135:2: (op= ( EXP | LOGN | SIN | COS | TAN ) numExprP= numberExpressionInPar )
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2135:3: op= ( EXP | LOGN | SIN | COS | TAN ) numExprP= numberExpressionInPar
                    {
                    op=(Token)input.LT(1);

                    if ( (input.LA(1) >= EXP && input.LA(1) <= TAN) ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return expr;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_numberExpressionInPar_in_numberFunction12545);
                    numExprP=numberExpressionInPar();

                    state._fsp--;
                    if (state.failed) return expr;

                    }


                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createUnaryArithmeticExpr(numExprP,op);}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2138:4: (e= externalNumberFunction )=>e= externalNumberFunction
                    {
                    pushFollow(FOLLOW_externalNumberFunction_in_numberFunction12569);
                    e=externalNumberFunction();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = e;}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "numberFunction"



    // $ANTLR start "externalNumberFunction"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2142:1: externalNumberFunction returns [Expression expr = null] : id= Identifier LPAREN (args= varArgumentList )? RPAREN ;
    public final Expression externalNumberFunction() throws RecognitionException {
        Expression expr =  null;


        Token id=null;
        List<Expression> args =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2143:2: (id= Identifier LPAREN (args= varArgumentList )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2144:2: id= Identifier LPAREN (args= varArgumentList )? RPAREN
            {
            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_externalNumberFunction12592); if (state.failed) return expr;

            match(input,LPAREN,FOLLOW_LPAREN_in_externalNumberFunction12595); if (state.failed) return expr;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2146:7: (args= varArgumentList )?
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==REMOVESTRING||(LA213_0 >= EXP && LA213_0 <= FALSE)||LA213_0==DecimalLiteral||LA213_0==FloatingPointLiteral||LA213_0==StringLiteral||(LA213_0 >= Identifier && LA213_0 <= LPAREN)||LA213_0==MINUS) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2146:7: args= varArgumentList
                    {
                    pushFollow(FOLLOW_varArgumentList_in_externalNumberFunction12602);
                    args=varArgumentList();

                    state._fsp--;
                    if (state.failed) return expr;

                    }
                    break;

            }


            match(input,RPAREN,FOLLOW_RPAREN_in_externalNumberFunction12606); if (state.failed) return expr;

            if ( state.backtracking==0 ) {
            		expr = external.createExternalNumberFunction(id, args);
            	}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "externalNumberFunction"



    // $ANTLR start "numberVariable"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2154:1: numberVariable returns [Expression expr = null] : ({...}?numVarRef= Identifier |{...}?numVarRef= Identifier |{...}?numVarRef= Identifier ) ;
    public final Expression numberVariable() throws RecognitionException {
        Expression expr =  null;


        Token numVarRef=null;

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2155:2: ( ({...}?numVarRef= Identifier |{...}?numVarRef= Identifier |{...}?numVarRef= Identifier ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2156:5: ({...}?numVarRef= Identifier |{...}?numVarRef= Identifier |{...}?numVarRef= Identifier )
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2156:5: ({...}?numVarRef= Identifier |{...}?numVarRef= Identifier |{...}?numVarRef= Identifier )
            int alt214=3;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==Identifier) ) {
                int LA214_1 = input.LA(2);

                if ( ((isVariableOfType(input.LT(1).getText(), "INT"))) ) {
                    alt214=1;
                }
                else if ( ((isVariableOfType(input.LT(1).getText(), "DOUBLE"))) ) {
                    alt214=2;
                }
                else if ( ((isVariableOfType(input.LT(1).getText(), "FLOAT"))) ) {
                    alt214=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;

            }
            switch (alt214) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2156:7: {...}?numVarRef= Identifier
                    {
                    if ( !((isVariableOfType(input.LT(1).getText(), "INT"))) ) {
                        if (state.backtracking>0) {state.failed=true; return expr;}
                        throw new FailedPredicateException(input, "numberVariable", "isVariableOfType(input.LT(1).getText(), \"INT\")");
                    }

                    numVarRef=(Token)match(input,Identifier,FOLLOW_Identifier_in_numberVariable12637); if (state.failed) return expr;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2157:5: {...}?numVarRef= Identifier
                    {
                    if ( !((isVariableOfType(input.LT(1).getText(), "DOUBLE"))) ) {
                        if (state.backtracking>0) {state.failed=true; return expr;}
                        throw new FailedPredicateException(input, "numberVariable", "isVariableOfType(input.LT(1).getText(), \"DOUBLE\")");
                    }

                    numVarRef=(Token)match(input,Identifier,FOLLOW_Identifier_in_numberVariable12650); if (state.failed) return expr;

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2158:6: {...}?numVarRef= Identifier
                    {
                    if ( !((isVariableOfType(input.LT(1).getText(), "FLOAT"))) ) {
                        if (state.backtracking>0) {state.failed=true; return expr;}
                        throw new FailedPredicateException(input, "numberVariable", "isVariableOfType(input.LT(1).getText(), \"FLOAT\")");
                    }

                    numVarRef=(Token)match(input,Identifier,FOLLOW_Identifier_in_numberVariable12663); if (state.failed) return expr;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {	 expr = ExpressionFactory.createNumberVariableReference(numVarRef);}

            }

        }
        catch (Exception e) {
            expr = ExpressionFactory.createNumberVariableReference(input.LT(1));
        }

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "numberVariable"



    // $ANTLR start "stringExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2164:1: stringExpression returns [Expression expr = null] : ( ( featureExpression )=>fe= featureExpression | ( stringFunction )=>e= stringFunction |strExpr1= simpleStringExpression ( ( PLUS )=> PLUS (nextstrExpr= simpleStringExpression |ne= numberExpressionInPar |be= simpleBooleanExpression | ( listExpression )=>le= listExpression |te= typeExpression ) )* );
    public final Expression stringExpression() throws RecognitionException {
        Expression expr =  null;


        Expression fe =null;

        Expression e =null;

        Expression strExpr1 =null;

        Expression nextstrExpr =null;

        RutaExpression ne =null;

        Expression be =null;

        Expression le =null;

        Expression te =null;



        List<Expression> exprList = new ArrayList<Expression>();
        {expr = ExpressionFactory.createEmptyStringExpression(input.LT(1));}

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2169:2: ( ( featureExpression )=>fe= featureExpression | ( stringFunction )=>e= stringFunction |strExpr1= simpleStringExpression ( ( PLUS )=> PLUS (nextstrExpr= simpleStringExpression |ne= numberExpressionInPar |be= simpleBooleanExpression | ( listExpression )=>le= listExpression |te= typeExpression ) )* )
            int alt217=3;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==Identifier) ) {
                int LA217_1 = input.LA(2);

                if ( (synpred51_RutaParser()) ) {
                    alt217=1;
                }
                else if ( (synpred52_RutaParser()) ) {
                    alt217=2;
                }
                else if ( ((isVariableOfType(input.LT(1).getText(), "STRING"))) ) {
                    alt217=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 217, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA217_0==REMOVESTRING) && (synpred52_RutaParser())) {
                alt217=2;
            }
            else if ( (LA217_0==StringLiteral) ) {
                alt217=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);

                throw nvae;

            }
            switch (alt217) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2170:2: ( featureExpression )=>fe= featureExpression
                    {
                    pushFollow(FOLLOW_featureExpression_in_stringExpression12706);
                    fe=featureExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createStringExpression(fe);}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2172:2: ( stringFunction )=>e= stringFunction
                    {
                    pushFollow(FOLLOW_stringFunction_in_stringExpression12723);
                    e=stringFunction();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = e;}

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2174:2: strExpr1= simpleStringExpression ( ( PLUS )=> PLUS (nextstrExpr= simpleStringExpression |ne= numberExpressionInPar |be= simpleBooleanExpression | ( listExpression )=>le= listExpression |te= typeExpression ) )*
                    {
                    pushFollow(FOLLOW_simpleStringExpression_in_stringExpression12736);
                    strExpr1=simpleStringExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {if (strExpr1!=null) exprList.add(strExpr1);}

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2175:2: ( ( PLUS )=> PLUS (nextstrExpr= simpleStringExpression |ne= numberExpressionInPar |be= simpleBooleanExpression | ( listExpression )=>le= listExpression |te= typeExpression ) )*
                    loop216:
                    do {
                        int alt216=2;
                        int LA216_0 = input.LA(1);

                        if ( (LA216_0==PLUS) ) {
                            int LA216_9 = input.LA(2);

                            if ( (synpred53_RutaParser()) ) {
                                alt216=1;
                            }


                        }


                        switch (alt216) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2175:3: ( PLUS )=> PLUS (nextstrExpr= simpleStringExpression |ne= numberExpressionInPar |be= simpleBooleanExpression | ( listExpression )=>le= listExpression |te= typeExpression )
                    	    {
                    	    match(input,PLUS,FOLLOW_PLUS_in_stringExpression12747); if (state.failed) return expr;

                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2175:17: (nextstrExpr= simpleStringExpression |ne= numberExpressionInPar |be= simpleBooleanExpression | ( listExpression )=>le= listExpression |te= typeExpression )
                    	    int alt215=5;
                    	    int LA215_0 = input.LA(1);

                    	    if ( (LA215_0==StringLiteral) ) {
                    	        alt215=1;
                    	    }
                    	    else if ( (LA215_0==Identifier) ) {
                    	        int LA215_2 = input.LA(2);

                    	        if ( ((isVariableOfType(input.LT(1).getText(), "STRING"))) ) {
                    	            alt215=1;
                    	        }
                    	        else if ( ((isVariableOfType(input.LT(1).getText(), "BOOLEAN"))) ) {
                    	            alt215=3;
                    	        }
                    	        else if ( (((((isVariableOfType(input.LT(1).getText(), "INTLIST"))||(isVariableOfType(input.LT(1).getText(), "TYPELIST"))||(isVariableOfType(input.LT(1).getText(), "DOUBLELIST"))||(isVariableOfType(input.LT(1).getText(), "FLOATLIST"))||(isVariableOfType(input.LT(1).getText(), "BOOLEANLIST"))||(isVariableOfType(input.LT(1).getText(), "STRINGLIST")))&&((isVariableOfType(input.LT(1).getText(), "INTLIST"))||(isVariableOfType(input.LT(1).getText(), "TYPELIST"))||(isVariableOfType(input.LT(1).getText(), "DOUBLELIST"))||(isVariableOfType(input.LT(1).getText(), "FLOATLIST"))||(isVariableOfType(input.LT(1).getText(), "BOOLEANLIST"))||(isVariableOfType(input.LT(1).getText(), "STRINGLIST"))))&&synpred54_RutaParser())) ) {
                    	            alt215=4;
                    	        }
                    	        else if ( (true) ) {
                    	            alt215=5;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return expr;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 215, 2, input);

                    	            throw nvae;

                    	        }
                    	    }
                    	    else if ( (LA215_0==LPAREN) ) {
                    	        alt215=2;
                    	    }
                    	    else if ( ((LA215_0 >= TRUE && LA215_0 <= FALSE)) ) {
                    	        alt215=3;
                    	    }
                    	    else if ( (LA215_0==LCURLY) && (synpred54_RutaParser())) {
                    	        alt215=4;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return expr;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 215, 0, input);

                    	        throw nvae;

                    	    }
                    	    switch (alt215) {
                    	        case 1 :
                    	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2175:18: nextstrExpr= simpleStringExpression
                    	            {
                    	            pushFollow(FOLLOW_simpleStringExpression_in_stringExpression12754);
                    	            nextstrExpr=simpleStringExpression();

                    	            state._fsp--;
                    	            if (state.failed) return expr;

                    	            if ( state.backtracking==0 ) {if (nextstrExpr!=null) exprList.add(nextstrExpr);}

                    	            }
                    	            break;
                    	        case 2 :
                    	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2176:5: ne= numberExpressionInPar
                    	            {
                    	            pushFollow(FOLLOW_numberExpressionInPar_in_stringExpression12766);
                    	            ne=numberExpressionInPar();

                    	            state._fsp--;
                    	            if (state.failed) return expr;

                    	            if ( state.backtracking==0 ) {if (ne!=null) exprList.add(ne);}

                    	            }
                    	            break;
                    	        case 3 :
                    	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2177:5: be= simpleBooleanExpression
                    	            {
                    	            pushFollow(FOLLOW_simpleBooleanExpression_in_stringExpression12778);
                    	            be=simpleBooleanExpression();

                    	            state._fsp--;
                    	            if (state.failed) return expr;

                    	            if ( state.backtracking==0 ) {if (be!=null) exprList.add(be);}

                    	            }
                    	            break;
                    	        case 4 :
                    	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2178:5: ( listExpression )=>le= listExpression
                    	            {
                    	            pushFollow(FOLLOW_listExpression_in_stringExpression12795);
                    	            le=listExpression();

                    	            state._fsp--;
                    	            if (state.failed) return expr;

                    	            if ( state.backtracking==0 ) {if (le!=null) exprList.add(le);}

                    	            }
                    	            break;
                    	        case 5 :
                    	            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2179:5: te= typeExpression
                    	            {
                    	            pushFollow(FOLLOW_typeExpression_in_stringExpression12807);
                    	            te=typeExpression();

                    	            state._fsp--;
                    	            if (state.failed) return expr;

                    	            if ( state.backtracking==0 ) {if (te!=null) exprList.add(te);}

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop216;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createStringExpression(exprList);}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "stringExpression"



    // $ANTLR start "stringFunction"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2186:1: stringFunction returns [Expression expr = null] : (name= REMOVESTRING LPAREN var= variable ( COMMA s= stringExpression )+ RPAREN | (e= externalStringFunction )=>e= externalStringFunction );
    public final Expression stringFunction() throws RecognitionException {
        Expression expr =  null;


        Token name=null;
        Expression var =null;

        Expression s =null;

        Expression e =null;


        List<Expression> list = new ArrayList<Expression>();
        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2188:2: (name= REMOVESTRING LPAREN var= variable ( COMMA s= stringExpression )+ RPAREN | (e= externalStringFunction )=>e= externalStringFunction )
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==REMOVESTRING) ) {
                alt219=1;
            }
            else if ( (LA219_0==Identifier) && (synpred55_RutaParser())) {
                alt219=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;

            }
            switch (alt219) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2189:2: name= REMOVESTRING LPAREN var= variable ( COMMA s= stringExpression )+ RPAREN
                    {
                    name=(Token)match(input,REMOVESTRING,FOLLOW_REMOVESTRING_in_stringFunction12844); if (state.failed) return expr;

                    match(input,LPAREN,FOLLOW_LPAREN_in_stringFunction12846); if (state.failed) return expr;

                    pushFollow(FOLLOW_variable_in_stringFunction12852);
                    var=variable();

                    state._fsp--;
                    if (state.failed) return expr;

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2189:44: ( COMMA s= stringExpression )+
                    int cnt218=0;
                    loop218:
                    do {
                        int alt218=2;
                        int LA218_0 = input.LA(1);

                        if ( (LA218_0==COMMA) ) {
                            alt218=1;
                        }


                        switch (alt218) {
                    	case 1 :
                    	    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2189:45: COMMA s= stringExpression
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_stringFunction12855); if (state.failed) return expr;

                    	    pushFollow(FOLLOW_stringExpression_in_stringFunction12861);
                    	    s=stringExpression();

                    	    state._fsp--;
                    	    if (state.failed) return expr;

                    	    if ( state.backtracking==0 ) {list.add(s);}

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt218 >= 1 ) break loop218;
                    	    if (state.backtracking>0) {state.failed=true; return expr;}
                                EarlyExitException eee =
                                    new EarlyExitException(218, input);
                                throw eee;
                        }
                        cnt218++;
                    } while (true);


                    match(input,RPAREN,FOLLOW_RPAREN_in_stringFunction12866); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createStringFunction(name,var,list);}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2192:2: (e= externalStringFunction )=>e= externalStringFunction
                    {
                    pushFollow(FOLLOW_externalStringFunction_in_stringFunction12888);
                    e=externalStringFunction();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = e;}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "stringFunction"



    // $ANTLR start "externalStringFunction"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2196:1: externalStringFunction returns [Expression expr = null] : id= Identifier LPAREN (args= varArgumentList )? RPAREN ;
    public final Expression externalStringFunction() throws RecognitionException {
        Expression expr =  null;


        Token id=null;
        List<Expression> args =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2197:2: (id= Identifier LPAREN (args= varArgumentList )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2198:2: id= Identifier LPAREN (args= varArgumentList )? RPAREN
            {
            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_externalStringFunction12911); if (state.failed) return expr;

            match(input,LPAREN,FOLLOW_LPAREN_in_externalStringFunction12914); if (state.failed) return expr;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2200:7: (args= varArgumentList )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==REMOVESTRING||(LA220_0 >= EXP && LA220_0 <= FALSE)||LA220_0==DecimalLiteral||LA220_0==FloatingPointLiteral||LA220_0==StringLiteral||(LA220_0 >= Identifier && LA220_0 <= LPAREN)||LA220_0==MINUS) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2200:7: args= varArgumentList
                    {
                    pushFollow(FOLLOW_varArgumentList_in_externalStringFunction12921);
                    args=varArgumentList();

                    state._fsp--;
                    if (state.failed) return expr;

                    }
                    break;

            }


            match(input,RPAREN,FOLLOW_RPAREN_in_externalStringFunction12925); if (state.failed) return expr;

            if ( state.backtracking==0 ) {
            		expr = external.createExternalStringFunction(id, args);
            	}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "externalStringFunction"



    // $ANTLR start "simpleStringExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2208:1: simpleStringExpression returns [Expression expr = null] : (lit= StringLiteral |{...}?variableId= Identifier );
    public final Expression simpleStringExpression() throws RecognitionException {
        Expression expr =  null;


        Token lit=null;
        Token variableId=null;

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2209:2: (lit= StringLiteral |{...}?variableId= Identifier )
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==StringLiteral) ) {
                alt221=1;
            }
            else if ( (LA221_0==Identifier) ) {
                alt221=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 221, 0, input);

                throw nvae;

            }
            switch (alt221) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2210:2: lit= StringLiteral
                    {
                    lit=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_simpleStringExpression12950); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createSimpleString(lit);}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2211:5: {...}?variableId= Identifier
                    {
                    if ( !((isVariableOfType(input.LT(1).getText(), "STRING"))) ) {
                        if (state.backtracking>0) {state.failed=true; return expr;}
                        throw new FailedPredicateException(input, "simpleStringExpression", "isVariableOfType(input.LT(1).getText(), \"STRING\")");
                    }

                    variableId=(Token)match(input,Identifier,FOLLOW_Identifier_in_simpleStringExpression12965); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createStringVariableReference(variableId);}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "simpleStringExpression"



    // $ANTLR start "booleanExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2222:1: booleanExpression returns [Expression expr = null] : ( ( featureTypeExpression )=>fmbe= featureTypeExpression | ( featureExpression )=>fe= featureExpression | ( composedBooleanExpression )=>bcE= composedBooleanExpression |sbE= simpleBooleanExpression );
    public final Expression booleanExpression() throws RecognitionException {
        Expression expr =  null;


        Expression fmbe =null;

        Expression fe =null;

        Expression bcE =null;

        Expression sbE =null;



        expr = ExpressionFactory.createEmptyBooleanExpression(input.LT(1));

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2226:2: ( ( featureTypeExpression )=>fmbe= featureTypeExpression | ( featureExpression )=>fe= featureExpression | ( composedBooleanExpression )=>bcE= composedBooleanExpression |sbE= simpleBooleanExpression )
            int alt222=4;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==Identifier) ) {
                int LA222_1 = input.LA(2);

                if ( (synpred56_RutaParser()) ) {
                    alt222=1;
                }
                else if ( (synpred57_RutaParser()) ) {
                    alt222=2;
                }
                else if ( (synpred58_RutaParser()) ) {
                    alt222=3;
                }
                else if ( ((isVariableOfType(input.LT(1).getText(), "BOOLEAN"))) ) {
                    alt222=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA222_0==TRUE) ) {
                int LA222_2 = input.LA(2);

                if ( (synpred58_RutaParser()) ) {
                    alt222=3;
                }
                else if ( (true) ) {
                    alt222=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA222_0==FALSE) ) {
                int LA222_3 = input.LA(2);

                if ( (synpred58_RutaParser()) ) {
                    alt222=3;
                }
                else if ( (true) ) {
                    alt222=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 222, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA222_0==LPAREN) && (synpred58_RutaParser())) {
                alt222=3;
            }
            else if ( (LA222_0==XOR) && (synpred58_RutaParser())) {
                alt222=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;

            }
            switch (alt222) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2227:2: ( featureTypeExpression )=>fmbe= featureTypeExpression
                    {
                    pushFollow(FOLLOW_featureTypeExpression_in_booleanExpression13006);
                    fmbe=featureTypeExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createBooleanExpression(fmbe);}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2228:4: ( featureExpression )=>fe= featureExpression
                    {
                    pushFollow(FOLLOW_featureExpression_in_booleanExpression13022);
                    fe=featureExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createBooleanExpression(fe);}

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2229:4: ( composedBooleanExpression )=>bcE= composedBooleanExpression
                    {
                    pushFollow(FOLLOW_composedBooleanExpression_in_booleanExpression13038);
                    bcE=composedBooleanExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = bcE;}

                    }
                    break;
                case 4 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2230:4: sbE= simpleBooleanExpression
                    {
                    pushFollow(FOLLOW_simpleBooleanExpression_in_booleanExpression13049);
                    sbE=simpleBooleanExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = sbE;}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "booleanExpression"



    // $ANTLR start "simpleBooleanExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2233:1: simpleBooleanExpression returns [Expression expr = null] : (lbE= literalBooleanExpression |{...}? (variableId= Identifier ) ) ;
    public final Expression simpleBooleanExpression() throws RecognitionException {
        Expression expr =  null;


        Token variableId=null;
        BooleanLiteral lbE =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2234:2: ( (lbE= literalBooleanExpression |{...}? (variableId= Identifier ) ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2235:3: (lbE= literalBooleanExpression |{...}? (variableId= Identifier ) )
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2235:3: (lbE= literalBooleanExpression |{...}? (variableId= Identifier ) )
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( ((LA223_0 >= TRUE && LA223_0 <= FALSE)) ) {
                alt223=1;
            }
            else if ( (LA223_0==Identifier) ) {
                alt223=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);

                throw nvae;

            }
            switch (alt223) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2235:4: lbE= literalBooleanExpression
                    {
                    pushFollow(FOLLOW_literalBooleanExpression_in_simpleBooleanExpression13074);
                    lbE=literalBooleanExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = lbE;}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2236:4: {...}? (variableId= Identifier )
                    {
                    if ( !((isVariableOfType(input.LT(1).getText(), "BOOLEAN"))) ) {
                        if (state.backtracking>0) {state.failed=true; return expr;}
                        throw new FailedPredicateException(input, "simpleBooleanExpression", "isVariableOfType(input.LT(1).getText(), \"BOOLEAN\")");
                    }

                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2236:57: (variableId= Identifier )
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2236:58: variableId= Identifier
                    {
                    variableId=(Token)match(input,Identifier,FOLLOW_Identifier_in_simpleBooleanExpression13087); if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createBooleanVariableReference(variableId);}

                    }


                    }
                    break;

            }


            if ( state.backtracking==0 ) {expr = ExpressionFactory.createBooleanExpression(expr);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "simpleBooleanExpression"



    // $ANTLR start "composedBooleanExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2243:1: composedBooleanExpression returns [Expression expr = null] : ( (e2= booleanCompare )=>e2= booleanCompare | (bte= booleanTypeExpression )=>bte= booleanTypeExpression | (bne= booleanNumberExpression )=>bne= booleanNumberExpression |e1= booleanFunction );
    public final Expression composedBooleanExpression() throws RecognitionException {
        Expression expr =  null;


        Expression e2 =null;

        Expression bte =null;

        Expression bne =null;

        Expression e1 =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2244:2: ( (e2= booleanCompare )=>e2= booleanCompare | (bte= booleanTypeExpression )=>bte= booleanTypeExpression | (bne= booleanNumberExpression )=>bne= booleanNumberExpression |e1= booleanFunction )
            int alt224=4;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==TRUE) && (synpred59_RutaParser())) {
                alt224=1;
            }
            else if ( (LA224_0==FALSE) && (synpred59_RutaParser())) {
                alt224=1;
            }
            else if ( (LA224_0==Identifier) ) {
                int LA224_3 = input.LA(2);

                if ( (((synpred59_RutaParser()&&synpred59_RutaParser())&&(isVariableOfType(input.LT(1).getText(), "BOOLEAN")))) ) {
                    alt224=1;
                }
                else if ( (synpred60_RutaParser()) ) {
                    alt224=2;
                }
                else if ( (true) ) {
                    alt224=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return expr;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 224, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA224_0==LPAREN) && (synpred61_RutaParser())) {
                alt224=3;
            }
            else if ( (LA224_0==XOR) ) {
                alt224=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;

            }
            switch (alt224) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2245:2: (e2= booleanCompare )=>e2= booleanCompare
                    {
                    pushFollow(FOLLOW_booleanCompare_in_composedBooleanExpression13133);
                    e2=booleanCompare();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = e2;}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2246:4: (bte= booleanTypeExpression )=>bte= booleanTypeExpression
                    {
                    pushFollow(FOLLOW_booleanTypeExpression_in_composedBooleanExpression13153);
                    bte=booleanTypeExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = bte;}

                    }
                    break;
                case 3 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2247:4: (bne= booleanNumberExpression )=>bne= booleanNumberExpression
                    {
                    pushFollow(FOLLOW_booleanNumberExpression_in_composedBooleanExpression13172);
                    bne=booleanNumberExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = bne;}

                    }
                    break;
                case 4 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2248:4: e1= booleanFunction
                    {
                    pushFollow(FOLLOW_booleanFunction_in_composedBooleanExpression13182);
                    e1=booleanFunction();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = e1;}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "composedBooleanExpression"



    // $ANTLR start "booleanFunction"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2252:1: booleanFunction returns [Expression expr = null] : ( (op= XOR LPAREN e1= booleanExpression COMMA e2= booleanExpression RPAREN ) | (e= externalBooleanFunction )=>e= externalBooleanFunction );
    public final Expression booleanFunction() throws RecognitionException {
        Expression expr =  null;


        Token op=null;
        Expression e1 =null;

        Expression e2 =null;

        Expression e =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2254:2: ( (op= XOR LPAREN e1= booleanExpression COMMA e2= booleanExpression RPAREN ) | (e= externalBooleanFunction )=>e= externalBooleanFunction )
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==XOR) ) {
                alt225=1;
            }
            else if ( (LA225_0==Identifier) && (synpred62_RutaParser())) {
                alt225=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);

                throw nvae;

            }
            switch (alt225) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2255:2: (op= XOR LPAREN e1= booleanExpression COMMA e2= booleanExpression RPAREN )
                    {
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2255:2: (op= XOR LPAREN e1= booleanExpression COMMA e2= booleanExpression RPAREN )
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2255:3: op= XOR LPAREN e1= booleanExpression COMMA e2= booleanExpression RPAREN
                    {
                    op=(Token)match(input,XOR,FOLLOW_XOR_in_booleanFunction13207); if (state.failed) return expr;

                    match(input,LPAREN,FOLLOW_LPAREN_in_booleanFunction13209); if (state.failed) return expr;

                    pushFollow(FOLLOW_booleanExpression_in_booleanFunction13215);
                    e1=booleanExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    match(input,COMMA,FOLLOW_COMMA_in_booleanFunction13217); if (state.failed) return expr;

                    pushFollow(FOLLOW_booleanExpression_in_booleanFunction13223);
                    e2=booleanExpression();

                    state._fsp--;
                    if (state.failed) return expr;

                    match(input,RPAREN,FOLLOW_RPAREN_in_booleanFunction13225); if (state.failed) return expr;

                    }


                    if ( state.backtracking==0 ) {expr = ExpressionFactory.createBooleanFunction(op,e1,e2);}

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2257:4: (e= externalBooleanFunction )=>e= externalBooleanFunction
                    {
                    pushFollow(FOLLOW_externalBooleanFunction_in_booleanFunction13247);
                    e=externalBooleanFunction();

                    state._fsp--;
                    if (state.failed) return expr;

                    if ( state.backtracking==0 ) {expr = e;}

                    }
                    break;

            }
        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "booleanFunction"



    // $ANTLR start "externalBooleanFunction"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2261:1: externalBooleanFunction returns [Expression expr = null] : id= Identifier LPAREN (args= varArgumentList )? RPAREN ;
    public final Expression externalBooleanFunction() throws RecognitionException {
        Expression expr =  null;


        Token id=null;
        List<Expression> args =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2262:2: (id= Identifier LPAREN (args= varArgumentList )? RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2263:2: id= Identifier LPAREN (args= varArgumentList )? RPAREN
            {
            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_externalBooleanFunction13271); if (state.failed) return expr;

            match(input,LPAREN,FOLLOW_LPAREN_in_externalBooleanFunction13274); if (state.failed) return expr;

            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2265:7: (args= varArgumentList )?
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==REMOVESTRING||(LA226_0 >= EXP && LA226_0 <= FALSE)||LA226_0==DecimalLiteral||LA226_0==FloatingPointLiteral||LA226_0==StringLiteral||(LA226_0 >= Identifier && LA226_0 <= LPAREN)||LA226_0==MINUS) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2265:7: args= varArgumentList
                    {
                    pushFollow(FOLLOW_varArgumentList_in_externalBooleanFunction13281);
                    args=varArgumentList();

                    state._fsp--;
                    if (state.failed) return expr;

                    }
                    break;

            }


            match(input,RPAREN,FOLLOW_RPAREN_in_externalBooleanFunction13285); if (state.failed) return expr;

            if ( state.backtracking==0 ) {
            		expr = external.createExternalBooleanFunction(id, args);
            	}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "externalBooleanFunction"



    // $ANTLR start "booleanCompare"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2273:1: booleanCompare returns [Expression expr = null] : (e1= simpleBooleanExpression op= ( EQUAL | NOTEQUAL ) e2= booleanExpression ) ;
    public final Expression booleanCompare() throws RecognitionException {
        Expression expr =  null;


        Token op=null;
        Expression e1 =null;

        Expression e2 =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2274:2: ( (e1= simpleBooleanExpression op= ( EQUAL | NOTEQUAL ) e2= booleanExpression ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2275:2: (e1= simpleBooleanExpression op= ( EQUAL | NOTEQUAL ) e2= booleanExpression )
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2275:2: (e1= simpleBooleanExpression op= ( EQUAL | NOTEQUAL ) e2= booleanExpression )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2275:3: e1= simpleBooleanExpression op= ( EQUAL | NOTEQUAL ) e2= booleanExpression
            {
            pushFollow(FOLLOW_simpleBooleanExpression_in_booleanCompare13310);
            e1=simpleBooleanExpression();

            state._fsp--;
            if (state.failed) return expr;

            op=(Token)input.LT(1);

            if ( (input.LA(1) >= EQUAL && input.LA(1) <= NOTEQUAL) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            pushFollow(FOLLOW_booleanExpression_in_booleanCompare13328);
            e2=booleanExpression();

            state._fsp--;
            if (state.failed) return expr;

            }


            if ( state.backtracking==0 ) {expr = ExpressionFactory.createBooleanFunction(op,e1,e2);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "booleanCompare"



    // $ANTLR start "literalBooleanExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2280:1: literalBooleanExpression returns [BooleanLiteral expr = null] : (value= TRUE |value= FALSE ) ;
    public final BooleanLiteral literalBooleanExpression() throws RecognitionException {
        BooleanLiteral expr =  null;


        Token value=null;

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2281:2: ( (value= TRUE |value= FALSE ) )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2282:2: (value= TRUE |value= FALSE )
            {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2282:2: (value= TRUE |value= FALSE )
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==TRUE) ) {
                alt227=1;
            }
            else if ( (LA227_0==FALSE) ) {
                alt227=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);

                throw nvae;

            }
            switch (alt227) {
                case 1 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2282:3: value= TRUE
                    {
                    value=(Token)match(input,TRUE,FOLLOW_TRUE_in_literalBooleanExpression13355); if (state.failed) return expr;

                    }
                    break;
                case 2 :
                    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2283:4: value= FALSE
                    {
                    value=(Token)match(input,FALSE,FOLLOW_FALSE_in_literalBooleanExpression13365); if (state.failed) return expr;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {expr = ExpressionFactory.createSimpleBooleanExpression(value);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "literalBooleanExpression"



    // $ANTLR start "booleanTypeExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2288:1: booleanTypeExpression returns [Expression expr = null] : e1= typeExpression op= ( EQUAL | NOTEQUAL ) e2= typeExpression ;
    public final Expression booleanTypeExpression() throws RecognitionException {
        Expression expr =  null;


        Token op=null;
        Expression e1 =null;

        Expression e2 =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2289:2: (e1= typeExpression op= ( EQUAL | NOTEQUAL ) e2= typeExpression )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2290:2: e1= typeExpression op= ( EQUAL | NOTEQUAL ) e2= typeExpression
            {
            pushFollow(FOLLOW_typeExpression_in_booleanTypeExpression13392);
            e1=typeExpression();

            state._fsp--;
            if (state.failed) return expr;

            op=(Token)input.LT(1);

            if ( (input.LA(1) >= EQUAL && input.LA(1) <= NOTEQUAL) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            pushFollow(FOLLOW_typeExpression_in_booleanTypeExpression13412);
            e2=typeExpression();

            state._fsp--;
            if (state.failed) return expr;

            if ( state.backtracking==0 ) {expr = ExpressionFactory.createBooleanTypeExpression(e1,op,e2);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "booleanTypeExpression"



    // $ANTLR start "booleanNumberExpression"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2298:1: booleanNumberExpression returns [Expression expr = null] : LPAREN e1= numberExpression op= ( LESS | GREATER | GREATEREQUAL | LESSEQUAL | EQUAL | NOTEQUAL ) e2= numberExpression RPAREN ;
    public final Expression booleanNumberExpression() throws RecognitionException {
        Expression expr =  null;


        Token op=null;
        Expression e1 =null;

        Expression e2 =null;


        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2299:2: ( LPAREN e1= numberExpression op= ( LESS | GREATER | GREATEREQUAL | LESSEQUAL | EQUAL | NOTEQUAL ) e2= numberExpression RPAREN )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2300:2: LPAREN e1= numberExpression op= ( LESS | GREATER | GREATEREQUAL | LESSEQUAL | EQUAL | NOTEQUAL ) e2= numberExpression RPAREN
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_booleanNumberExpression13435); if (state.failed) return expr;

            pushFollow(FOLLOW_numberExpression_in_booleanNumberExpression13442);
            e1=numberExpression();

            state._fsp--;
            if (state.failed) return expr;

            op=(Token)input.LT(1);

            if ( (input.LA(1) >= LESS && input.LA(1) <= GREATER)||(input.LA(1) >= EQUAL && input.LA(1) <= NOTEQUAL)||(input.LA(1) >= LESSEQUAL && input.LA(1) <= GREATEREQUAL) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return expr;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            pushFollow(FOLLOW_numberExpression_in_booleanNumberExpression13478);
            e2=numberExpression();

            state._fsp--;
            if (state.failed) return expr;

            match(input,RPAREN,FOLLOW_RPAREN_in_booleanNumberExpression13481); if (state.failed) return expr;

            if ( state.backtracking==0 ) {expr = ExpressionFactory.createBooleanNumberExpression(e1,op,e2);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return expr;
    }
    // $ANTLR end "booleanNumberExpression"



    // $ANTLR start "genericVariableReference"
    // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2308:1: genericVariableReference returns [Expression varRef] : id= Identifier ;
    public final Expression genericVariableReference() throws RecognitionException {
        Expression varRef = null;


        Token id=null;

        try {
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2309:3: (id= Identifier )
            // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2310:3: id= Identifier
            {
            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericVariableReference13501); if (state.failed) return varRef;

            if ( state.backtracking==0 ) {return ExpressionFactory.createGenericVariableReference(id);}

            }

        }

        	catch (RecognitionException exception1) {
        		if( reporter != null ) {
        			reporter.reportError(exception1);
        		}
        		recover(input,exception1);
        	}
        	catch (Throwable exception2) {
        		if( reporter != null ) {
        			reporter.reportThrowable(exception2);
        		}
        	}

        finally {
        	// do for sure before leaving
        }
        return varRef;
    }
    // $ANTLR end "genericVariableReference"

    // $ANTLR start synpred1_RutaParser
    public final void synpred1_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:577:2: ( regexpRule )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:577:3: regexpRule
        {
        pushFollow(FOLLOW_regexpRule_in_synpred1_RutaParser1854);
        regexpRule();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_RutaParser

    // $ANTLR start synpred2_RutaParser
    public final void synpred2_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:594:2: ( numberExpression ASSIGN_EQUAL )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:594:3: numberExpression ASSIGN_EQUAL
        {
        pushFollow(FOLLOW_numberExpression_in_synpred2_RutaParser1925);
        numberExpression();

        state._fsp--;
        if (state.failed) return ;

        match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_synpred2_RutaParser1927); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_RutaParser

    // $ANTLR start synpred3_RutaParser
    public final void synpred3_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:608:2: ( numberExpression ASSIGN_EQUAL )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:608:3: numberExpression ASSIGN_EQUAL
        {
        pushFollow(FOLLOW_numberExpression_in_synpred3_RutaParser2087);
        numberExpression();

        state._fsp--;
        if (state.failed) return ;

        match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_synpred3_RutaParser2089); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_RutaParser

    // $ANTLR start synpred4_RutaParser
    public final void synpred4_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:685:2: ( ruleElement VBAR )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:685:3: ruleElement VBAR
        {
        pushFollow(FOLLOW_ruleElement_in_synpred4_RutaParser2565);
        ruleElement();

        state._fsp--;
        if (state.failed) return ;

        match(input,VBAR,FOLLOW_VBAR_in_synpred4_RutaParser2567); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_RutaParser

    // $ANTLR start synpred5_RutaParser
    public final void synpred5_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:687:2: ( ruleElement AMPER )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:687:3: ruleElement AMPER
        {
        pushFollow(FOLLOW_ruleElement_in_synpred5_RutaParser2597);
        ruleElement();

        state._fsp--;
        if (state.failed) return ;

        match(input,AMPER,FOLLOW_AMPER_in_synpred5_RutaParser2599); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_RutaParser

    // $ANTLR start synpred8_RutaParser
    public final void synpred8_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:751:2: ( booleanListExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:751:3: booleanListExpression
        {
        pushFollow(FOLLOW_booleanListExpression_in_synpred8_RutaParser3073);
        booleanListExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_RutaParser

    // $ANTLR start synpred9_RutaParser
    public final void synpred9_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:752:4: ( intListExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:752:5: intListExpression
        {
        pushFollow(FOLLOW_intListExpression_in_synpred9_RutaParser3089);
        intListExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_RutaParser

    // $ANTLR start synpred10_RutaParser
    public final void synpred10_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:753:4: ( doubleListExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:753:5: doubleListExpression
        {
        pushFollow(FOLLOW_doubleListExpression_in_synpred10_RutaParser3105);
        doubleListExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_RutaParser

    // $ANTLR start synpred11_RutaParser
    public final void synpred11_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:754:4: ( floatListExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:754:5: floatListExpression
        {
        pushFollow(FOLLOW_floatListExpression_in_synpred11_RutaParser3121);
        floatListExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_RutaParser

    // $ANTLR start synpred12_RutaParser
    public final void synpred12_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:755:4: ( stringListExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:755:5: stringListExpression
        {
        pushFollow(FOLLOW_stringListExpression_in_synpred12_RutaParser3137);
        stringListExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_RutaParser

    // $ANTLR start synpred13_RutaParser
    public final void synpred13_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:756:4: ( typeListExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:756:5: typeListExpression
        {
        pushFollow(FOLLOW_typeListExpression_in_synpred13_RutaParser3153);
        typeListExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_RutaParser

    // $ANTLR start synpred14_RutaParser
    public final void synpred14_RutaParser_fragment() throws RecognitionException {
        Expression e1 =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:798:2: (e1= doubleListExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:798:3: e1= doubleListExpression
        {
        pushFollow(FOLLOW_doubleListExpression_in_synpred14_RutaParser3366);
        e1=doubleListExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_RutaParser

    // $ANTLR start synpred15_RutaParser
    public final void synpred15_RutaParser_fragment() throws RecognitionException {
        Expression e1 =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:800:2: (e1= floatListExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:800:3: e1= floatListExpression
        {
        pushFollow(FOLLOW_floatListExpression_in_synpred15_RutaParser3387);
        e1=floatListExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_RutaParser

    // $ANTLR start synpred16_RutaParser
    public final void synpred16_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:885:2: ( featureTypeExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:885:3: featureTypeExpression
        {
        pushFollow(FOLLOW_featureTypeExpression_in_synpred16_RutaParser3809);
        featureTypeExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_RutaParser

    // $ANTLR start synpred17_RutaParser
    public final void synpred17_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:887:2: ( typeFunction )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:887:3: typeFunction
        {
        pushFollow(FOLLOW_typeFunction_in_synpred17_RutaParser3827);
        typeFunction();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_RutaParser

    // $ANTLR start synpred18_RutaParser
    public final void synpred18_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:901:2: ( typeFunction )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:901:3: typeFunction
        {
        pushFollow(FOLLOW_typeFunction_in_synpred18_RutaParser3881);
        typeFunction();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_RutaParser

    // $ANTLR start synpred20_RutaParser
    public final void synpred20_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1014:4: ( externalCondition )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1014:5: externalCondition
        {
        pushFollow(FOLLOW_externalCondition_in_synpred20_RutaParser4544);
        externalCondition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_RutaParser

    // $ANTLR start synpred21_RutaParser
    public final void synpred21_RutaParser_fragment() throws RecognitionException {
        Token name=null;
        Expression type =null;

        Expression a =null;

        Expression min =null;

        Expression max =null;

        Expression var =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1075:6: (name= COUNT LPAREN type= listExpression COMMA a= argument ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1075:6: name= COUNT LPAREN type= listExpression COMMA a= argument ( COMMA min= numberExpression COMMA max= numberExpression )? ( COMMA var= numberVariable )? RPAREN
        {
        name=(Token)match(input,COUNT,FOLLOW_COUNT_in_synpred21_RutaParser4972); if (state.failed) return ;

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred21_RutaParser4974); if (state.failed) return ;

        pushFollow(FOLLOW_listExpression_in_synpred21_RutaParser4980);
        type=listExpression();

        state._fsp--;
        if (state.failed) return ;

        match(input,COMMA,FOLLOW_COMMA_in_synpred21_RutaParser4995); if (state.failed) return ;

        pushFollow(FOLLOW_argument_in_synpred21_RutaParser5001);
        a=argument();

        state._fsp--;
        if (state.failed) return ;

        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1079:6: ( COMMA min= numberExpression COMMA max= numberExpression )?
        int alt228=2;
        int LA228_0 = input.LA(1);

        if ( (LA228_0==COMMA) ) {
            int LA228_1 = input.LA(2);

            if ( (LA228_1==Identifier) ) {
                int LA228_3 = input.LA(3);

                if ( (LA228_3==LPAREN||LA228_3==DOT||LA228_3==COMMA||(LA228_3 >= PLUS && LA228_3 <= SLASH)||LA228_3==PERCENT) ) {
                    alt228=1;
                }
            }
            else if ( ((LA228_1 >= EXP && LA228_1 <= TAN)||LA228_1==DecimalLiteral||LA228_1==FloatingPointLiteral||LA228_1==LPAREN||LA228_1==MINUS) ) {
                alt228=1;
            }
        }
        switch (alt228) {
            case 1 :
                // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1079:7: COMMA min= numberExpression COMMA max= numberExpression
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred21_RutaParser5017); if (state.failed) return ;

                pushFollow(FOLLOW_numberExpression_in_synpred21_RutaParser5023);
                min=numberExpression();

                state._fsp--;
                if (state.failed) return ;

                match(input,COMMA,FOLLOW_COMMA_in_synpred21_RutaParser5025); if (state.failed) return ;

                pushFollow(FOLLOW_numberExpression_in_synpred21_RutaParser5031);
                max=numberExpression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1081:6: ( COMMA var= numberVariable )?
        int alt229=2;
        int LA229_0 = input.LA(1);

        if ( (LA229_0==COMMA) ) {
            alt229=1;
        }
        switch (alt229) {
            case 1 :
                // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1081:7: COMMA var= numberVariable
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred21_RutaParser5049); if (state.failed) return ;

                pushFollow(FOLLOW_numberVariable_in_synpred21_RutaParser5055);
                var=numberVariable();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,RPAREN,FOLLOW_RPAREN_in_synpred21_RutaParser5071); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_RutaParser

    // $ANTLR start synpred22_RutaParser
    public final void synpred22_RutaParser_fragment() throws RecognitionException {
        Expression list2 =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1120:27: (list2= stringListExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1120:28: list2= stringListExpression
        {
        pushFollow(FOLLOW_stringListExpression_in_synpred22_RutaParser5436);
        list2=stringListExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_RutaParser

    // $ANTLR start synpred23_RutaParser
    public final void synpred23_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1191:6: ( stringExpression COMMA stringExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1191:7: stringExpression COMMA stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred23_RutaParser6116);
        stringExpression();

        state._fsp--;
        if (state.failed) return ;

        match(input,COMMA,FOLLOW_COMMA_in_synpred23_RutaParser6118); if (state.failed) return ;

        pushFollow(FOLLOW_stringExpression_in_synpred23_RutaParser6120);
        stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_RutaParser

    // $ANTLR start synpred24_RutaParser
    public final void synpred24_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1323:4: ( externalAction )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1323:5: externalAction
        {
        pushFollow(FOLLOW_externalAction_in_synpred24_RutaParser7278);
        externalAction();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred24_RutaParser

    // $ANTLR start synpred25_RutaParser
    public final void synpred25_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1324:4: ( featureAssignmentExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1324:5: featureAssignmentExpression
        {
        pushFollow(FOLLOW_featureAssignmentExpression_in_synpred25_RutaParser7292);
        featureAssignmentExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred25_RutaParser

    // $ANTLR start synpred26_RutaParser
    public final void synpred26_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1325:4: ( typeExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1325:5: typeExpression
        {
        pushFollow(FOLLOW_typeExpression_in_synpred26_RutaParser7308);
        typeExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred26_RutaParser

    // $ANTLR start synpred27_RutaParser
    public final void synpred27_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1366:6: ( numberExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1366:7: numberExpression
        {
        pushFollow(FOLLOW_numberExpression_in_synpred27_RutaParser7466);
        numberExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_RutaParser

    // $ANTLR start synpred28_RutaParser
    public final void synpred28_RutaParser_fragment() throws RecognitionException {
        Expression index =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1366:75: ( COMMA index= numberExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1366:76: COMMA index= numberExpression
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred28_RutaParser7480); if (state.failed) return ;

        pushFollow(FOLLOW_numberExpression_in_synpred28_RutaParser7486);
        index=numberExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_RutaParser

    // $ANTLR start synpred29_RutaParser
    public final void synpred29_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1368:6: ( stringExpression ASSIGN_EQUAL )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1368:7: stringExpression ASSIGN_EQUAL
        {
        pushFollow(FOLLOW_stringExpression_in_synpred29_RutaParser7518);
        stringExpression();

        state._fsp--;
        if (state.failed) return ;

        match(input,ASSIGN_EQUAL,FOLLOW_ASSIGN_EQUAL_in_synpred29_RutaParser7520); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_RutaParser

    // $ANTLR start synpred30_RutaParser
    public final void synpred30_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1388:7: ( booleanExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1388:8: booleanExpression
        {
        pushFollow(FOLLOW_booleanExpression_in_synpred30_RutaParser7680);
        booleanExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_RutaParser

    // $ANTLR start synpred31_RutaParser
    public final void synpred31_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1418:6: ( numberExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1418:7: numberExpression
        {
        pushFollow(FOLLOW_numberExpression_in_synpred31_RutaParser7866);
        numberExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred31_RutaParser

    // $ANTLR start synpred32_RutaParser
    public final void synpred32_RutaParser_fragment() throws RecognitionException {
        Expression index =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1418:75: ( COMMA index= numberExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1418:76: COMMA index= numberExpression
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred32_RutaParser7880); if (state.failed) return ;

        pushFollow(FOLLOW_numberExpression_in_synpred32_RutaParser7886);
        index=numberExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred32_RutaParser

    // $ANTLR start synpred36_RutaParser
    public final void synpred36_RutaParser_fragment() throws RecognitionException {
        Expression score =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1523:29: (score= numberExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1523:30: score= numberExpression
        {
        pushFollow(FOLLOW_numberExpression_in_synpred36_RutaParser8714);
        score=numberExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred36_RutaParser

    // $ANTLR start synpred37_RutaParser
    public final void synpred37_RutaParser_fragment() throws RecognitionException {
        Expression type =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1523:92: (type= typeExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1523:93: type= typeExpression
        {
        pushFollow(FOLLOW_typeExpression_in_synpred37_RutaParser8734);
        type=typeExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred37_RutaParser

    // $ANTLR start synpred39_RutaParser
    public final void synpred39_RutaParser_fragment() throws RecognitionException {
        Expression b =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1768:4: (b= booleanExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1768:5: b= booleanExpression
        {
        pushFollow(FOLLOW_booleanExpression_in_synpred39_RutaParser10460);
        b=booleanExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred39_RutaParser

    // $ANTLR start synpred40_RutaParser
    public final void synpred40_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1941:2: ( stringExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1941:3: stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred40_RutaParser11609);
        stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred40_RutaParser

    // $ANTLR start synpred41_RutaParser
    public final void synpred41_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1942:4: ( booleanExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1942:5: booleanExpression
        {
        pushFollow(FOLLOW_booleanExpression_in_synpred41_RutaParser11625);
        booleanExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred41_RutaParser

    // $ANTLR start synpred42_RutaParser
    public final void synpred42_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1943:4: ( numberExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1943:5: numberExpression
        {
        pushFollow(FOLLOW_numberExpression_in_synpred42_RutaParser11641);
        numberExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred42_RutaParser

    // $ANTLR start synpred43_RutaParser
    public final void synpred43_RutaParser_fragment() throws RecognitionException {
        Expression a4 =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1959:3: (a4= simpleStringExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1959:3: a4= simpleStringExpression
        {
        pushFollow(FOLLOW_simpleStringExpression_in_synpred43_RutaParser11709);
        a4=simpleStringExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred43_RutaParser

    // $ANTLR start synpred44_RutaParser
    public final void synpred44_RutaParser_fragment() throws RecognitionException {
        Expression a2 =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1960:4: (a2= simpleBooleanExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1960:4: a2= simpleBooleanExpression
        {
        pushFollow(FOLLOW_simpleBooleanExpression_in_synpred44_RutaParser11720);
        a2=simpleBooleanExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred44_RutaParser

    // $ANTLR start synpred45_RutaParser
    public final void synpred45_RutaParser_fragment() throws RecognitionException {
        Expression a3 =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1961:4: (a3= simpleNumberExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:1961:4: a3= simpleNumberExpression
        {
        pushFollow(FOLLOW_simpleNumberExpression_in_synpred45_RutaParser11731);
        a3=simpleNumberExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred45_RutaParser

    // $ANTLR start synpred46_RutaParser
    public final void synpred46_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2095:3: ( PLUS | MINUS )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:
        {
        if ( (input.LA(1) >= PLUS && input.LA(1) <= MINUS) ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred46_RutaParser

    // $ANTLR start synpred47_RutaParser
    public final void synpred47_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2101:3: ( simpleNumberExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2101:4: simpleNumberExpression
        {
        pushFollow(FOLLOW_simpleNumberExpression_in_synpred47_RutaParser12286);
        simpleNumberExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred47_RutaParser

    // $ANTLR start synpred48_RutaParser
    public final void synpred48_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2102:4: ( STAR | SLASH | PERCENT )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:
        {
        if ( (input.LA(1) >= STAR && input.LA(1) <= SLASH)||input.LA(1)==PERCENT ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred48_RutaParser

    // $ANTLR start synpred49_RutaParser
    public final void synpred49_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2119:2: ( featureExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2119:3: featureExpression
        {
        pushFollow(FOLLOW_featureExpression_in_synpred49_RutaParser12410);
        featureExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred49_RutaParser

    // $ANTLR start synpred50_RutaParser
    public final void synpred50_RutaParser_fragment() throws RecognitionException {
        Expression e =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2138:4: (e= externalNumberFunction )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2138:5: e= externalNumberFunction
        {
        pushFollow(FOLLOW_externalNumberFunction_in_synpred50_RutaParser12561);
        e=externalNumberFunction();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred50_RutaParser

    // $ANTLR start synpred51_RutaParser
    public final void synpred51_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2170:2: ( featureExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2170:3: featureExpression
        {
        pushFollow(FOLLOW_featureExpression_in_synpred51_RutaParser12698);
        featureExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred51_RutaParser

    // $ANTLR start synpred52_RutaParser
    public final void synpred52_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2172:2: ( stringFunction )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2172:3: stringFunction
        {
        pushFollow(FOLLOW_stringFunction_in_synpred52_RutaParser12715);
        stringFunction();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred52_RutaParser

    // $ANTLR start synpred53_RutaParser
    public final void synpred53_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2175:3: ( PLUS )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2175:4: PLUS
        {
        match(input,PLUS,FOLLOW_PLUS_in_synpred53_RutaParser12743); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred53_RutaParser

    // $ANTLR start synpred54_RutaParser
    public final void synpred54_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2178:5: ( listExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2178:6: listExpression
        {
        pushFollow(FOLLOW_listExpression_in_synpred54_RutaParser12787);
        listExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred54_RutaParser

    // $ANTLR start synpred55_RutaParser
    public final void synpred55_RutaParser_fragment() throws RecognitionException {
        Expression e =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2192:2: (e= externalStringFunction )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2192:3: e= externalStringFunction
        {
        pushFollow(FOLLOW_externalStringFunction_in_synpred55_RutaParser12880);
        e=externalStringFunction();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred55_RutaParser

    // $ANTLR start synpred56_RutaParser
    public final void synpred56_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2227:2: ( featureTypeExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2227:3: featureTypeExpression
        {
        pushFollow(FOLLOW_featureTypeExpression_in_synpred56_RutaParser12999);
        featureTypeExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred56_RutaParser

    // $ANTLR start synpred57_RutaParser
    public final void synpred57_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2228:4: ( featureExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2228:5: featureExpression
        {
        pushFollow(FOLLOW_featureExpression_in_synpred57_RutaParser13014);
        featureExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred57_RutaParser

    // $ANTLR start synpred58_RutaParser
    public final void synpred58_RutaParser_fragment() throws RecognitionException {
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2229:4: ( composedBooleanExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2229:5: composedBooleanExpression
        {
        pushFollow(FOLLOW_composedBooleanExpression_in_synpred58_RutaParser13030);
        composedBooleanExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred58_RutaParser

    // $ANTLR start synpred59_RutaParser
    public final void synpred59_RutaParser_fragment() throws RecognitionException {
        Expression e2 =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2245:2: (e2= booleanCompare )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2245:3: e2= booleanCompare
        {
        pushFollow(FOLLOW_booleanCompare_in_synpred59_RutaParser13125);
        e2=booleanCompare();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred59_RutaParser

    // $ANTLR start synpred60_RutaParser
    public final void synpred60_RutaParser_fragment() throws RecognitionException {
        Expression bte =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2246:4: (bte= booleanTypeExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2246:5: bte= booleanTypeExpression
        {
        pushFollow(FOLLOW_booleanTypeExpression_in_synpred60_RutaParser13145);
        bte=booleanTypeExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred60_RutaParser

    // $ANTLR start synpred61_RutaParser
    public final void synpred61_RutaParser_fragment() throws RecognitionException {
        Expression bne =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2247:4: (bne= booleanNumberExpression )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2247:5: bne= booleanNumberExpression
        {
        pushFollow(FOLLOW_booleanNumberExpression_in_synpred61_RutaParser13164);
        bne=booleanNumberExpression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred61_RutaParser

    // $ANTLR start synpred62_RutaParser
    public final void synpred62_RutaParser_fragment() throws RecognitionException {
        Expression e =null;


        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2257:4: (e= externalBooleanFunction )
        // D:\\work\\workspace-uima-ruta\\ruta\\ruta-ep-ide\\src\\main\\antlr3\\org\\apache\\uima\\ruta\\ide\\core\\parser\\RutaParser.g:2257:5: e= externalBooleanFunction
        {
        pushFollow(FOLLOW_externalBooleanFunction_in_synpred62_RutaParser13239);
        e=externalBooleanFunction();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred62_RutaParser

    // Delegated rules

    public final boolean synpred29_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_RutaParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_RutaParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA32 dfa32 = new DFA32(this);
    static final String DFA32_eotS =
        "\10\uffff";
    static final String DFA32_eofS =
        "\10\uffff";
    static final String DFA32_minS =
        "\1\11\3\u0081\1\u0082\1\uffff\1\u0081\1\uffff";
    static final String DFA32_maxS =
        "\1\11\1\u0081\1\u008c\1\u0081\1\u008c\1\uffff\1\u0089\1\uffff";
    static final String DFA32_acceptS =
        "\5\uffff\1\1\1\uffff\1\2";
    static final String DFA32_specialS =
        "\10\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\1",
            "\1\2",
            "\1\4\7\uffff\1\3\1\uffff\2\5",
            "\1\6",
            "\1\7\10\uffff\2\5",
            "",
            "\1\4\7\uffff\1\3",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "467:2: (declareToken= DECLARE (lazyParent= annotationType )? id= Identifier ( COMMA id= Identifier )* end= SEMI |declareToken= DECLARE type= annotationType id= Identifier ( LPAREN (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier ( COMMA (obj1= annotationType |obj2= StringString |obj3= DoubleString |obj6= FloatString |obj4= IntString |obj5= BooleanString ) fname= Identifier )* RPAREN ) SEMI )";
        }
    }
 

    public static final BitSet FOLLOW_packageDeclaration_in_file_input73 = new BitSet(new long[]{0x0000000000000E00L,0x080100FC7FF82000L,0x0000000020000006L});
    public static final BitSet FOLLOW_globalStatements_in_file_input88 = new BitSet(new long[]{0x0000000000000E00L,0x080100FC3FC02000L,0x0000000020000006L});
    public static final BitSet FOLLOW_statements_in_file_input95 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_file_input101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PackageString_in_packageDeclaration122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_dottedId_in_packageDeclaration133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_packageDeclaration140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_statements164 = new BitSet(new long[]{0x0000000000000E02L,0x080100FC3FC02000L,0x0000000020000006L});
    public static final BitSet FOLLOW_globalStatement_in_globalStatements190 = new BitSet(new long[]{0x0000000000000002L,0x0000000040380000L});
    public static final BitSet FOLLOW_importStatement_in_globalStatement214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_statement240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclaration_in_statement251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blockDeclaration_in_statement262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleStatement_in_statement275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TypeSystemString_in_importStatement304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_dottedComponentDeclaration_in_importStatement316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_importStatement324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ScriptString_in_importStatement334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_dottedComponentDeclaration_in_importStatement346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_importStatement354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EngineString_in_importStatement364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_dottedComponentDeclaration_in_importStatement376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_importStatement384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UimafitString_in_importStatement395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_dottedComponentDeclaration_in_importStatement407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_importStatement415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IntString_in_variableDeclaration442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201800L});
    public static final BitSet FOLLOW_COMMA_in_variableDeclaration455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201800L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_variableDeclaration470 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_variableDeclaration476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_variableDeclaration481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DoubleString_in_variableDeclaration495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201800L});
    public static final BitSet FOLLOW_COMMA_in_variableDeclaration509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201800L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_variableDeclaration526 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_variableDeclaration532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_variableDeclaration537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FloatString_in_variableDeclaration551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201800L});
    public static final BitSet FOLLOW_COMMA_in_variableDeclaration565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201800L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_variableDeclaration582 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_variableDeclaration588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_variableDeclaration593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringString_in_variableDeclaration607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201800L});
    public static final BitSet FOLLOW_COMMA_in_variableDeclaration621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201800L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_variableDeclaration638 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_variableDeclaration644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_variableDeclaration649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BooleanString_in_variableDeclaration663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201800L});
    public static final BitSet FOLLOW_COMMA_in_variableDeclaration677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201800L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_variableDeclaration694 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_variableDeclaration700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_variableDeclaration705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TypeString_in_variableDeclaration719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201800L});
    public static final BitSet FOLLOW_COMMA_in_variableDeclaration733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201800L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_variableDeclaration750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_variableDeclaration756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_variableDeclaration761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WORDLIST_in_variableDeclaration789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_variableDeclaration798 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_wordListExpression_in_variableDeclaration804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_variableDeclaration808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WORDTABLE_in_variableDeclaration842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_variableDeclaration851 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_wordTableExpression_in_variableDeclaration857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_variableDeclaration862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEANLIST_in_variableDeclaration896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_variableDeclaration905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_booleanListExpression_in_variableDeclaration911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_variableDeclaration916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTLIST_in_variableDeclaration950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_variableDeclaration959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_numberListExpression_in_variableDeclaration965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_variableDeclaration970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLELIST_in_variableDeclaration1005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration1011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_variableDeclaration1014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_numberListExpression_in_variableDeclaration1020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_variableDeclaration1025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOATLIST_in_variableDeclaration1061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration1067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_variableDeclaration1070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_numberListExpression_in_variableDeclaration1076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_variableDeclaration1081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRINGLIST_in_variableDeclaration1123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration1129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_variableDeclaration1132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_stringListExpression_in_variableDeclaration1138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_variableDeclaration1143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPELIST_in_variableDeclaration1185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaration1191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000201000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_variableDeclaration1194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_typeListExpression_in_variableDeclaration1200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_variableDeclaration1205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_declaration1273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_annotationType_in_declaration1279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_declaration1289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_COMMA_in_declaration1301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_declaration1311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_SEMI_in_declaration1330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_declaration1343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_annotationType_in_declaration1347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_declaration1354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_declaration1361 = new BitSet(new long[]{0x0000000000000000L,0x000000003E000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_annotationType_in_declaration1376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_StringString_in_declaration1389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DoubleString_in_declaration1402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_FloatString_in_declaration1414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IntString_in_declaration1428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_BooleanString_in_declaration1440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_declaration1460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_declaration1472 = new BitSet(new long[]{0x0000000000000000L,0x000000003E000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_annotationType_in_declaration1487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_StringString_in_declaration1500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_DoubleString_in_declaration1513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_FloatString_in_declaration1525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IntString_in_declaration1539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_BooleanString_in_declaration1551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_declaration1570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_declaration1578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_declaration1581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BlockString_in_blockDeclaration1642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_AutomataBlockString_in_blockDeclaration1650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_blockDeclaration1654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_blockDeclaration1661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_blockDeclaration1669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_ruleElementWithCA_in_blockDeclaration1676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LCURLY_in_blockDeclaration1682 = new BitSet(new long[]{0x0000000000000E00L,0x080100FC3FC02000L,0x0000000020000086L});
    public static final BitSet FOLLOW_statements_in_blockDeclaration1688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_RCURLY_in_blockDeclaration1694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeMatchExpression_in_ruleElementWithCA1724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000080A050L});
    public static final BitSet FOLLOW_quantifierPart_in_ruleElementWithCA1730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LCURLY_in_ruleElementWithCA1743 = new BitSet(new long[]{0xF80000007FFFF100L,0x0000E00000008810L,0x0000000000004086L});
    public static final BitSet FOLLOW_conditions_in_ruleElementWithCA1749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000000000080L});
    public static final BitSet FOLLOW_THEN_in_ruleElementWithCA1753 = new BitSet(new long[]{0x07FFFFFB80000080L,0x00000000000057EFL,0x0000000000000002L});
    public static final BitSet FOLLOW_actions_in_ruleElementWithCA1759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_RCURLY_in_ruleElementWithCA1767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeMatchExpression_in_ruleElementWithoutCA1807 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000080A010L});
    public static final BitSet FOLLOW_quantifierPart_in_ruleElementWithoutCA1813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_regexpRule_in_simpleStatement1862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleElementsRoot_in_simpleStatement1872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_SEMI_in_simpleStatement1880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_regexpRule1912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_THEN_in_regexpRule1918 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_regexpRule1936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_regexpRule1941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_regexpRule1947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001804L});
    public static final BitSet FOLLOW_LPAREN_in_regexpRule1953 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_regexpRule1961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_regexpRule1963 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_regexpRule1969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_regexpRule1976 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_regexpRule1982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_regexpRule1984 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_regexpRule1990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_regexpRule1997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_typeExpression_in_regexpRule2011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001804L});
    public static final BitSet FOLLOW_LPAREN_in_regexpRule2019 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_regexpRule2027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_regexpRule2029 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_regexpRule2035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_regexpRule2042 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_regexpRule2048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_regexpRule2050 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_regexpRule2056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_regexpRule2063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_COMMA_in_regexpRule2080 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_regexpRule2098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_regexpRule2103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_regexpRule2109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001804L});
    public static final BitSet FOLLOW_LPAREN_in_regexpRule2115 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_regexpRule2123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_regexpRule2125 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_regexpRule2131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_regexpRule2138 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_regexpRule2144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_regexpRule2146 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_regexpRule2152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_regexpRule2159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_typeExpression_in_regexpRule2173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001804L});
    public static final BitSet FOLLOW_LPAREN_in_regexpRule2180 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_regexpRule2188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_regexpRule2190 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_regexpRule2196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_regexpRule2203 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_regexpRule2209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_regexpRule2211 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_regexpRule2217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_regexpRule2224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_SEMI_in_regexpRule2243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleElement_in_ruleElementsRoot2270 = new BitSet(new long[]{0x0000000000001002L,0x0801000000000000L,0x0000000020000006L});
    public static final BitSet FOLLOW_AND_in_ruleElementsRoot2274 = new BitSet(new long[]{0x0000000000000002L,0x0801000000000000L,0x0000000020000006L});
    public static final BitSet FOLLOW_ruleElement_in_ruleElementsRoot2282 = new BitSet(new long[]{0x0000000000000002L,0x0801000000000000L,0x0000000020000006L});
    public static final BitSet FOLLOW_ruleElement_in_ruleElements2307 = new BitSet(new long[]{0x0000000000000002L,0x0801000000000000L,0x0000000020000006L});
    public static final BitSet FOLLOW_ruleElement_in_ruleElements2316 = new BitSet(new long[]{0x0000000000000002L,0x0801000000000000L,0x0000000020000006L});
    public static final BitSet FOLLOW_ruleElementType_in_blockRuleElement2342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARTANCHOR_in_ruleElement2362 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000020000006L});
    public static final BitSet FOLLOW_ruleElementType_in_ruleElement2373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleElementLiteral_in_ruleElement2384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleElementComposed_in_ruleElement2395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleElementWildCard_in_ruleElement2406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WILDCARD_in_ruleElementWildCard2441 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LCURLY_in_ruleElementWildCard2452 = new BitSet(new long[]{0xF80000007FFFF100L,0x0000E00000008810L,0x0000000000004086L});
    public static final BitSet FOLLOW_conditions_in_ruleElementWildCard2478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000000000080L});
    public static final BitSet FOLLOW_THEN_in_ruleElementWildCard2501 = new BitSet(new long[]{0x07FFFFFB80000080L,0x00000000000057EFL,0x0000000000000002L});
    public static final BitSet FOLLOW_actions_in_ruleElementWildCard2507 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_RCURLY_in_ruleElementWildCard2515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_ruleElementComposed2558 = new BitSet(new long[]{0x0000000000000000L,0x0801000000000000L,0x0000000020000006L});
    public static final BitSet FOLLOW_ruleElement_in_ruleElementComposed2575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_VBAR_in_ruleElementComposed2580 = new BitSet(new long[]{0x0000000000000000L,0x0801000000000000L,0x0000000020000006L});
    public static final BitSet FOLLOW_ruleElement_in_ruleElementComposed2586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020008L});
    public static final BitSet FOLLOW_ruleElement_in_ruleElementComposed2607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_AMPER_in_ruleElementComposed2612 = new BitSet(new long[]{0x0000000000000000L,0x0801000000000000L,0x0000000020000006L});
    public static final BitSet FOLLOW_ruleElement_in_ruleElementComposed2618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040008L});
    public static final BitSet FOLLOW_ruleElements_in_ruleElementComposed2632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_ruleElementComposed2644 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000080A050L});
    public static final BitSet FOLLOW_quantifierPart_in_ruleElementComposed2650 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LCURLY_in_ruleElementComposed2654 = new BitSet(new long[]{0xF80000007FFFF100L,0x0000E00000008810L,0x0000000000004086L});
    public static final BitSet FOLLOW_conditions_in_ruleElementComposed2660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000000000080L});
    public static final BitSet FOLLOW_THEN_in_ruleElementComposed2664 = new BitSet(new long[]{0x07FFFFFB80000080L,0x00000000000057EFL,0x0000000000000002L});
    public static final BitSet FOLLOW_actions_in_ruleElementComposed2670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_RCURLY_in_ruleElementComposed2678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeMatchExpression_in_ruleElementType2714 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000080A050L});
    public static final BitSet FOLLOW_quantifierPart_in_ruleElementType2720 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LCURLY_in_ruleElementType2733 = new BitSet(new long[]{0xF80000007FFFF100L,0x0000E00000008810L,0x0000000000004086L});
    public static final BitSet FOLLOW_conditions_in_ruleElementType2759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000000000080L});
    public static final BitSet FOLLOW_THEN_in_ruleElementType2782 = new BitSet(new long[]{0x07FFFFFB80000080L,0x00000000000057EFL,0x0000000000000002L});
    public static final BitSet FOLLOW_actions_in_ruleElementType2788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_RCURLY_in_ruleElementType2796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleStringExpression_in_ruleElementLiteral2854 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000080A050L});
    public static final BitSet FOLLOW_quantifierPart_in_ruleElementLiteral2860 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LCURLY_in_ruleElementLiteral2873 = new BitSet(new long[]{0xF80000007FFFF100L,0x0000E00000008810L,0x0000000000004086L});
    public static final BitSet FOLLOW_conditions_in_ruleElementLiteral2889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000000000080L});
    public static final BitSet FOLLOW_THEN_in_ruleElementLiteral2902 = new BitSet(new long[]{0x07FFFFFB80000080L,0x00000000000057EFL,0x0000000000000002L});
    public static final BitSet FOLLOW_actions_in_ruleElementLiteral2908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_RCURLY_in_ruleElementLiteral2925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_in_conditions2984 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditions2989 = new BitSet(new long[]{0xF80000007FFFF100L,0x0000E00000000810L,0x0000000000004006L});
    public static final BitSet FOLLOW_condition_in_conditions2995 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_action_in_actions3032 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actions3037 = new BitSet(new long[]{0x07FFFFFB80000080L,0x00000000000057EFL,0x0000000000000002L});
    public static final BitSet FOLLOW_action_in_actions3043 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_booleanListExpression_in_listExpression3081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_intListExpression_in_listExpression3097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_doubleListExpression_in_listExpression3113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_floatListExpression_in_listExpression3129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringListExpression_in_listExpression3145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeListExpression_in_listExpression3161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleBooleanListExpression_in_booleanListExpression3185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_simpleBooleanListExpression3206 = new BitSet(new long[]{0x0000000000000000L,0x0000C00000000000L,0x0000000000000082L});
    public static final BitSet FOLLOW_simpleBooleanExpression_in_simpleBooleanListExpression3213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000880L});
    public static final BitSet FOLLOW_COMMA_in_simpleBooleanListExpression3218 = new BitSet(new long[]{0x0000000000000000L,0x0000C00000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_simpleBooleanExpression_in_simpleBooleanListExpression3224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000880L});
    public static final BitSet FOLLOW_RCURLY_in_simpleBooleanListExpression3233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_simpleBooleanListExpression3250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleIntListExpression_in_intListExpression3275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_simpleIntListExpression3296 = new BitSet(new long[]{0x0000000000000000L,0x0110000000000000L,0x0000000000004086L});
    public static final BitSet FOLLOW_simpleNumberExpression_in_simpleIntListExpression3303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000880L});
    public static final BitSet FOLLOW_COMMA_in_simpleIntListExpression3308 = new BitSet(new long[]{0x0000000000000000L,0x0110000000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_simpleNumberExpression_in_simpleIntListExpression3314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000880L});
    public static final BitSet FOLLOW_RCURLY_in_simpleIntListExpression3323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_simpleIntListExpression3340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_doubleListExpression_in_numberListExpression3374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_floatListExpression_in_numberListExpression3395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_intListExpression_in_numberListExpression3407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleDoubleListExpression_in_doubleListExpression3430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_simpleDoubleListExpression3451 = new BitSet(new long[]{0x0000000000000000L,0x0110000000000000L,0x0000000000004086L});
    public static final BitSet FOLLOW_simpleNumberExpression_in_simpleDoubleListExpression3458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000880L});
    public static final BitSet FOLLOW_COMMA_in_simpleDoubleListExpression3463 = new BitSet(new long[]{0x0000000000000000L,0x0110000000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_simpleNumberExpression_in_simpleDoubleListExpression3469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000880L});
    public static final BitSet FOLLOW_RCURLY_in_simpleDoubleListExpression3478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_simpleDoubleListExpression3495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleFloatListExpression_in_floatListExpression3519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_simpleFloatListExpression3540 = new BitSet(new long[]{0x0000000000000000L,0x0110000000000000L,0x0000000000004086L});
    public static final BitSet FOLLOW_simpleNumberExpression_in_simpleFloatListExpression3547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000880L});
    public static final BitSet FOLLOW_COMMA_in_simpleFloatListExpression3552 = new BitSet(new long[]{0x0000000000000000L,0x0110000000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_simpleNumberExpression_in_simpleFloatListExpression3558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000880L});
    public static final BitSet FOLLOW_RCURLY_in_simpleFloatListExpression3567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_simpleFloatListExpression3584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleStringListExpression_in_stringListExpression3609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_simpleStringListExpression3630 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000082L});
    public static final BitSet FOLLOW_simpleStringExpression_in_simpleStringListExpression3637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000880L});
    public static final BitSet FOLLOW_COMMA_in_simpleStringListExpression3642 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_simpleStringExpression_in_simpleStringListExpression3648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000880L});
    public static final BitSet FOLLOW_RCURLY_in_simpleStringListExpression3657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_simpleStringListExpression3674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleTypeListExpression_in_typeListExpression3699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_simpleTypeListExpression3720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000082L});
    public static final BitSet FOLLOW_simpleTypeExpression_in_simpleTypeListExpression3727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000880L});
    public static final BitSet FOLLOW_COMMA_in_simpleTypeListExpression3732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_simpleTypeExpression_in_simpleTypeListExpression3738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000880L});
    public static final BitSet FOLLOW_RCURLY_in_simpleTypeListExpression3747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_simpleTypeListExpression3764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_featureTypeExpression_in_typeMatchExpression3817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeFunction_in_typeMatchExpression3835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleTypeExpression_in_typeMatchExpression3848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeFunction_in_typeExpression3889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleTypeExpression_in_typeExpression3900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_externalTypeFunction_in_typeFunction3934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_externalTypeFunction3957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_externalTypeFunction3961 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x000000000000400EL});
    public static final BitSet FOLLOW_varArgumentList_in_externalTypeFunction3968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_externalTypeFunction3972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dottedId_in_featureAssignmentExpression3995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_featureAssignmentExpression4001 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_featureAssignmentExpression4007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dottedId_in_featureTypeExpression4029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_EQUAL_in_featureTypeExpression4036 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_NOTEQUAL_in_featureTypeExpression4044 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_featureTypeExpression4051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dottedId2_in_featureExpression4073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationType_in_simpleTypeExpression4096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variable4120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_listVariable4147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_quantifierPart4174 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_QUESTION_in_quantifierPart4180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_quantifierPart4192 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_QUESTION_in_quantifierPart4198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_quantifierPart4210 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_QUESTION_in_quantifierPart4216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_quantifierPart4229 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_quantifierPart4235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000820L});
    public static final BitSet FOLLOW_COMMA_in_quantifierPart4238 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004026L});
    public static final BitSet FOLLOW_numberExpression_in_quantifierPart4245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACK_in_quantifierPart4255 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_QUESTION_in_quantifierPart4261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionAnd_in_condition4304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionContains_in_condition4313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionContextCount_in_condition4322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionCount_in_condition4331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionCurrentCount_in_condition4340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionInList_in_condition4349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionLast_in_condition4358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionMofN_in_condition4367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionNear_in_condition4376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionNot_in_condition4385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionOr_in_condition4394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionPartOf_in_condition4403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionPosition_in_condition4412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionRegExp_in_condition4421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionScore_in_condition4430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionTotalCount_in_condition4439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionVote_in_condition4448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionIf_in_condition4457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionFeature_in_condition4466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionParse_in_condition4475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionIs_in_condition4484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionBefore_in_condition4493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionAfter_in_condition4502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionStartsWith_in_condition4511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionEndsWith_in_condition4520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionPartOfNeq_in_condition4529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionSize_in_condition4538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_externalCondition_in_condition4552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanExpression_in_condition4561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableCondition4596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_externalCondition4623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_externalCondition4629 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x000000000000400EL});
    public static final BitSet FOLLOW_varArgumentList_in_externalCondition4636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_externalCondition4640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_conditionAnd4671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionAnd4673 = new BitSet(new long[]{0xF80000007FFFF100L,0x0000E00000000810L,0x0000000000004006L});
    public static final BitSet FOLLOW_conditions_in_conditionAnd4679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionAnd4693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTAINS_in_conditionContains4739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionContains4741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_typeExpression_in_conditionContains4748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_listExpression_in_conditionContains4756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionContains4758 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_conditionContains4764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionContains4773 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionContains4779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionContains4781 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionContains4787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionContains4790 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_conditionContains4796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionContains4813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTEXTCOUNT_in_conditionContextCount4849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionContextCount4851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_conditionContextCount4857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionContextCount4871 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionContextCount4877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionContextCount4879 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionContextCount4885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionContextCount4900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_numberVariable_in_conditionContextCount4906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionContextCount4921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_conditionCount4972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionCount4974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_listExpression_in_conditionCount4980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionCount4995 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_conditionCount5001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionCount5017 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionCount5023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionCount5025 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionCount5031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionCount5049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_numberVariable_in_conditionCount5055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionCount5071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_conditionCount5087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionCount5089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_conditionCount5095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionCount5109 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionCount5115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionCount5117 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionCount5123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionCount5138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_numberVariable_in_conditionCount5144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionCount5161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENTCOUNT_in_conditionCurrentCount5201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionCurrentCount5203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_conditionCurrentCount5209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionCurrentCount5223 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionCurrentCount5229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionCurrentCount5231 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionCurrentCount5237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionCurrentCount5253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_numberVariable_in_conditionCurrentCount5259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionCurrentCount5274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TOTALCOUNT_in_conditionTotalCount5313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionTotalCount5315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_conditionTotalCount5321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionTotalCount5335 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionTotalCount5341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionTotalCount5343 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionTotalCount5349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionTotalCount5364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_numberVariable_in_conditionTotalCount5370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionTotalCount5385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INLIST_in_conditionInList5426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionInList5428 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_stringListExpression_in_conditionInList5443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_wordListExpression_in_conditionInList5451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionInList5460 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionInList5466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionInList5469 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_conditionInList5475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionInList5493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_conditionLast5537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionLast5539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_conditionLast5545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionLast5558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOFN_in_conditionMofN5594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionMofN5596 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionMofN5602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionMofN5604 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionMofN5610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionMofN5612 = new BitSet(new long[]{0xF80000007FFFF100L,0x0000E00000000810L,0x0000000000004006L});
    public static final BitSet FOLLOW_conditions_in_conditionMofN5618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionMofN5633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEAR_in_conditionNear5665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionNear5667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_conditionNear5673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionNear5675 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionNear5681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionNear5683 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionNear5689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionNear5697 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_conditionNear5703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionNear5706 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_conditionNear5712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionNear5732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_conditionNot5765 = new BitSet(new long[]{0xF80000007FFFF100L,0x0000E00000000810L,0x0000000000004006L});
    public static final BitSet FOLLOW_condition_in_conditionNot5771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_conditionNot5782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionNot5784 = new BitSet(new long[]{0xF80000007FFFF100L,0x0000E00000000810L,0x0000000000004006L});
    public static final BitSet FOLLOW_condition_in_conditionNot5790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionNot5792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_conditionOr5832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionOr5834 = new BitSet(new long[]{0xF80000007FFFF100L,0x0000E00000000810L,0x0000000000004006L});
    public static final BitSet FOLLOW_conditions_in_conditionOr5840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionOr5853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTOF_in_conditionPartOf5881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionPartOf5883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_typeExpression_in_conditionPartOf5890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_typeListExpression_in_conditionPartOf5896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionPartOf5913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTOFNEQ_in_conditionPartOfNeq5946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionPartOfNeq5948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_typeExpression_in_conditionPartOfNeq5955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_typeListExpression_in_conditionPartOfNeq5961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionPartOfNeq5978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POSITION_in_conditionPosition6015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionPosition6017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_conditionPosition6023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionPosition6036 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionPosition6042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionPosition6056 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_conditionPosition6062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionPosition6077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_conditionRegExp6105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionRegExp6107 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_conditionRegExp6128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionRegExp6130 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_conditionRegExp6136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_stringExpression_in_conditionRegExp6148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionRegExp6157 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_conditionRegExp6163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionRegExp6181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCORE_in_conditionScore6215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionScore6217 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionScore6223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionScore6226 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionScore6232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionScore6241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_numberVariable_in_conditionScore6247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionScore6264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VOTE_in_conditionVote6296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionVote6298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_conditionVote6304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionVote6306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_conditionVote6312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionVote6325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_conditionIf6359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionIf6361 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_conditionIf6367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionIf6380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FEATURE_in_conditionFeature6419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionFeature6421 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_conditionFeature6427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionFeature6429 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_conditionFeature6435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionFeature6448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARSE_in_conditionParse6479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionParse6481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_genericVariableReference_in_conditionParse6490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionParse6503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_conditionIs6533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionIs6535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_typeExpression_in_conditionIs6542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_typeListExpression_in_conditionIs6548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionIs6562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEFORE_in_conditionBefore6591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionBefore6593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_typeExpression_in_conditionBefore6600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_typeListExpression_in_conditionBefore6606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionBefore6620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_conditionAfter6649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionAfter6651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_typeExpression_in_conditionAfter6658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_typeListExpression_in_conditionAfter6664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionAfter6678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARTSWITH_in_conditionStartsWith6711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionStartsWith6713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_typeExpression_in_conditionStartsWith6720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_typeListExpression_in_conditionStartsWith6726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionStartsWith6740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENDSWITH_in_conditionEndsWith6773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionEndsWith6775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_typeExpression_in_conditionEndsWith6782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_typeListExpression_in_conditionEndsWith6788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionEndsWith6802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZE_in_conditionSize6835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_conditionSize6837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_listExpression_in_conditionSize6843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionSize6846 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionSize6852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_conditionSize6854 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_conditionSize6860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_conditionSize6865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_numberVariable_in_conditionSize6871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_conditionSize6886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionColor_in_action6919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionDel_in_action6928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionLog_in_action6937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionMark_in_action6946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionMarkScore_in_action6955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionMarkFast_in_action6964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionMarkLast_in_action6973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionReplace_in_action6982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionRetainType_in_action6991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionFilterType_in_action7000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionCreate_in_action7009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionFill_in_action7018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionCall_in_action7027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionAssign_in_action7036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionSetFeature_in_action7045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionGetFeature_in_action7054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionUnmark_in_action7063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionUnmarkAll_in_action7072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionTransfer_in_action7081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionMarkOnce_in_action7090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionTrie_in_action7099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionGather_in_action7108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionExec_in_action7118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionMarkTable_in_action7127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionAdd_in_action7136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionRemove_in_action7145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionRemoveDuplicate_in_action7154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionMerge_in_action7163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionGet_in_action7172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionGetList_in_action7182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionMatchedText_in_action7191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionClear_in_action7200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionShift_in_action7209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionConfigure_in_action7218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionDynamicAnchoring_in_action7227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionTrim_in_action7236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionAddFilterType_in_action7245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionAddRetainType_in_action7254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionRemoveFilterType_in_action7263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_actionRemoveRetainType_in_action7272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_externalAction_in_action7286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_featureAssignmentExpression_in_action7300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_action7316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableAction7355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_externalAction7380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_externalAction7384 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x000000000000400EL});
    public static final BitSet FOLLOW_varArgumentList_in_externalAction7392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_externalAction7398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_actionCreate7433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionCreate7435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionCreate7441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionCreate7448 = new BitSet(new long[]{0x0000000000000000L,0x09101F0000002000L,0x000000000000400EL});
    public static final BitSet FOLLOW_numberExpression_in_actionCreate7474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionCreate7491 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionCreate7497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionCreate7503 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x000000000000000AL});
    public static final BitSet FOLLOW_stringExpression_in_actionCreate7528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_actionCreate7530 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_actionCreate7536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionCreate7546 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionCreate7552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_actionCreate7554 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_actionCreate7560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionCreate7591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MARKTABLE_in_actionMarkTable7626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionMarkTable7628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionMarkTable7639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionMarkTable7641 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionMarkTable7652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionMarkTable7654 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_wordTableExpression_in_actionMarkTable7664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionMarkTable7671 = new BitSet(new long[]{0x0000000000000000L,0x0800E00000002000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_actionMarkTable7688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionMarkTable7695 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionMarkTable7701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionMarkTable7708 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionMarkTable7714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionMarkTable7720 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionMarkTable7726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionMarkTable7728 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionMarkTable7741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_actionMarkTable7745 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionMarkTable7751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionMarkTable7759 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionMarkTable7765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_actionMarkTable7769 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionMarkTable7775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionMarkTable7801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GATHER_in_actionGather7835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionGather7837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionGather7843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionGather7857 = new BitSet(new long[]{0x0000000000000000L,0x09101F0000002000L,0x000000000000400EL});
    public static final BitSet FOLLOW_numberExpression_in_actionGather7874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionGather7890 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionGather7896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionGather7903 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x000000000000000AL});
    public static final BitSet FOLLOW_stringExpression_in_actionGather7916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_actionGather7918 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004046L});
    public static final BitSet FOLLOW_numberExpression_in_actionGather7925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_numberListExpression_in_actionGather7933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionGather7944 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionGather7950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_actionGather7952 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004046L});
    public static final BitSet FOLLOW_numberExpression_in_actionGather7959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_numberListExpression_in_actionGather7967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionGather7999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILL_in_actionFill8034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionFill8036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionFill8042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionFill8060 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionFill8066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_actionFill8068 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_actionFill8078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionFill8100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLOR_in_actionColor8137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionColor8139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionColor8145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionColor8159 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionColor8170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionColor8184 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionColor8194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionColor8208 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_actionColor8218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionColor8234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEL_in_actionDel8266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOG_in_actionLog8312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionLog8314 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionLog8320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionLog8323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LogLevel_in_actionLog8329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionLog8345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MARK_in_actionMark8383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionMark8385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionMark8396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionMark8414 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionMark8430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionMark8452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFT_in_actionShift8489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionShift8491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionShift8502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionShift8520 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionShift8536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionShift8558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MARKSCORE_in_actionMarkScore8595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionMarkScore8597 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionMarkScore8603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionMarkScore8605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionMarkScore8611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionMarkScore8629 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionMarkScore8645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionMarkScore8667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MARKONCE_in_actionMarkOnce8704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionMarkOnce8706 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionMarkOnce8723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionMarkOnce8725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionMarkOnce8743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionMarkOnce8761 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionMarkOnce8777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionMarkOnce8799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MARKFAST_in_actionMarkFast8836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionMarkFast8838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionMarkFast8844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionMarkFast8857 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_wordListExpression_in_actionMarkFast8864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_stringListExpression_in_actionMarkFast8872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionMarkFast8888 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_actionMarkFast8894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionMarkFast8897 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionMarkFast8903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionMarkFast8906 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_actionMarkFast8912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionMarkFast8932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MARKLAST_in_actionMarkLast8964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionMarkLast8966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionMarkLast8972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionMarkLast8985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_in_actionReplace9018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionReplace9020 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionReplace9026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionReplace9039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINTYPE_in_actionRetainType9085 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionRetainType9088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionRetainType9094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionRetainType9110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionRetainType9116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionRetainType9133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FILTERTYPE_in_actionFilterType9183 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionFilterType9186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionFilterType9192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionFilterType9208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionFilterType9214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionFilterType9231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ADDFILTERTYPE_in_actionAddFilterType9283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionAddFilterType9286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionAddFilterType9292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionAddFilterType9308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionAddFilterType9314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionAddFilterType9331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ADDRETAINTYPE_in_actionAddRetainType9378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionAddRetainType9381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionAddRetainType9387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionAddRetainType9403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionAddRetainType9409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionAddRetainType9426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REMOVEFILTERTYPE_in_actionRemoveFilterType9474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionRemoveFilterType9477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionRemoveFilterType9483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionRemoveFilterType9499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionRemoveFilterType9505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionRemoveFilterType9522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REMOVERETAINTYPE_in_actionRemoveRetainType9569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionRemoveRetainType9572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionRemoveRetainType9578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionRemoveRetainType9594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionRemoveRetainType9600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionRemoveRetainType9617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CALL_in_actionCall9659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionCall9665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_dottedComponentReference_in_actionCall9687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionCall9701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONFIGURE_in_actionConfigure9736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionConfigure9742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_dottedComponentReference_in_actionConfigure9764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionConfigure9785 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionConfigure9791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_actionConfigure9793 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_actionConfigure9799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionConfigure9809 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionConfigure9815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_actionConfigure9817 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_actionConfigure9823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionConfigure9847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXEC_in_actionExec9882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionExec9888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_dottedComponentReference_in_actionExec9906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionExec9922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_typeListExpression_in_actionExec9928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionExec9944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_actionAssign9986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionAssign9988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_actionAssign9999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionAssign10017 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_actionAssign10023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionAssign10031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SETFEATURE_in_actionSetFeature10068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionSetFeature10070 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionSetFeature10076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionSetFeature10090 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_actionSetFeature10096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionSetFeature10109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GETFEATURE_in_actionGetFeature10138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionGetFeature10140 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionGetFeature10146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionGetFeature10159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_actionGetFeature10165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionGetFeature10178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DYNAMICANCHORING_in_actionDynamicAnchoring10208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionDynamicAnchoring10210 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_actionDynamicAnchoring10216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionDynamicAnchoring10231 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionDynamicAnchoring10237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionDynamicAnchoring10251 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionDynamicAnchoring10257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionDynamicAnchoring10274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRIM_in_actionTrim10308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionTrim10310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_typeExpression_in_actionTrim10332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionTrim10342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionTrim10348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_typeListExpression_in_actionTrim10368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionTrim10382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNMARK_in_actionUnmark10417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionUnmark10419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionUnmark10425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionUnmark10443 = new BitSet(new long[]{0x0000000000000000L,0x0110FF0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_booleanExpression_in_actionUnmark10469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_numberExpression_in_actionUnmark10493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionUnmark10507 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionUnmark10513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionUnmark10560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNMARKALL_in_actionUnmarkAll10591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionUnmarkAll10593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionUnmarkAll10599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionUnmarkAll10613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_typeListExpression_in_actionUnmarkAll10619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionUnmarkAll10634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRANSFER_in_actionTransfer10666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionTransfer10668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionTransfer10674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionTransfer10687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRIE_in_actionTrie10725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionTrie10727 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionTrie10741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_actionTrie10744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionTrie10759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionTrie10772 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionTrie10778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_actionTrie10782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_actionTrie10797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionTrie10811 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_wordListExpression_in_actionTrie10817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionTrie10833 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_actionTrie10839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionTrie10846 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionTrie10852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionTrie10859 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_actionTrie10865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionTrie10872 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionTrie10878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionTrie10885 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionTrie10891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionTrie10914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ADD_in_actionAdd10952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionAdd10954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_listVariable_in_actionAdd10960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionAdd10974 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_actionAdd10980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionAdd10997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REMOVE_in_actionRemove11031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionRemove11033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_listVariable_in_actionRemove11039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionRemove11053 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_actionRemove11059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionRemove11076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REMOVEDUPLICATE_in_actionRemoveDuplicate11106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionRemoveDuplicate11108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_listVariable_in_actionRemoveDuplicate11114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionRemoveDuplicate11127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_actionMerge11164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionMerge11166 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_actionMerge11172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionMerge11186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_listVariable_in_actionMerge11192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionMerge11206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_listExpression_in_actionMerge11212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionMerge11222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_listExpression_in_actionMerge11228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionMerge11245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GET_in_actionGet11274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionGet11276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_listExpression_in_actionGet11282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionGet11295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_actionGet11301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionGet11314 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionGet11320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionGet11333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GETLIST_in_actionGetList11363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionGetList11365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_listVariable_in_actionGetList11371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_actionGetList11384 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_actionGetList11390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionGetList11403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHEDTEXT_in_actionMatchedText11440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionMatchedText11442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_actionMatchedText11453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_actionMatchedText11465 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_actionMatchedText11471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_actionMatchedText11493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLEAR_in_actionClear11526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_actionClear11528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_listVariable_in_actionClear11534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_actionClear11547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_in_varArgumentList11572 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_varArgumentList11577 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_varArgumentList11583 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_stringExpression_in_argument11617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanExpression_in_argument11633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberExpression_in_argument11649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_argument11660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleStringExpression_in_primitiveArgument11709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleBooleanExpression_in_primitiveArgument11720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleNumberExpression_in_primitiveArgument11731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleTypeExpression_in_primitiveArgument11742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_dottedIdentifier11779 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_DOT_in_dottedIdentifier11792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_dottedIdentifier11802 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_Identifier_in_dottedId11834 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_DOT_in_dottedId11847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_dottedId11857 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_Identifier_in_dottedId211891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_DOT_in_dottedId211904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_dottedId211914 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_Identifier_in_dottedComponentReference11949 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_set_in_dottedComponentReference11962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_dottedComponentReference11978 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_Identifier_in_dottedComponentDeclaration12012 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_set_in_dottedComponentDeclaration12025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_dottedComponentDeclaration12041 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_annotationTypeVariableReference_in_annotationType12075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dottedId_in_annotationTypeVariableReference12104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_wordListExpression12128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RessourceLiteral_in_wordListExpression12141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_wordTableExpression12165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RessourceLiteral_in_wordTableExpression12178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_numberExpression12207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression12233 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000006000L});
    public static final BitSet FOLLOW_set_in_additiveExpression12250 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression12260 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000006000L});
    public static final BitSet FOLLOW_simpleNumberExpression_in_multiplicativeExpression12294 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000418000L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpression12318 = new BitSet(new long[]{0x0000000000000000L,0x0110000000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_simpleNumberExpression_in_multiplicativeExpression12336 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000418000L});
    public static final BitSet FOLLOW_numberFunction_in_multiplicativeExpression12352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_numberExpressionInPar12376 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_numberExpressionInPar12382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_numberExpressionInPar12388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_featureExpression_in_simpleNumberExpression12418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_simpleNumberExpression12431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_numberVariable_in_simpleNumberExpression12438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_simpleNumberExpression12453 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_DecimalLiteral_in_simpleNumberExpression12461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_simpleNumberExpression12475 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_FloatingPointLiteral_in_simpleNumberExpression12482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberExpressionInPar_in_simpleNumberExpression12498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_numberFunction12523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_numberExpressionInPar_in_numberFunction12545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_externalNumberFunction_in_numberFunction12569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_externalNumberFunction12592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_externalNumberFunction12595 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x000000000000400EL});
    public static final BitSet FOLLOW_varArgumentList_in_externalNumberFunction12602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_externalNumberFunction12606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_numberVariable12637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_numberVariable12650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_numberVariable12663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_featureExpression_in_stringExpression12706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringFunction_in_stringExpression12723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleStringExpression_in_stringExpression12736 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_PLUS_in_stringExpression12747 = new BitSet(new long[]{0x0000000000000000L,0x0800C00000000000L,0x0000000000000046L});
    public static final BitSet FOLLOW_simpleStringExpression_in_stringExpression12754 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_numberExpressionInPar_in_stringExpression12766 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_simpleBooleanExpression_in_stringExpression12778 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_listExpression_in_stringExpression12795 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_typeExpression_in_stringExpression12807 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_REMOVESTRING_in_stringFunction12844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_stringFunction12846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_stringFunction12852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_stringFunction12855 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_stringFunction12861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_RPAREN_in_stringFunction12866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_externalStringFunction_in_stringFunction12888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_externalStringFunction12911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_externalStringFunction12914 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x000000000000400EL});
    public static final BitSet FOLLOW_varArgumentList_in_externalStringFunction12921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_externalStringFunction12925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_simpleStringExpression12950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_simpleStringExpression12965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_featureTypeExpression_in_booleanExpression13006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_featureExpression_in_booleanExpression13022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_composedBooleanExpression_in_booleanExpression13038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleBooleanExpression_in_booleanExpression13049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literalBooleanExpression_in_simpleBooleanExpression13074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_simpleBooleanExpression13087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanCompare_in_composedBooleanExpression13133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanTypeExpression_in_composedBooleanExpression13153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanNumberExpression_in_composedBooleanExpression13172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanFunction_in_composedBooleanExpression13182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XOR_in_booleanFunction13207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_booleanFunction13209 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_booleanFunction13215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_booleanFunction13217 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_booleanFunction13223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_booleanFunction13225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_externalBooleanFunction_in_booleanFunction13247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_externalBooleanFunction13271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_externalBooleanFunction13274 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x000000000000400EL});
    public static final BitSet FOLLOW_varArgumentList_in_externalBooleanFunction13281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_externalBooleanFunction13285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleBooleanExpression_in_booleanCompare13310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_set_in_booleanCompare13316 = new BitSet(new long[]{0x0000000000000000L,0x0000E00000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_booleanExpression_in_booleanCompare13328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUE_in_literalBooleanExpression13355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FALSE_in_literalBooleanExpression13365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_booleanTypeExpression13392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_set_in_booleanTypeExpression13399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_booleanTypeExpression13412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_booleanNumberExpression13435 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_booleanNumberExpression13442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000001B180000L});
    public static final BitSet FOLLOW_set_in_booleanNumberExpression13449 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_booleanNumberExpression13478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_booleanNumberExpression13481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_genericVariableReference13501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_regexpRule_in_synpred1_RutaParser1854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberExpression_in_synpred2_RutaParser1925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_synpred2_RutaParser1927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberExpression_in_synpred3_RutaParser2087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_synpred3_RutaParser2089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleElement_in_synpred4_RutaParser2565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_VBAR_in_synpred4_RutaParser2567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ruleElement_in_synpred5_RutaParser2597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_AMPER_in_synpred5_RutaParser2599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanListExpression_in_synpred8_RutaParser3073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_intListExpression_in_synpred9_RutaParser3089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_doubleListExpression_in_synpred10_RutaParser3105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_floatListExpression_in_synpred11_RutaParser3121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringListExpression_in_synpred12_RutaParser3137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeListExpression_in_synpred13_RutaParser3153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_doubleListExpression_in_synpred14_RutaParser3366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_floatListExpression_in_synpred15_RutaParser3387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_featureTypeExpression_in_synpred16_RutaParser3809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeFunction_in_synpred17_RutaParser3827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeFunction_in_synpred18_RutaParser3881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_externalCondition_in_synpred20_RutaParser4544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_synpred21_RutaParser4972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LPAREN_in_synpred21_RutaParser4974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000042L});
    public static final BitSet FOLLOW_listExpression_in_synpred21_RutaParser4980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred21_RutaParser4995 = new BitSet(new long[]{0x0000000000000000L,0x0910FF0000002000L,0x0000000000004006L});
    public static final BitSet FOLLOW_argument_in_synpred21_RutaParser5001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_synpred21_RutaParser5017 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_synpred21_RutaParser5023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred21_RutaParser5025 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_synpred21_RutaParser5031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_COMMA_in_synpred21_RutaParser5049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_numberVariable_in_synpred21_RutaParser5055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RPAREN_in_synpred21_RutaParser5071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringListExpression_in_synpred22_RutaParser5436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred23_RutaParser6116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_synpred23_RutaParser6118 = new BitSet(new long[]{0x0000000000000000L,0x0800000000002000L,0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred23_RutaParser6120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_externalAction_in_synpred24_RutaParser7278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_featureAssignmentExpression_in_synpred25_RutaParser7292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_synpred26_RutaParser7308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberExpression_in_synpred27_RutaParser7466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred28_RutaParser7480 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_synpred28_RutaParser7486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred29_RutaParser7518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ASSIGN_EQUAL_in_synpred29_RutaParser7520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanExpression_in_synpred30_RutaParser7680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberExpression_in_synpred31_RutaParser7866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred32_RutaParser7880 = new BitSet(new long[]{0x0000000000000000L,0x01101F0000000000L,0x0000000000004006L});
    public static final BitSet FOLLOW_numberExpression_in_synpred32_RutaParser7886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberExpression_in_synpred36_RutaParser8714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_synpred37_RutaParser8734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanExpression_in_synpred39_RutaParser10460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred40_RutaParser11609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanExpression_in_synpred41_RutaParser11625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberExpression_in_synpred42_RutaParser11641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleStringExpression_in_synpred43_RutaParser11709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleBooleanExpression_in_synpred44_RutaParser11720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleNumberExpression_in_synpred45_RutaParser11731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleNumberExpression_in_synpred47_RutaParser12286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_featureExpression_in_synpred49_RutaParser12410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_externalNumberFunction_in_synpred50_RutaParser12561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_featureExpression_in_synpred51_RutaParser12698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringFunction_in_synpred52_RutaParser12715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_synpred53_RutaParser12743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_listExpression_in_synpred54_RutaParser12787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_externalStringFunction_in_synpred55_RutaParser12880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_featureTypeExpression_in_synpred56_RutaParser12999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_featureExpression_in_synpred57_RutaParser13014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_composedBooleanExpression_in_synpred58_RutaParser13030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanCompare_in_synpred59_RutaParser13125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanTypeExpression_in_synpred60_RutaParser13145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanNumberExpression_in_synpred61_RutaParser13164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_externalBooleanFunction_in_synpred62_RutaParser13239 = new BitSet(new long[]{0x0000000000000002L});

}